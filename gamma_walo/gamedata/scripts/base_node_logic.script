--[[
    base_node_logic.script
    ----------------------
    Maintains per-base stockpiles and consumption logic. Each base node
    stores resources up to 10 units per type. Daily consumption is
    determined by base specialization.
    Last edit: 2025-07-25
]]

local base_logic = {
    bases = {}, -- [base_id] = {owner=string, type=string, stockpile={}}
    CONSUMPTION = {
        militia = {scrap=1, herbs=1},
        trader  = {scrap=1, electronics=1, artifacts=1},
        research= {electronics=1, herbs=1, artifacts=1},
        hq      = {}
    }
}

--- Ensure a base record exists.
local function get_base(id)
    if not base_logic.bases[id] then
        base_logic.bases[id] = {
            owner=nil,
            type=nil,
            stockpile={scrap=0, herbs=0, electronics=0, artifacts=0}
        }
    end
    return base_logic.bases[id]
end

--- Register or update a base node.
function base_logic.register_base(id, owner, btype)
    local b = get_base(id)
    b.owner = owner
    b.type = btype
    return b
end

--- Add resources to a base stockpile.
function base_logic.add_resource(id, rtype, amount)
    local b = get_base(id)
    b.stockpile[rtype] = math.min((b.stockpile[rtype] or 0) + amount, 10)
end

--- Consume resources from a base if available.
function base_logic.consume(id)
    local b = get_base(id)
    local cost = base_logic.CONSUMPTION[b.type] or {}
    for r, amt in pairs(cost) do
        if (b.stockpile[r] or 0) < amt then
            return false
        end
    end
    for r, amt in pairs(cost) do
        b.stockpile[r] = b.stockpile[r] - amt
    end
    return true
end

--- Check if a base needs a given resource (less than max).
function base_logic.needs(id, rtype)
    local b = get_base(id)
    return (b.stockpile[rtype] or 0) < 10
end

return base_logic
