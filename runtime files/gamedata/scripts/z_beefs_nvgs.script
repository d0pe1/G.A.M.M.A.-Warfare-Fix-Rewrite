-----------------------------------------------------------------------------
--		
-----------------------------------------------------------------------------

-- Beef NVG MCM values
local nvg_gain_max = 2.0             -- max value for nvg gain (brightness)
local nvg_gain_min = 0.5             -- min value for nvg gain (brightness)
local nvg_washout_thresh = 0.1       -- used to calculate washout effect on light sources
local nvg_view_through_scope = false -- can you keep your NVGs on when looking through scope?
local nvg_gain_offset = 1.0          -- offset for nvg gain to accomodate for brighter/darker worlds
local nvg_stays_pda = true           -- disable nvg on PDA?
local shader_scope_compat = false    -- compatibility with 2d shader scopes
local nvg_radius = 0.5               -- Radius of circles

-- Variables
local nvg_generation = 0         -- 1, 2, or 3
local nvg_num_tubes = 0          -- 1, 2, or 4 tubes -- 11 for single offset left and 12 for single offset right
local nvg_gain_current = 1       -- current gain setting
local gain_directionality = true -- directionality of brightness adjust
local vignette_amount = 0.05     -- standard vignette value
local vignette_current = 1.0     -- current vignette value, for turn-on/ turn-off effect
local vignette_speed = 1.4       -- how fast vignette changes
local glitch_power = 0           -- how much 'glitch' to add to NVGs
local nvg_mode = 0               -- overlay preset
local crt_latch = false          -- latches crt effect on turn-on
local flip_latch = false         -- latches flip down effect on turn-on
local flip_speed = 1.4           -- how fast to flip down
local flip_down = 1              -- flip down value (1 all the way up, 100 all the way down)

-- Variables for turn-on animation
local torch_anm_state = 0

-- Variables for on-weapon zoom (and shader scopes compat)
local zoomed_in = false
local tube_count_temp = 0
--local vignette_temp = 0
local radius_temp
local scope_blur_temp = 0
local shader_scope_flag = false
local zoom = true

-- Variables for PDA auto-turn-off functionality
local disable_nvg = false
local mcm_enable_nvg_animation = true

-- to store the effect
local nv_eff = {
	["nightvision_1"] = {
		nvg_generation = 1,
		nvg_num_tubes = 1.0,
		nvg_mode = 3.0
	},
	["nightvision_2"] = {
		nvg_generation = 2,
		nvg_num_tubes = 2.0,
		nvg_mode = 0.0
	},
	["nightvision_3"] = {
		nvg_generation = 3,
		nvg_num_tubes = 4.0,
		nvg_mode = 0.0
	}
}
-----------------------------------------------------------------------------
--		
-----------------------------------------------------------------------------

function on_game_load()
	mcm_enable_nvg_animation = liz_fdda_redone_mcm.get_config("nvg/enable")
end

function on_option_change()
	nvg_gain_max = z_beefs_nvgs_mcm.get_config("nvg_gain_max_mcm")
	nvg_gain_min = z_beefs_nvgs_mcm.get_config("nvg_gain_min_mcm")
	nvg_gain_offset = z_beefs_nvgs_mcm.get_config("nvg_gain_offset_mcm")
	nvg_washout_thresh = z_beefs_nvgs_mcm.get_config("nvg_washout_thresh_mcm")
	nvg_view_through_scope = z_beefs_nvgs_mcm.get_config("nvg_view_through_scope_mcm")
	nv_eff["nightvision_1"].nvg_num_tubes = z_beefs_nvgs_mcm.get_config("nvg_gen1_tubes_mcm")
	nv_eff["nightvision_2"].nvg_num_tubes = z_beefs_nvgs_mcm.get_config("nvg_gen2_tubes_mcm")
	nv_eff["nightvision_3"].nvg_num_tubes = z_beefs_nvgs_mcm.get_config("nvg_gen3_tubes_mcm")
	nv_eff["nightvision_1"].nvg_mode = z_beefs_nvgs_mcm.get_config("nvg_gen1_mode_mcm")
	nv_eff["nightvision_2"].nvg_mode = z_beefs_nvgs_mcm.get_config("nvg_gen2_mode_mcm")
	nv_eff["nightvision_3"].nvg_mode = z_beefs_nvgs_mcm.get_config("nvg_gen3_mode_mcm")
	nvg_stays_pda = z_beefs_nvgs_mcm.get_config("nvg_stays_pda_mcm")
	shader_scope_compat = z_beefs_nvgs_mcm.get_config("shader_scope_compat")
    mcm_enable_nvg_animation = liz_fdda_redone_mcm.get_config("nvg/enable")
end

-----------------------------------------------------------------------------
--		NVG DATA PACKING AND UPDATE FUNCTION
-----------------------------------------------------------------------------

function pack_nvg_data()
	local x_1 = tostring(nvg_generation)                   -- Generation (1,2,3) - outputs 1.x to 3.x
	local x_2 = tostring(nvg_num_tubes * 10)               -- Num Tubes (1,2,4,1.1,1.2) outputs x.10, x.20, x.40, x.11, or x.12
	local y_1 = tostring(math.floor(nvg_gain_current * 10)) -- Gain Adjust (0.1 to 3) -- outputs 1.y to 30.y in 1. increment
	local y_2 = tostring(math.floor(nvg_washout_thresh * 10)) -- Washout Thresh (0.0 - 0.9) - outputs y.0 to y.9 in .1 increment
	local z_1 = tostring(math.floor(vignette_current * 100)) -- Vignette Amount (0.0 to 1.0) outputs 0.z to 100.z in 1. increment
	local z_2 = tostring(math.floor(glitch_power * 10))    -- Glitch Power (0.0 - 0.9) - outputs z.0 to z.9 in .1 increment
	local w_1 = tostring((math.floor(nvg_gain_offset * 10))) -- Gain Offset (0.5 to 3.0) - outputs 5.w to 30.w in 1. increment
	local w_2 = tostring(nvg_mode)                         -- Mode (0,1) - outputs w.0 or w.1 depending on mode

	return "(" ..
	x_1 .. "." .. x_2 .. "," .. y_1 .. "." .. y_2 .. "," .. z_1 .. "." .. z_2 .. "," .. w_1 .. "." .. w_2 .. ")"
end

function pack_nvg_data_2()
	local x_1 = tostring(math.floor(flip_down)) -- Flip down amount - outputs 1.x to 100.x
	local x_2 = tostring(0)
	local y_1 = tostring(0)
	local y_2 = tostring(math.floor(nvg_radius * 10)) -- Radius for NVG effect - outputs 0.0 to 0.9
	local z_1 = tostring(0)
	local z_2 = tostring(0)
	local w_1 = tostring(0)
	local w_2 = tostring(0)

	return "(" ..
	x_1 .. "." .. x_2 .. "," .. y_1 .. "." .. y_2 .. "," .. z_1 .. "." .. z_2 .. "," .. w_1 .. "." .. w_2 .. ")"
end

function update_nvgs()
	get_console():execute("r__nightvision " .. nvg_generation)
	get_console():execute("shader_param_8 " .. pack_nvg_data())
	get_console():execute("shader_param_7 " .. pack_nvg_data_2())
end

-----------------------------------------------------------------------------
--		NVG TURN ON AND TURN OFF FUNCTIONS, INCL ANIMATION
-----------------------------------------------------------------------------

function allow_animation()
	return (torch_anm_state == 0 and (not game.only_movekeys_allowed()) and (not IsMoveState("mcClimb")))
	-- return (torch_anm_state == 0 and game.hud_motion_allowed() and (not game.only_movekeys_allowed()) and actor_menu.get_last_mode() == 0 and (not IsMoveState("mcClimb")))
end

local lowered_anm_kinds = {
	["w_sniper"]  = true,
	["w_rifle"]   = true,
	["w_smg"]     = true,
	["w_shotgun"] = true,
}

local lowered_anm_classes = {
	["WP_VAL"]   = true,
	["WP_AK74"]  = true,
	["WP_LR300"] = true,
	["WP_BM16"]  = true,
	["WP_SVD"]   = true,
	["WP_SVU"]   = true,
	["WP_GROZA"] = true,
	["WP_ASHTG"] = true,
	["WP_SHOTG"] = true,
	["WP_RG6"]   = true,
	["WP_RPG7"]  = true,
	["D_PDA"]    = true,
}

play_animation = false
item_device.set_nightvision = function (section, state)
	if mcm_enable_nvg_animation and play_animation then
		play_animation = false
		set_nightvision_animated(section, state)
		return
	end

	if (not section) then return end

	local nv_settings = nv_eff[ini_sys:r_string_ex(section, "nv_effect")]
	if nv_settings then
		nvg_generation = nv_settings.nvg_generation
		nvg_num_tubes = nv_settings.nvg_num_tubes
		nvg_mode = nv_settings.nvg_mode

		if state and (not item_device.nv_state) then
			update_nvgs()
			utils_obj.play_sound("interface\\inv_nv_start")
			item_device.nv_state = true

			RegisterScriptCallback("actor_on_update", actor_on_update)
			RegisterScriptCallback("actor_on_weapon_zoom_in", actor_on_weapon_zoom_in)
			RegisterScriptCallback("actor_on_weapon_zoom_out", actor_on_weapon_zoom_out)
			RegisterScriptCallback("actor_on_info_callback", pda_check)
		elseif (not state) and item_device.nv_state then
			get_console():execute("r__nightvision 0")
			get_console():execute("shader_param_8 (0,0,0,0)")
			crt_latch = false
			flip_latch = false
			vignette_current = 1.0
			flip_down = 1
			nvg_radius = 0.5 -- hack to fix not correctly going back until i am better at this shit
			utils_obj.play_sound("interface\\inv_nv_off")
			item_device.nv_state = false
			UnregisterScriptCallback("actor_on_weapon_zoom_in", actor_on_weapon_zoom_in)
			UnregisterScriptCallback("actor_on_weapon_zoom_out", actor_on_weapon_zoom_out)
			UnregisterScriptCallback("actor_on_info_callback", pda_check)
			UnregisterScriptCallback("actor_on_update", actor_on_update)
		end
	end
end


function set_nightvision_animated(section, state)
    if (not section) then return end
    if not ini_sys:r_string_ex(section, "nv_effect") then return end
	if (not allow_animation()) or (not item_device.can_toggle_torch()) then return end
    if lam2.get_action_with_tag("nvg_animation") then return end

    torch_anm_state = 1
    local weapon_zoomed = axr_main.weapon_is_zoomed and (not (IsPistol(db.actor:active_item(), nil)) or db.actor:active_detector())
	local det_active = db.actor:active_detector() or nil

    -- if holding weapon and aiming disable ADS
	if (db.actor:active_item()) then
        if not det_active and weapon_zoomed then
            if (get_console():get_bool("wpn_aim_toggle")) then
                level.press_action(bind_to_dik(key_bindings.kWPN_ZOOM))
            else
                level.release_action(bind_to_dik(key_bindings.kWPN_ZOOM))
            end
        end
    end

	if state then
		--enable nvg
		lam2.add_action(lam2.get_template_action_wait_for_seconds(0.05)) 	--anim bug? small delay to prevent ctd
        lam2.add_action(get_template_action_nvg_enable_start())     		--enter hand motion
        lam2.add_action(get_template_action_nvg_enable(section))    		--equip nvg motion
	else
		--disable nvg
        lam2.add_action(get_template_action_nvg_disable_start())    		--fade in
        lam2.add_action(get_template_action_nvg_disable(section))   		--unequip nvg motion
		lam2.add_action(lam2.get_template_action_wait_for_seconds(0.05)) 	--anim bug? small delay to prevent ctd
        lam2.add_action(get_template_action_nvg_disable_end())      		--exit hand motion
	end
end

--- ----------------------------------------------------
--- action templates
--- ----------------------------------------------------

function get_template_action_nvg_enable_start()
	local a = lam2.get_template_action_play_animation()
	a.tag = "nvg_animation"
	a.name = "nvg_enable_start"
    a.sec = "anim_nvg_transition_hud"
    a.anm = "anm_show_start"
	a.cam = "cam_show_start"
    a.hands = 1
    a.anm_blend = true
    a.on_enter = function (self)
        game.play_hud_anm("liz\\headlamp\\liz_headlamp_toggle_weapon_sway.anm", 0, 1, 1, false)
        -- weapon inertia expanded patch
        if liz_inertia_expanded then
            liz_inertia_expanded.set_mask_flag(liz_inertia_expanded.mask_layers.anm_plays, true)
        end
    end
    return a
end

function get_template_action_nvg_enable(section)
	local a = lam2.get_template_action_play_animation()
	a.tag = "nvg_animation"
	a.name = "nvg_enable"
	a.sec = "anim_nvg_hud"
    a.anm = "anm_show"
    a.hands = 1
    a.anm_blend = true
    a.target = section
    a.fade_start = false
    a.fade_end = false
    a.on_execute = function (self, time)
        if time > self.duration - 0.35 and not self.fade_start then
            self.fade_start = true
            level.add_pp_effector("deimos_short.ppe", 4233, false)
        end
        if time > self.duration - 0.25 and not self.fade_end then
            self.fade_end = true
            level.remove_pp_effector(4233)
        end
    end
    a.on_exit = function (self)
        item_device.set_nightvision(self.target, true)
        torch_anm_state = 0
        -- weapon inertia expanded patch
        if liz_inertia_expanded then
            liz_inertia_expanded.set_mask_flag(liz_inertia_expanded.mask_layers.anm_plays, false)
        end
    end
    return a
end

function get_template_action_nvg_disable_start()
    local a = {
		tag = "nvg_animation",
		name = "nvg_disable_start",
        hands = 1,
        fade_disabled = false,
        enter = function (self)
            level.add_pp_effector("deimos_short.ppe", 4233, false)
        end,
        execute = function (self,time)
            if not self.fade_disabled then
                self.fade_disabled = true
                level.remove_pp_effector(4233)
            end
            if time > 0.4 then
                return lam2.states.success
            end
            return lam2.states.running
        end
    }
    return a
end

function get_template_action_nvg_disable(section)
	local a = lam2.get_template_action_play_animation()
	a.tag = "nvg_animation"
	a.name = "nvg_disable"
	a.sec = "anim_nvg_hud"
    a.anm = "anm_hide"
	a.cam = "cam_hide"
    a.hands = 1
    a.anm_blend = true
    a.target = section
    a.on_enter = function (self)
        game.play_hud_anm("liz\\headlamp\\liz_headlamp_toggle_weapon_sway.anm", 0, 1, 1, false)
        item_device.set_nightvision(self.target, false)
        -- weapon inertia expanded patch
        if liz_inertia_expanded then
            liz_inertia_expanded.set_mask_flag(liz_inertia_expanded.mask_layers.anm_plays, true)
        end
    end
    return a
end

function get_template_action_nvg_disable_end()
	local a = lam2.get_template_action_play_animation()
	a.tag = "nvg_animation"
	a.name = "nvg_disable_end"
	a.sec = "anim_nvg_transition_hud"
    a.anm = "anm_hide_end"
    a.hands = 1
    a.anm_blend = true
    a.on_exit = function (self)
        torch_anm_state = 0
        -- weapon inertia expanded patch
        if liz_inertia_expanded then
            liz_inertia_expanded.set_mask_flag(liz_inertia_expanded.mask_layers.anm_plays, false)
        end
    end
    return a
end

-----------------------------------------------------------------------------
--		NVG BRIGHTNESS ADJUSTMENT FUNCTION
-----------------------------------------------------------------------------

function brightness_adjust()
	if item_device.nv_state then
		local step_size = (nvg_gain_max - nvg_gain_min) / 3
		if gain_directionality and nvg_gain_current <= nvg_gain_max then
			nvg_gain_current = nvg_gain_current + step_size

			if nvg_gain_current >= nvg_gain_max then
				nvg_gain_current = nvg_gain_max
				gain_directionality = not gain_directionality
			end
		elseif not gain_directionality and nvg_gain_current >= nvg_gain_min then
			nvg_gain_current = nvg_gain_current - step_size

			if nvg_gain_current <= nvg_gain_min then
				nvg_gain_current = nvg_gain_min
				gain_directionality = not gain_directionality
			end
		end
		local snd_adjust = sound_object('interface\\inv_nvg')
		snd_adjust:play(db.actor, 0, sound_object.s2d)
		update_nvgs()
	end
end

-----------------------------------------------------------------------------
--		NVG STATE CHANGE EFFECT, MANIPULATES VIGNETTE AND LOCATION TO
--			SIMUALATE FLIPPING DOWN AND TURNING ON NVGS
-----------------------------------------------------------------------------

function state_change_effect()
	if not flip_latch and item_device.nv_state then
		if flip_down < 100 then
			flip_down = flip_down * flip_speed
		end

		if flip_down >= 100 then
			flip_down = 100
			flip_latch = true
		end
	end

	if flip_latch and not crt_latch and item_device.nv_state then
		if vignette_current > vignette_amount then
			vignette_current = vignette_current * (1 / vignette_speed)
		end

		if vignette_current <= vignette_amount then
			vignette_current = vignette_amount
			crt_latch = true
		end
	end
end

-----------------------------------------------------------------------------
--		NVG GLITCH EFFECT, CALLED FROM ITEM_DEVICES AND GLITCHES NVG DURING
--			PSY STORM AND BLOWOUT
-----------------------------------------------------------------------------

-- nvg glitch effect during blowouts and psy storms
function nvg_glitch(power)
	if item_device.nv_state then
		if glitch_power ~= power then
			glitch_power = power
			if not zoomed_in then
				update_nvgs()
			end
		end
	end
end

-----------------------------------------------------------------------------
--		TURNS OFF NVGS WHEN ADS, AS WELL AS CHANGE TO SINGLE CENTERED SCOPE
--			WHEN USING SHADER SCOPES TO MAINTAIN COMPATIBILITY
-----------------------------------------------------------------------------

function actor_on_weapon_zoom_in()
	zoom = true
	if ((not nvg_view_through_scope) or axr_main.binoc_is_zoomed) and item_device.nv_state then
		zoomed_in = true
		get_console():execute("r__nightvision 0")
		get_console():execute("shader_param_8 (0,0,0,0)")
	elseif (shader_scope_compat and item_device.nv_state) then
		local scopeName = nil
		local wpn = db.actor:active_item()
		if wpn:weapon_scope_status() == 2 then
			if wpn:weapon_is_scope() then
				local scope = utils_item.get_attached_scope(wpn)
				scopeName = utils_item.get_param(scope, wpn:id(), "scope_texture", "string")
			end
		else
			scopeName = utils_item.get_param(wpn:section(), wpn:id(), "scope_texture", "string")
		end
		--local tex_active = get_console():get_integer("scope_2dtexactive")
		if scopeName and scopeRadii.scopeRadii[scopeName] then
			scope_blur_temp = get_console():get_float("scope_blur_inner")
			tube_count_temp = nvg_num_tubes
			radius_temp = nvg_radius
			--vignette_temp = vignette_current
			nvg_num_tubes = 1
			get_console():execute("scope_blur_inner 0")
			nvg_radius = math.min(scopeRadii.scopeRadii[scopeName], 0.9)
			--vignette_current = 0.5 - scopeRadii.scopeRadii[scopeName]
			CreateTimeEvent("nvg_scope", "nvg_scope", 0.25, function()
				update_nvgs()
				return true
			end)
			shader_scope_flag = true
		end
	end
end

-----------------------------------------------------------------------------
--		TURN NVGS BACK ON AFTER THEY'VE BEEN TEMPORARILY DISABLED BY ADS FUNCTION
-----------------------------------------------------------------------------

function actor_on_weapon_zoom_out()
	zoom = false
	if (not nvg_view_through_scope and item_device.nv_state and zoomed_in) then
		zoomed_in = false
		update_nvgs()
	elseif (shader_scope_compat and item_device.nv_state and shader_scope_flag) then
		--vignette_current = vignette_temp
		nvg_num_tubes = tube_count_temp
		--nvg_radius = radius_temp
		nvg_radius = 0.5 -- hack to fix not correctly going back until i am better at this shit
		get_console():execute("scope_blur_inner " .. scope_blur_temp)
		RemoveTimeEvent("nvg_scope", "nvg_scope")
		shader_scope_flag = false
		update_nvgs()
	end
end

-----------------------------------------------------------------------------
--		IF AUTO-TURN-OFF IS ENABLED, THEN AUTO DISABLE NVG WHEN BRING UP PDA
-----------------------------------------------------------------------------

function pda_check(npc, info_id)
	local actor = db.actor
	if actor and item_device.nv_state then
		if info_id == "ui_pda" and not nvg_stays_pda then
			if not disable_nvg then
				get_console():execute("r__nightvision 0")
				get_console():execute("shader_param_8 (0,0,0,0)")
				disable_nvg = true
			end
		elseif info_id == "ui_pda_hide" and not nvg_stays_pda then
			if disable_nvg then
				update_nvgs()
				disable_nvg = false
			end
		end
	end
end

-----------------------------------------------------------------------------
--		Actor on update Function - keep as minimal as possible
-----------------------------------------------------------------------------
local tmr = 0
local tmr_step = 200
function actor_on_update()
	if (not crt_latch or not flip_latch) and item_device.nv_state then
		state_change_effect()
		update_nvgs()
	end

	tg = time_global()
	if tg < tmr then return end
	tmr = tg + tmr_step

	if (not zoom) and (zoomed_in or shader_scope_flag) then
		-- check for disable NVG while ADS
		if (not nvg_view_through_scope and item_device.nv_state and zoomed_in) then
			zoomed_in = false
			update_nvgs()
		elseif (shader_scope_compat and item_device.nv_state and shader_scope_flag) then
			--vignette_current = vignette_temp
			nvg_num_tubes = tube_count_temp
			--nvg_radius = radius_temp
			nvg_radius = 0.5 -- hack to fix not correctly going back until i am better at this shit
			get_console():execute("scope_blur_inner " .. scope_blur_temp)
			RemoveTimeEvent("nvg_scope", "nvg_scope")
			shader_scope_flag = false
			update_nvgs()
		end
	end
end

-----------------------------------------------------------------------------
--		Keybinding Functions
-----------------------------------------------------------------------------

-- long press to turn on/off NVG, short press to change brightness
-- function on_key_press()
-- 	return
-- end

-- function on_key_release(key)
-- 	return
-- end

-----------------------------------------------------------------------------
--		RegisterScriptCallback Functions
-----------------------------------------------------------------------------

-- local function actor_on_first_update()
-- 	-- normal_fov = device().fov * 0.7
-- 	-- torch_anm_time = game.get_motion_length(torch_anm_sec, "anm_switch", 1)
-- 	torch_anm_time = game.get_motion_length("anim_nvg_hud", "anm_hide", 1)
-- end

function on_game_start()
	RegisterScriptCallback("on_game_load", on_game_load)
	RegisterScriptCallback("on_option_change", on_option_change)
	-- RegisterScriptCallback("on_key_press", on_key_press)
	-- RegisterScriptCallback("on_key_release", on_key_release)
	-- RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	on_option_change()
end
