--[[
------------------------------------------------------------
-- Survival Mode Remade - Setup Zone population and manage smart terrain spawms
------------------------------------------------------------
-- by dph-hcl
------------------------------------------------------------
]]--

local function trace(...)
    printf(...)
end


local function array_flip(t)
    local result = {}
    for k, v in pairs(t) do
        result[v] = k
    end
    return result
end

local zombie_spawn_table = {}
local zombie_spawn_cfg = {
    ["zombifiedp"] = { "zombied_sim_squad_novice", "zombied_sim_squad_advanced", "zombied_sim_squad_veteran" },
    ["fracturep"] = { "simulation_fracture" },
    ["snorkp"] = { "simulation_snork" },
    ["bloodsuckerp"] = { "simulation_bloodsucker" },
    ["psysuckerp"] = { "simulation_psysucker" },
    ["blindp"] = { "simulation_zombie_blind_3zomb_civ", "simulation_zombie_blind_3zomb" },
}


local faction_spawn_table = {}
local faction_spawn_cfg = {
    "stalker", "bandit", "csky", "duty", "freedom", "merc", "army", "ecolog", "monolith", "renegade", "greh", "isg", "zombied"
}

local retarded_squad_names = {
    ["duty_sim_squad_alpha"] = "dolg_sim_squad_alpha",
    ["merc_sim_squad_alpha"] = "killer_sim_squad_alpha",
    ["duty_sim_squad_trader"] = "dolg_sim_squad_trader",
    ["duty_sim_squad_medic"] = "dolg_sim_squad_medic",
    ["duty_sim_squad_barman"] = "dolg_sim_squad_barman",
    ["duty_sim_squad_mechanic"] = "dolg_sim_squad_mechanic",
}

local mutant_spawn_table = {}
local flipped_mutant_spawn_table = {}
local mutant_spawn_cfg = {
    ["psysucker_"] = "psysuckerp",
    ["bloodsucker_"] = "bloodsuckerp",
    ["boar_"] = "boarp",
    ["snork_"] = "snorkp",
    ["chimera_"] = "chimerap",
    ["m_controller_"] = "controllerp",
    ["dog_"] = "dogp",
    ["tushkano_"] = "tushkanop",
    ["pseudodog_"] = "dogp",
    ["fracture_"] = "fracturep",
    ["lurker_"] = "lurkerp",
    ["cat_"] = "catp",
    ["psy_dog_"] = "psydogp",
    ["m_karlik_"] = "karlikp",
    ["burer_"] = "burerp",
    ["m_poltergeist_"] = "poltergeistp",
    ["gigant_"] = "gigantp",
    ["flesh_"] = "fleshp",
    ["rat_"] = "ratp",
    ["zombie_"] = "zombiep",
}

local mutant_spawn_squads = {
    ["psysucker_"] = "simulation_psysucker",
    ["bloodsucker_"] = "simulation_bloodsucker",
    ["boar_"] = "simulation_boar",
    ["snork_"] = "simulation_snork",
    ["chimera_"] = "simulation_chimera",
    ["m_controller_"] = "simulation_controller",
    ["dog_"] = "simulation_dog",
    ["tushkano_"] = "simulation_tushkano",
    ["pseudodog_"] = "simulation_dog",
    ["fracture_"] = "simulation_fracture",
    ["lurker_"] = "simulation_lurker",
    ["cat_"] = "simulation_cat",
    ["psy_dog_"] = "simulation_psy_dog",
    ["m_karlik_"] = "simulation_karlik",
    ["burer_"] = "simulation_burer",
    ["m_poltergeist_"] = "simulation_poltergeist",
    ["gigant_"] = "simulation_gigant",
    ["flesh_"] = "simulation_flesh",
    ["rat_"] = "simulation_rats",
    ["zombie_"] = "simulation_zombie",
}

-- spawn chance weights, more weight is more often
-- if for example chimera is 1 and dog is 10,
-- then dog spawns 10/1 = 10 times more often on average than chimera
local mutant_spawn_per_level = {
    ["k00_marsh"] = {
        ["psysucker_"] = 2.5,
        ["bloodsucker_"] = 5,
        ["boar_"] = 8,
        ["snork_"] = 3,
        ["chimera_"] = 1.7,
        ["m_controller_"] = 2,
        ["dog_"] = 9,
        ["tushkano_"] = 7,
        ["pseudodog_"] = 8,
        ["fracture_"] = 4,
        ["lurker_"] = 7,
        ["cat_"] = 9,
        ["psy_dog_"] = 4,
        ["m_karlik_"] = 2,
        ["burer_"] = 1.2,
        ["m_poltergeist_"] = 5,
        ["gigant_"] = 1,
        ["flesh_"] = 10,
        ["rat_"] = 4,
        ["zombie_"] = 4
    },
    ["l01_escape"] = {
        ["psysucker_"] = 1.5,
        ["bloodsucker_"] = 3,
        ["boar_"] = 8,
        ["snork_"] = 4,
        ["chimera_"] = 1.3,
        ["m_controller_"] = 2.5,
        ["dog_"] = 9,
        ["tushkano_"] = 6,
        ["pseudodog_"] = 8,
        ["fracture_"] = 5,
        ["lurker_"] = 5,
        ["cat_"] = 8,
        ["psy_dog_"] = 3,
        ["m_karlik_"] = 2,
        ["burer_"] = 1.2,
        ["m_poltergeist_"] = 3.5,
        ["gigant_"] = 1.2,
        ["flesh_"] = 7,
        ["rat_"] = 3,
        ["zombie_"] = 5
    },
    ["l02_garbage"] = {
        ["psysucker_"] = 2,
        ["bloodsucker_"] = 4,
        ["boar_"] = 8,
        ["snork_"] = 4,
        ["chimera_"] = 1.8,
        ["m_controller_"] = 3,
        ["dog_"] = 7,
        ["tushkano_"] = 8,
        ["pseudodog_"] = 7,
        ["fracture_"] = 4,
        ["lurker_"] = 4,
        ["cat_"] = 6,
        ["psy_dog_"] = 3.5,
        ["m_karlik_"] = 2.5,
        ["burer_"] = 2,
        ["m_poltergeist_"] = 4,
        ["gigant_"] = 1.6,
        ["flesh_"] = 7,
        ["rat_"] = 6,
        ["zombie_"] = 4
    },
    ["l03_agroprom"] = {
        ["psysucker_"] = 2.6,
        ["bloodsucker_"] = 5,
        ["boar_"] = 8,
        ["snork_"] = 4.5,
        ["chimera_"] = 2,
        ["m_controller_"] = 3.7,
        ["dog_"] = 6,
        ["tushkano_"] = 8,
        ["pseudodog_"] = 7,
        ["fracture_"] = 3.2,
        ["lurker_"] = 5,
        ["cat_"] = 5,
        ["psy_dog_"] = 4,
        ["m_karlik_"] = 2.5,
        ["burer_"] = 2.7,
        ["m_poltergeist_"] = 4.5,
        ["gigant_"] = 1.8,
        ["flesh_"] = 7,
        ["rat_"] = 2,
        ["zombie_"] = 3.5
    },
    ["k01_darkscape"] = {
        ["psysucker_"] = 1.7,
        ["bloodsucker_"] = 4.2,
        ["boar_"] = 6,
        ["snork_"] = 4,
        ["chimera_"] = 2,
        ["m_controller_"] = 3.5,
        ["dog_"] = 6,
        ["tushkano_"] = 4,
        ["pseudodog_"] = 7,
        ["fracture_"] = 5,
        ["lurker_"] = 4.5,
        ["cat_"] = 7.5,
        ["psy_dog_"] = 4,
        ["m_karlik_"] = 3,
        ["burer_"] = 1.5,
        ["m_poltergeist_"] = 5,
        ["gigant_"] = 2,
        ["flesh_"] = 6,
        ["rat_"] = 1,
        ["zombie_"] = 5
    },
    ["l04_darkvalley"] = {
        ["psysucker_"] = 2.2,
        ["bloodsucker_"] = 4,
        ["boar_"] = 6,
        ["snork_"] = 5,
        ["chimera_"] = 2.3,
        ["m_controller_"] = 3,
        ["dog_"] = 6,
        ["tushkano_"] = 5,
        ["pseudodog_"] = 7,
        ["fracture_"] = 3,
        ["lurker_"] = 6,
        ["cat_"] = 6,
        ["psy_dog_"] = 3.5,
        ["m_karlik_"] = 2,
        ["burer_"] = 2.4,
        ["m_poltergeist_"] = 4.2,
        ["gigant_"] = 1.8,
        ["flesh_"] = 7,
        ["rat_"] = 3,
        ["zombie_"] = 3.5
    },
    ["l05_bar"] = {
        ["psysucker_"] = 1.5,
        ["bloodsucker_"] = 2.5,
        ["boar_"] = 8,
        ["snork_"] = 3.5,
        ["chimera_"] = 1.5,
        ["m_controller_"] = 2,
        ["dog_"] = 7,
        ["tushkano_"] = 5,
        ["pseudodog_"] = 8,
        ["fracture_"] = 2,
        ["lurker_"] = 2.5,
        ["cat_"] = 6,
        ["psy_dog_"] = 4,
        ["m_karlik_"] = 1.5,
        ["burer_"] = 1.2,
        ["m_poltergeist_"] = 2,
        ["gigant_"] = 2.5,
        ["flesh_"] = 8,
        ["rat_"] = 3,
        ["zombie_"] = 4
    },
    ["l06_rostok"] = {
        ["psysucker_"] = 4,
        ["bloodsucker_"] = 5,
        ["boar_"] = 4,
        ["snork_"] = 5.5,
        ["chimera_"] = 2,
        ["m_controller_"] = 2.7,
        ["dog_"] = 4.5,
        ["tushkano_"] = 6,
        ["pseudodog_"] = 4,
        ["fracture_"] = 3,
        ["lurker_"] = 2,
        ["cat_"] = 5,
        ["psy_dog_"] = 4,
        ["m_karlik_"] = 2.5,
        ["burer_"] = 2.5,
        ["m_poltergeist_"] = 5.5,
        ["gigant_"] = 1.7,
        ["flesh_"] = 4,
        ["rat_"] = 2,
        ["zombie_"] = 4.5
    },
    ["l07_military"] = {
        ["psysucker_"] = 4,
        ["bloodsucker_"] = 6,
        ["boar_"] = 5,
        ["snork_"] = 4,
        ["chimera_"] = 2.5,
        ["m_controller_"] = 3.2,
        ["dog_"] = 4,
        ["tushkano_"] = 5,
        ["pseudodog_"] = 6,
        ["fracture_"] = 3.5,
        ["lurker_"] = 3.5,
        ["cat_"] = 4,
        ["psy_dog_"] = 5,
        ["m_karlik_"] = 3,
        ["burer_"] = 2.3,
        ["m_poltergeist_"] = 4.5,
        ["gigant_"] = 2.5,
        ["flesh_"] = 5,
        ["rat_"] = 1,
        ["zombie_"] = 5
    },
    ["l08_yantar"] = {
        ["psysucker_"] = 4.5,
        ["bloodsucker_"] = 3.5,
        ["boar_"] = 3,
        ["snork_"] = 5.5,
        ["chimera_"] = 2.3,
        ["m_controller_"] = 4.5,
        ["dog_"] = 3,
        ["tushkano_"] = 5,
        ["pseudodog_"] = 4,
        ["fracture_"] = 5.5,
        ["lurker_"] = 3.5,
        ["cat_"] = 2.2,
        ["psy_dog_"] = 5,
        ["m_karlik_"] = 3.5,
        ["burer_"] = 3,
        ["m_poltergeist_"] = 5.5,
        ["gigant_"] = 2.5,
        ["flesh_"] = 3.5,
        ["rat_"] = 1.5,
        ["zombie_"] = 5
    },
    ["l09_deadcity"] = {
        ["psysucker_"] = 3.5,
        ["bloodsucker_"] = 3,
        ["boar_"] = 2.5,
        ["snork_"] = 5,
        ["chimera_"] = 2.5,
        ["m_controller_"] = 4.5,
        ["dog_"] = 2,
        ["tushkano_"] = 3,
        ["pseudodog_"] = 3.5,
        ["fracture_"] = 5,
        ["lurker_"] = 2,
        ["cat_"] = 2,
        ["psy_dog_"] = 3.5,
        ["m_karlik_"] = 3,
        ["burer_"] = 2.5,
        ["m_poltergeist_"] = 3,
        ["gigant_"] = 2.5,
        ["flesh_"] = 1.5,
        ["rat_"] = 3,
        ["zombie_"] = 6
    },
    ["l10_limansk"] = {
        ["psysucker_"] = 3.5,
        ["bloodsucker_"] = 5,
        ["boar_"] = 2,
        ["snork_"] = 4.5,
        ["chimera_"] = 3,
        ["m_controller_"] = 4,
        ["dog_"] = 2,
        ["tushkano_"] = 3,
        ["pseudodog_"] = 4,
        ["fracture_"] = 3,
        ["lurker_"] = 2,
        ["cat_"] = 2,
        ["psy_dog_"] = 4,
        ["m_karlik_"] = 3,
        ["burer_"] = 2.5,
        ["m_poltergeist_"] = 3.5,
        ["gigant_"] = 1.7,
        ["flesh_"] = 1.5,
        ["rat_"] = 2,
        ["zombie_"] = 3.5
    },
    ["l10_radar"] = {
        ["psysucker_"] = 5,
        ["bloodsucker_"] = 3.5,
        ["boar_"] = 2,
        ["snork_"] = 4,
        ["chimera_"] = 3,
        ["m_controller_"] = 5,
        ["dog_"] = 2,
        ["tushkano_"] = 1.5,
        ["pseudodog_"] = 2.5,
        ["fracture_"] = 3.5,
        ["lurker_"] = 2.3,
        ["cat_"] = 2,
        ["psy_dog_"] = 4.5,
        ["m_karlik_"] = 4.5,
        ["burer_"] = 3,
        ["m_poltergeist_"] = 4,
        ["gigant_"] = 2.7,
        ["flesh_"] = 1.5,
        ["rat_"] = 1,
        ["zombie_"] = 6
    },
    ["l10_red_forest"] = {
        ["psysucker_"] = 4,
        ["bloodsucker_"] = 6,
        ["boar_"] = 1.5,
        ["snork_"] = 2,
        ["chimera_"] = 3.5,
        ["m_controller_"] = 4,
        ["dog_"] = 1.5,
        ["tushkano_"] = 2,
        ["pseudodog_"] = 2.5,
        ["fracture_"] = 1.5,
        ["lurker_"] = 3,
        ["cat_"] = 2,
        ["psy_dog_"] = 3,
        ["m_karlik_"] = 1.2,
        ["burer_"] = 2,
        ["m_poltergeist_"] = 3,
        ["gigant_"] = 1.5,
        ["flesh_"] = 1,
        ["rat_"] = 1,
        ["zombie_"] = 2
    },
    ["l11_hospital"] = {
        ["psysucker_"] = 3.5,
        ["bloodsucker_"] = 5,
        ["boar_"] = 1,
        ["snork_"] = 6.5,
        ["chimera_"] = 2,
        ["m_controller_"] = 4,
        ["dog_"] = 1.5,
        ["tushkano_"] = 6,
        ["pseudodog_"] = 1.3,
        ["fracture_"] = 3,
        ["lurker_"] = 1,
        ["cat_"] = 1.8,
        ["psy_dog_"] = 2.5,
        ["m_karlik_"] = 4.5,
        ["burer_"] = 2.5,
        ["m_poltergeist_"] = 2.7,
        ["gigant_"] = 1,
        ["flesh_"] = 1,
        ["rat_"] = 1.5,
        ["zombie_"] = 2.5
    },
    ["l11_pripyat"] = {
        ["psysucker_"] = 4,
        ["bloodsucker_"] = 5,
        ["boar_"] = 1.5,
        ["snork_"] = 4.5,
        ["chimera_"] = 3,
        ["m_controller_"] = 4,
        ["dog_"] = 1.5,
        ["tushkano_"] = 3,
        ["pseudodog_"] = 1.8,
        ["fracture_"] = 2.5,
        ["lurker_"] = 2,
        ["cat_"] = 5.5,
        ["psy_dog_"] = 2.5,
        ["m_karlik_"] = 4,
        ["burer_"] = 2.5,
        ["m_poltergeist_"] = 4.5,
        ["gigant_"] = 3.2,
        ["flesh_"] = 1,
        ["rat_"] = 1.5,
        ["zombie_"] = 2.5
    },
    ["l12_stancia"] = {
        ["psysucker_"] = 5,
        ["bloodsucker_"] = 4.5,
        ["boar_"] = 2,
        ["snork_"] = 4.5,
        ["chimera_"] = 3,
        ["m_controller_"] = 5,
        ["dog_"] = 1.8,
        ["tushkano_"] = 1.5,
        ["pseudodog_"] = 2.5,
        ["fracture_"] = 2.5,
        ["lurker_"] = 1.5,
        ["cat_"] = 1.7,
        ["psy_dog_"] = 2.5,
        ["m_karlik_"] = 3,
        ["burer_"] = 2.7,
        ["m_poltergeist_"] = 4,
        ["gigant_"] = 3.5,
        ["flesh_"] = 1.5,
        ["rat_"] = 1,
        ["zombie_"] = 4
    },
    ["l12_stancia_2"] = {
        ["psysucker_"] = 5,
        ["bloodsucker_"] = 4.5,
        ["boar_"] = 2,
        ["snork_"] = 4.5,
        ["chimera_"] = 3,
        ["m_controller_"] = 5,
        ["dog_"] = 1.8,
        ["tushkano_"] = 1.5,
        ["pseudodog_"] = 2.5,
        ["fracture_"] = 2.5,
        ["lurker_"] = 1.5,
        ["cat_"] = 1.7,
        ["psy_dog_"] = 2.5,
        ["m_karlik_"] = 3,
        ["burer_"] = 2.7,
        ["m_poltergeist_"] = 4,
        ["gigant_"] = 3.5,
        ["flesh_"] = 1.5,
        ["rat_"] = 1,
        ["zombie_"] = 4
    },
    ["l13_generators"] = {
        ["psysucker_"] = 5,
        ["bloodsucker_"] = 4.5,
        ["boar_"] = 2,
        ["snork_"] = 4.5,
        ["chimera_"] = 3,
        ["m_controller_"] = 5,
        ["dog_"] = 1.8,
        ["tushkano_"] = 1.5,
        ["pseudodog_"] = 2.5,
        ["fracture_"] = 2.5,
        ["lurker_"] = 1.5,
        ["cat_"] = 1.7,
        ["psy_dog_"] = 2.5,
        ["m_karlik_"] = 3,
        ["burer_"] = 2.7,
        ["m_poltergeist_"] = 4,
        ["gigant_"] = 3.5,
        ["flesh_"] = 1.5,
        ["rat_"] = 1,
        ["zombie_"] = 4
    },
    ["l03u_agr_underground"] = {
        ["psysucker_"] = 0.5,
        ["bloodsucker_"] = 3.5,
        ["boar_"] = 0.5,
        ["snork_"] = 4.5,
        ["chimera_"] = 0.5,
        ["m_controller_"] = 1.8,
        ["dog_"] = 1,
        ["tushkano_"] = 5,
        ["pseudodog_"] = 0.8,
        ["fracture_"] = 3,
        ["lurker_"] = 1.1,
        ["cat_"] = 1.9,
        ["psy_dog_"] = 1,
        ["m_karlik_"] = 3,
        ["burer_"] = 1.8,
        ["m_poltergeist_"] = 1.5,
        ["gigant_"] = 0.4,
        ["flesh_"] = 0.5,
        ["rat_"] = 1,
        ["zombie_"] = 3.3
    },
    ["l04u_labx18"] = {
        ["psysucker_"] = 0.8,
        ["bloodsucker_"] = 3.3,
        ["boar_"] = 0.5,
        ["snork_"] = 4.5,
        ["chimera_"] = 0.5,
        ["m_controller_"] = 2.2,
        ["dog_"] = 0.7,
        ["tushkano_"] = 3,
        ["pseudodog_"] = 0.8,
        ["fracture_"] = 2.2,
        ["lurker_"] = 4.5,
        ["cat_"] = 1.6,
        ["psy_dog_"] = 1,
        ["m_karlik_"] = 1.7,
        ["burer_"] = 2.5,
        ["m_poltergeist_"] = 5.5,
        ["gigant_"] = 0.7,
        ["flesh_"] = 0.5,
        ["rat_"] = 1,
        ["zombie_"] = 2.5
    },
    ["l08u_brainlab"] = {
        ["psysucker_"] = 4.5,
        ["bloodsucker_"] = 2.2,
        ["boar_"] = 0.5,
        ["snork_"] = 3.5,
        ["chimera_"] = 0.7,
        ["m_controller_"] = 4,
        ["dog_"] = 0.7,
        ["tushkano_"] = 3,
        ["pseudodog_"] = 0.8,
        ["fracture_"] = 4.5,
        ["lurker_"] = 2.6,
        ["cat_"] = 1.4,
        ["psy_dog_"] = 2,
        ["m_karlik_"] = 4,
        ["burer_"] = 2.5,
        ["m_poltergeist_"] = 3.5,
        ["gigant_"] = 0.8,
        ["flesh_"] = 0.5,
        ["rat_"] = 1,
        ["zombie_"] = 5.5
    },
    ["l10u_bunker"] = {
        ["psysucker_"] = 4.5,
        ["bloodsucker_"] = 4.5,
        ["boar_"] = 0.5,
        ["snork_"] = 3.5,
        ["chimera_"] = 2,
        ["m_controller_"] = 6,
        ["dog_"] = 0.7,
        ["tushkano_"] = 3,
        ["pseudodog_"] = 0.8,
        ["fracture_"] = 2.5,
        ["lurker_"] = 2,
        ["cat_"] = 1.2,
        ["psy_dog_"] = 3.2,
        ["m_karlik_"] = 2.8,
        ["burer_"] = 4,
        ["m_poltergeist_"] = 3.5,
        ["gigant_"] = 0.8,
        ["flesh_"] = 0.5,
        ["rat_"] = 1,
        ["zombie_"] = 3.5
    },
    ["l12u_sarcofag"] = {
        ["psysucker_"] = 2,
        ["bloodsucker_"] = 2.5,
        ["boar_"] = 0.5,
        ["snork_"] = 4.5,
        ["chimera_"] = 0.7,
        ["m_controller_"] = 4,
        ["dog_"] = 0.7,
        ["tushkano_"] = 2.2,
        ["pseudodog_"] = 0.8,
        ["fracture_"] = 1.1,
        ["lurker_"] = 0.5,
        ["cat_"] = 0.7,
        ["psy_dog_"] = 0.8,
        ["m_karlik_"] = 2.5,
        ["burer_"] = 4,
        ["m_poltergeist_"] = 3.5,
        ["gigant_"] = 0.8,
        ["flesh_"] = 0.5,
        ["rat_"] = 1,
        ["zombie_"] = 1.5
    },
    ["l12u_control_monolith"] = {
        ["psysucker_"] = 2,
        ["bloodsucker_"] = 2.5,
        ["boar_"] = 0.5,
        ["snork_"] = 4.5,
        ["chimera_"] = 0.7,
        ["m_controller_"] = 4,
        ["dog_"] = 0.7,
        ["tushkano_"] = 2.2,
        ["pseudodog_"] = 0.8,
        ["fracture_"] = 1.1,
        ["lurker_"] = 0.5,
        ["cat_"] = 0.7,
        ["psy_dog_"] = 0.8,
        ["m_karlik_"] = 2.5,
        ["burer_"] = 4,
        ["m_poltergeist_"] = 3.5,
        ["gigant_"] = 0.8,
        ["flesh_"] = 0.5,
        ["rat_"] = 1,
        ["zombie_"] = 1.5
    },
    ["l13u_warlab"] = {
        ["psysucker_"] = 4.5,
        ["bloodsucker_"] = 1,
        ["boar_"] = 0.5,
        ["snork_"] = 1.8,
        ["chimera_"] = 0.7,
        ["m_controller_"] = 3.5,
        ["dog_"] = 0.7,
        ["tushkano_"] = 1.2,
        ["pseudodog_"] = 0.8,
        ["fracture_"] = 1.1,
        ["lurker_"] = 0.5,
        ["cat_"] = 0.7,
        ["psy_dog_"] = 0.8,
        ["m_karlik_"] = 3,
        ["burer_"] = 4,
        ["m_poltergeist_"] = 6,
        ["gigant_"] = 0.8,
        ["flesh_"] = 0.5,
        ["rat_"] = 0.5,
        ["zombie_"] = 3.2
    },
    ["zaton"] = { --similar to kordon/garbage
        ["psysucker_"] = 2,
        ["bloodsucker_"] = 4.2,
        ["boar_"] = 7,
        ["snork_"] = 2.5,
        ["chimera_"] = 2,
        ["m_controller_"] = 3,
        ["dog_"] = 8,
        ["tushkano_"] = 4,
        ["pseudodog_"] = 7,
        ["fracture_"] = 3.2,
        ["lurker_"] = 4,
        ["cat_"] = 7.5,
        ["psy_dog_"] = 4.5,
        ["m_karlik_"] = 1.7,
        ["burer_"] = 1.5,
        ["m_poltergeist_"] = 4.5,
        ["gigant_"] = 1.8,
        ["flesh_"] = 8.5,
        ["rat_"] = 2,
        ["zombie_"] = 4
    },
    ["jupiter"] = { -- more or less random
        ["psysucker_"] = 5,
        ["bloodsucker_"] = 6,
        ["boar_"] = 7,
        ["snork_"] = 5,
        ["chimera_"] = 5,
        ["m_controller_"] = 6,
        ["dog_"] = 7,
        ["tushkano_"] = 6,
        ["pseudodog_"] = 7,
        ["fracture_"] = 5,
        ["lurker_"] = 6,
        ["cat_"] = 7,
        ["psy_dog_"] = 6,
        ["m_karlik_"] = 5,
        ["burer_"] = 5,
        ["m_poltergeist_"] = 6,
        ["gigant_"] = 5,
        ["flesh_"] = 7,
        ["rat_"] = 1,
        ["zombie_"] = 5,
    },
    ["jupiter_underground"] = {
        ["psysucker_"] = 1,
        ["bloodsucker_"] = 2.5,
        ["boar_"] = 0.5,
        ["snork_"] = 3.5,
        ["chimera_"] = 0.5,
        ["m_controller_"] = 1.7,
        ["dog_"] = 0.7,
        ["tushkano_"] = 4,
        ["pseudodog_"] = 0.8,
        ["fracture_"] = 1.5,
        ["lurker_"] = 2,
        ["cat_"] = 2.5,
        ["psy_dog_"] = 1.2,
        ["m_karlik_"] = 2.2,
        ["burer_"] = 3.2,
        ["m_poltergeist_"] = 2.7,
        ["gigant_"] = 0.7,
        ["flesh_"] = 0.5,
        ["rat_"] = 7,
        ["zombie_"] = 3.5
    },
    ["pripyat"] = {
        ["psysucker_"] = 3,
        ["bloodsucker_"] = 2.5,
        ["boar_"] = 1.5,
        ["snork_"] = 3,
        ["chimera_"] = 3,
        ["m_controller_"] = 3.5,
        ["dog_"] = 5,
        ["tushkano_"] = 7,
        ["pseudodog_"] = 5.5,
        ["fracture_"] = 5,
        ["lurker_"] = 3,
        ["cat_"] = 7,
        ["psy_dog_"] = 5.5,
        ["m_karlik_"] = 1.7,
        ["burer_"] = 2.5,
        ["m_poltergeist_"] = 3.5,
        ["gigant_"] = 3,
        ["flesh_"] = 1.7,
        ["rat_"] = 1,
        ["zombie_"] = 6
    },
    ["labx8"] = {
        ["psysucker_"] = 2,
        ["bloodsucker_"] = 2.5,
        ["boar_"] = 0.5,
        ["snork_"] = 4.5,
        ["chimera_"] = 0.7,
        ["m_controller_"] = 4,
        ["dog_"] = 0.7,
        ["tushkano_"] = 2.2,
        ["pseudodog_"] = 0.8,
        ["fracture_"] = 1.1,
        ["lurker_"] = 0.5,
        ["cat_"] = 0.7,
        ["psy_dog_"] = 0.8,
        ["m_karlik_"] = 2.5,
        ["burer_"] = 4,
        ["m_poltergeist_"] = 3.5,
        ["gigant_"] = 0.8,
        ["flesh_"] = 0.5,
        ["rat_"] = 1,
        ["zombie_"] = 1.5
    },
    ["k02_trucks_cemetery"] = {
        ["psysucker_"] = 1.5,
        ["bloodsucker_"] = 2,
        ["boar_"] = 6,
        ["snork_"] = 4,
        ["chimera_"] = 2.2,
        ["m_controller_"] = 3,
        ["dog_"] = 5,
        ["tushkano_"] = 8,
        ["pseudodog_"] = 6,
        ["fracture_"] = 3,
        ["lurker_"] = 5,
        ["cat_"] = 6.5,
        ["psy_dog_"] = 2.5,
        ["m_karlik_"] = 2,
        ["burer_"] = 1.8,
        ["m_poltergeist_"] = 3.2,
        ["gigant_"] = 2.2,
        ["flesh_"] = 5.5,
        ["rat_"] = 2,
        ["zombie_"] = 3.5
    }
}

--filtered mutant spawn table, prepared on game start
local filtered_spawn_table = {}

--filtered total spawn weights table, prepared on game start
local filtered_total_spawn_weights_table = {}

local function get_total_weight_on_level(level_name)
    local totalweight = 0
    local filtered_spawn_table_on_level = {}
    for mutant, weight in pairs(mutant_spawn_per_level[level_name]) do
        -- filter disabled mutants in menu and 0 weights
        if flipped_mutant_spawn_table[mutant] and (weight > 0) then
            totalweight = totalweight + weight
            filtered_spawn_table_on_level[mutant] = weight
        end
    end
    return totalweight, filtered_spawn_table_on_level
end

local function get_weighted_monster_spawn(level_name)
    --when return nil, make sure to set default value in parent function
    if not filtered_spawn_table[level_name] then
        trace("level %s not found, returning nil", level_name)
        return nil
    end

    if filtered_total_spawn_weights_table[level_name] == 0 then
        trace("total weight is 0, return nil")
        return nil
    end

    local rand = math.random() * filtered_total_spawn_weights_table[level_name]
    for mutant, weight in pairs(filtered_spawn_table[level_name]) do
        if (rand < weight) then
            trace("spawn %s, dice roll %s", mutant, rand)
            return mutant_spawn_squads[mutant]
        end
        rand = rand - weight
    end
end

local function please_die_sid()
    local ids = {"red_forester_tech", "esc_m_trader"}
    for i, n in ipairs(ids) do
        smr_debug.get_log().info("population", "removing story object %s", n)
        local so = get_story_object_id(n)
        if so then alife_release_id(so) end
    end
end

function get_zombie_spawn_table()
    if next(zombie_spawn_table) == nil then
        for k, n in pairs(zombie_spawn_cfg) do
            if smr_zombies_mcm.get_config(k) then
                for i, s in ipairs(n) do
                    table.insert(zombie_spawn_table, s)
                end
            end
        end
        if next(zombie_spawn_table) == nil or smr_zombies_mcm.get_config("zombiesp") then
            for i = 1, smr_zombies_mcm.get_config("zombies_amount") do
                table.insert(zombie_spawn_table, "simulation_zombie")
            end
        end
    end
    return zombie_spawn_table
end

function get_faction_spawn_table()
    if next(faction_spawn_table) == nil then
        for k, n in ipairs(faction_spawn_cfg) do
            if smr_stalkers_mcm.get_config(n) then
                table.insert(faction_spawn_table, n)
            end
        end
    end
    if next(faction_spawn_table) == nil then
        table.insert(faction_spawn_table, "stalker")
    end
    return faction_spawn_table
end

local function is_squad_faction_enabled(squad)
    local t = get_faction_spawn_table()
    local faction = ini_sys:r_string_ex(squad, "faction")
    if faction == "dolg" then
        faction = "duty"
    end
    if faction == "killer" then
        faction = "merc"
    end
    for i, f in ipairs(t) do
        if (faction == f) then
            return true
        end
    end
    return false
end

function get_mutant_spawn_table()
    if next(mutant_spawn_table) == nil then
        for m, c in pairs(mutant_spawn_cfg) do
            if (smr_mutants_mcm.get_config(c) == true) then
                table.insert(mutant_spawn_table, m)
            end
        end
        if next(mutant_spawn_table) == nil then
            table.insert(mutant_spawn_table, "chimera_")  --why?
        end
        flipped_mutant_spawn_table = array_flip(mutant_spawn_table)
    end
    return mutant_spawn_table
end

local function is_mutant_type_enabled(section)
    local t = get_mutant_spawn_table()
    for i, m in pairs(t) do
        if (string.sub(section, 1, string.len(m)) == m) then
            return true
        end
    end
    return false
end

local function get_random_enabled_mutant_squad(smart)
    -- mutant spawn table {"psysucker_", "bloodsucker_", ...}
    local t = get_mutant_spawn_table() 
    if smr_mutants_mcm.get_config("balanced_mutants") then
        trace("ZCP Balanced Mutants enabled")
        local level_name = alife():level_name(game_graph():vertex(smart.m_game_vertex_id):level_id())
        trace("Level name: %s", level_name)
        return get_weighted_monster_spawn(level_name) or mutant_spawn_squads[t[math.random(#t)]]
    else
        return mutant_spawn_squads[t[math.random(#t)]]
    end
end

local function get_common_squad_type(squad_name)
    local ss = str_explode(squad_name, "_")
    if  ss[4] == "novice"
        or ss[4] == "advanced"
        or ss[4] == "veteran"
        or ss[4] == "alpha"
        or ss[4] == "trader"
        or ss[4] == "medic"
        or ss[4] == "barman"
        or ss[4] == "mechanic"
    then
        return ss[4]
    end
    return false
end

local function release_npc_or_squad(npc, squad)
    alife_release(npc)
    if (squad:npc_count() <= 1) then
        alife_release_id(squad.id)
    end
end

local function try_spawn_faction(orig_spawn, smart)
    if (not orig_spawn) then
        return false
    end
    -- setup comparable squad of random enabled faction
    local t = get_faction_spawn_table()
    local st = { "novice", "veteran", "advanced" }
    local squad_type = get_common_squad_type(orig_spawn) or st[math.random(#st)]
    local tt = t[math.random(#t)] .. "_sim_squad_" .. squad_type
    for n, r in pairs(retarded_squad_names) do
        if tt == n then
            tt = r
        end
    end
    -- random stalkers
    if  smr_stalkers_mcm.get_config("random_stalkers")
        and (math.random(1,100) <= smr_stalkers_mcm.get_config("random_stalkers_chance"))
        -- only replace common squads with random stalkers
        and (ini_sys:r_bool_ex(orig_spawn, "common"))
        -- check if smart is base
        and (not smr_civil_war.smart_is_base(smart:name()))
    then
        smr_debug.get_log().info("population/stalkers", "replaced squad %s with random stalkers %s (smart: %s)", orig_spawn, tt, smart:name())
        return tt
    end
    -- check if faction is enabled
    if is_squad_faction_enabled(orig_spawn) then
        smr_debug.get_log().info("population/stalkers", "faction enabled - returning %s", orig_spawn)
        return orig_spawn
    end
    -- replace if option enabled
    if not smr_stalkers_mcm.get_config("factions_replace_squads") then
        smr_debug.get_log().info("population/stalkers", "faction %s not enabled - not spawning squad %s", ini_sys:r_string_ex(orig_spawn,"faction"), orig_spawn)
        return false
    end
    smr_debug.get_log().info("population/stalkers", "faction %s not enabled: replaced squad %s with random stalkers %s", ini_sys:r_string_ex(orig_spawn,"faction"), orig_spawn, tt)
    return tt
end

local function add_random_npc_to_squad(squad, smart)
    local npcs = ini_sys:r_string_ex(squad:section_name(),"npc_random")
    if (not npcs) then
        npcs = ini_sys:r_string_ex(squad:section_name(),"npc")
    end
    local t = parse_names(npcs)
    local section = t[math.random(#t)]
    local faction = ini_sys:r_string_ex(squad:section_name(), "faction")
    if is_squad_monster[faction] and (not is_mutant_type_enabled(section)) then
        smr_debug.get_log().warn("population/monsters", "could not add %s to squad %s (type disabled or faction %s not mutant)", section, squad:section_name(), faction)
        return nil
    end
    local npc = alife_create(section, smart)
    squad:register_member(npc.id)
    smr_debug.get_log().info("population/monsters", "added %s to squad %s", section, squad:section_name())
    return npc
end

-- ---
-- ENTRY POINTS
-- ---

-- smart_terrain.se_smart_terrain:try_respawn()
-- simulation_board:fill_start_position()
function smr_handle_spawn(orig_spawn, smart)
    -- player wished for control
    if has_alife_info("actor_made_wish_for_control") then
		return SIMBOARD:create_squad(smart, "simulation_controller_psy")
    end
    -- ZCP not enabled
    if not smr_amain_mcm.get_config("smr_enabled") then
        smr_debug.get_log().info("population", "not replacing spawn -- ZCP disabled")
        return SIMBOARD:create_squad(smart, orig_spawn)
    end
    -- zombies
    local rnd = math.random(1,100)
    if  smr_zombies_mcm.get_config("zombie_spawn")
        and rnd <= smr_zombies_mcm.get_config("zombie_chance")
        -- only replace common squads
        and ini_sys:r_bool_ex(orig_spawn,"common")
        -- skip bases
        and (not smr_civil_war.smart_is_base(smart))
    then
        local t = get_zombie_spawn_table()
        local tt = t[math.random(#t)]
        smr_debug.get_log().info("population/zombies", "replaced squad %s with zombie variant %s (%s <= %s)", orig_spawn, tt, rnd, smr_zombies_mcm.get_config("zombie_chance"))
        return SIMBOARD:create_squad(smart, tt)
    end
    local faction = ini_sys:r_string_ex(orig_spawn, "faction")
    -- mutant squads
    if is_squad_monster[faction] then
        if  (string.sub(orig_spawn, 1, string.len("simulation_")) == "simulation_")
            and smr_mutants_mcm.get_config("random_mutants")
            and (math.random(1,100) <= smr_mutants_mcm.get_config("random_mutants_chance"))
        then
            trace("calling random mutant spawn")
            local m = get_random_enabled_mutant_squad(smart)
            smr_debug.get_log().info("population/monsters", "replaced squad %s with random mutant %s", orig_spawn, m)
            return SIMBOARD:create_squad(smart, m)
        end
    -- stalker squads
    else
        local maybe_squad_section = try_spawn_faction(orig_spawn, smart)
        if maybe_squad_section then
            return SIMBOARD:create_squad(smart, maybe_squad_section)
        end
        return nil
    end
    -- return original spawn
    return SIMBOARD:create_squad(smart, orig_spawn)
end

-- smart_terrain.se_smart_terrain:try_respawn()
function smart_can_respawn(smart)
    local name = smart:name()
    local last_respawn_update = smart.last_respawn_update
    -- default value
    if (not smr_amain_mcm.get_config("smr_enabled")) and (smr_amain_mcm.get_config("respawn_idle") ~= 86400) then
        smr_debug.get_log().info("population/smart", "default respawn check value: ZCP disabled or respawn_idle set to 86400 (testing for smart %s)", name)
        local curr_time = game.get_game_time()
        return last_respawn_update == nil or curr_time:diffSec(last_respawn_update) > smart.respawn_idle
    end
    -- last update was nil
    local cfg = smr_amain_mcm.get_config("respawn_idle")
    if last_respawn_update == nil then
        smr_debug.get_log().info("population/smart", "respawn check sucessful for smart %s (last update was nil)", name)
        return true
    end
    -- respawns disabled
    if cfg == -1 then
        smr_debug.get_log().info("population/smart", "respawn check failed: respawns disabled (testing for smart %s)", name)
        return false
    end
    -- use ZCP config value
    local diff = game.get_game_time():diffSec(last_respawn_update)
    if diff > cfg then
        smr_debug.get_log().info("population/smart", "respawn check sucessful for smart %s (last update was %s, diff is %s)", name, last_respawn_update, diff)
        return true
    else
        return false
    end
end

-- smart_terrain.se_smart_terrain:try_respawn()
-- simulation_board:fill_start_position()
function get_stalker_pop_factor()
    if smr_amain_mcm.get_config("smr_enabled") then
        smr_debug.get_log().info("population/stalkers", "overriding population factor")
        return smr_amain_mcm.get_config("stalker_pop_factor")
    end
    smr_debug.get_log().info("population/stalkers", "ZCP disabled: using default population factor")
    return ui_options.get("alife/general/alife_stalker_pop")
end

-- smart_terrain.se_smart_terrain:try_respawn()
-- simulation_board:fill_start_position()
function get_monster_pop_factor()
    if smr_amain_mcm.get_config("smr_enabled") then
        smr_debug.get_log().info("population/monsters", "overriding population factor")
        return smr_amain_mcm.get_config("monster_pop_factor")
    end
    smr_debug.get_log().info("population/monsters", "ZCP disabled: using default population factor")
    return ui_options.get("alife/general/alife_mutant_pop")
end

-- sim_board.simulation_board:create_squad()
function remove_disabled_mutants_from_squad(squad, spawn_smart)
    if (not smr_amain_mcm.get_config("smr_enabled")) then
        return
    end
    local sim = alife()
    -- remove disabled mutants
    for k in squad:squad_members() do
        local se_obj = k.object or k.id and sim:object(k.id)
        if 	IsMonster(nil, se_obj:clsid())
            and (not get_object_story_id(se_obj.id))
            and (not is_mutant_type_enabled(se_obj:section_name()))
        then
            smr_debug.get_log().info("population/monsters", "releasing disabled mutant %s in squad %s", se_obj:section_name(), squad:section_name())
            alife_release(se_obj)
        end
    end
    -- remove last squad member
    if 	(squad:npc_count() <= 1) and (string.sub(squad:name(), 1, string.len("simulation_")) == "simulation_") then
        -- I don't think there's a way to just get the first squad member...
        for k in squad:squad_members() do
            local se_obj = k.object or k.id and sim:object(k.id)
            if 	IsMonster(nil, se_obj:clsid())
                and (not get_object_story_id(se_obj.id))
                and (not is_mutant_type_enabled(se_obj:section_name()))
            then
                alife_release_id(squad.id)
                smr_debug.get_log().info("population/monsters", "releasing monster squad %s", squad:section_name())
                if smr_mutants_mcm.get_config("types_replace_squads") then
                    local rnd = get_random_enabled_mutant_squad(spawn_smart)
                    smr_debug.get_log().info("population/monsters", "released monster squad %s replaced with %s", squad:section_name(), rnd)
                    SIMBOARD:create_squad(spawn_smart, rnd)
                end
            end
        end
    end
end

-- sim_board.simulation_board:create_squad()
function adjust_squad_size(squad, smart)
    local faction = ini_sys:r_string_ex(squad:section_name(), "faction")
    if (not is_squad_monster[faction]) then
        smr_debug.get_log().info("population/monsters", "no adjustment to squad size for %s (stalker squad)", squad:section_name())
        return
    end
    if (smr_mutants_mcm.get_config("squad_size") == 1.0) and (smr_mutants_mcm.get_config("squad_size_variance") == 0) then
        smr_debug.get_log().info("population/monsters", "no adjustment to squad size for %s", squad:section_name())
        return
    end
    if get_story_squad(squad:section_name()) then
        smr_debug.get_log().warn("population/monsters", "no adjustment to squad size for %s (story squad)", squad:section_name())
        return
    end
    local variance = smr_mutants_mcm.get_config("squad_size_variance")
    local var_fac = random_float(-variance, variance)
    local fac = smr_mutants_mcm.get_config("squad_size") + var_fac
    local target_count = squad:npc_count() * fac
    local target_diff = target_count - squad:npc_count()
    smr_debug.get_log().info("population/monsters", "adjusting squad %s size: from %s to %s (diff: %s, factor: %s)", squad:section_name(), squad:npc_count(), target_count, target_diff, fac)
    if (target_diff > 0) then
        for i=target_diff, 0, -1 do
            if i < 1 then
                if (math.random() < i) then
                    add_random_npc_to_squad(squad, smart)
                end
                break
            else
                add_random_npc_to_squad(squad, smart)
            end
        end
        smr_debug.get_log().info("population/monsters", "adjusted squad %s size up: new count is %s", squad:section_name(), squad:npc_count())
    elseif (target_diff < 0) then
        for k in squad:squad_members() do
            local sim = alife()
            local se_obj = k.object or k.id and sim:object(k.id)
            if (target_diff >= 0) then
                break
            elseif (target_diff < -1) then
                alife_release(se_obj)
                target_diff = target_diff + 1
            elseif (target_diff == -1) then
                release_npc_or_squad(se_obj, squad)
                target_diff = target_diff + 1
            else
                if math.random() < target_diff then
                    alife_release(se_obj)
                end
                break
            end
        end
        smr_debug.get_log().info("population/monsters", "adjusted squad %s size down: new count is %s", squad:section_name(), squad:npc_count())
    end
end

-- simulation_board:fill_start_position()
function get_population_preset()
    if smr_amain_mcm.get_config("smr_enabled") and (smr_stalkers_mcm.get_config("base_population") ~= "sim_smr_default") then
		smr_debug.get_log().info("population", "using population preset %s", "misc\\"..smr_stalkers_mcm.get_config("base_population")..".ltx")
		return ini_file("misc\\"..smr_stalkers_mcm.get_config("base_population")..".ltx")
	else 
        smr_debug.get_log().info("population", "using default population preset")
		return ini_file("misc\\simulation.ltx")
	end 
end

local function actor_on_first_update()
    --prepare mutant spawns
    get_mutant_spawn_table()
    for level, t in pairs(mutant_spawn_per_level) do
        filtered_total_spawn_weights_table[level], filtered_spawn_table[level] = get_total_weight_on_level(level)
    end
    
    if smr_amain_mcm.get_config("smr_enabled") and (smr_stalkers_mcm.get_config("base_population") == "sim_smr_none") then
        smr_debug.get_log().info("population", "removing story objects")
	    please_die_sid()
    end
end

function on_game_start()
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end
