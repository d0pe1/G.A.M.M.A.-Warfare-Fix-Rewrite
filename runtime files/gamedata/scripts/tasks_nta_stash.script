
local state = {}

local rolled_map = {}
local rolled_stash = {}
local target_rolled = {}

function save_state(mdata)
	mdata.nta_stash_task_data = state
end

function load_state(mdata)
	if mdata.nta_stash_task_data then
		state = mdata.nta_stash_task_data
	end
end

function task_initialized(task_id)
    return state[task_id] and state[task_id].target_id
end

task_status_functor.nta_stash_task_status_functor = function(tsk,task_id)
    if not task_initialized(task_id) then return end
	local stage = tsk.stage

	if stage == 0 then
        if utils_item.has_item_by_id(nil, state[task_id].target_id) then
            tsk.stage = 1
        end
    end
end

task_functor.nta_stash_task_target_functor = function(task_id,field,p,tsk)
    if not task_initialized(task_id) then return end
	local stage = tsk.stage

    if stage == 0 then
        return state[task_id].target_id
    end

    if stage == 1 then
        return tsk.task_giver_id
    end
end

xr_effects.nta_stash_task_cleanup = function(actor, npc, p)
    state[p[1]] = nil
end

xr_effects.nta_stash_task_completed = function(actor, npc, p)
    news_manager.relocate_item(nil, "out", p[2])
    safe_release_manager.release({ id = state[p[1]].target_id })
end

local function collect_targeted_maps(p)
    local result = {}
    for i=3,#p do
        table.insert(result, p[i])
    end
    return result
end

-- p[1] - task id
-- p[2] - quest item section
-- p[3+] - targeted maps
xr_effects.dispatch_nta_stash_task_details = function(actor, npc, p)
    local task_id = p[1]
    if not target_rolled[task_id] then
        local maps = collect_targeted_maps(p)
        rolled_map[task_id] = maps[math.random(1, #maps)]

        local stashes_on_level = z_nta_stashes_utils.stashes_by_level[rolled_map[task_id]]
        rolled_stash[task_id] = stashes_on_level[math.random(1, #stashes_on_level)]

        target_rolled[task_id] = true
    end

    CreateTimeEvent(0,"nta_stash_task_details",0, function ()
        local news_caption = game.translate_string(task_manager.task_ini:r_string_ex(task_id, "title")) or "error"

        local news_text = game.translate_string("nta_search_the_stash") .. "\\n "
            .. game.translate_string("st_location") .. " " .. game.translate_string(rolled_map[task_id])
        local news_ico = task_manager.task_ini:r_string_ex(task_id, "icon")

        db.actor:give_talk_message2(news_caption, news_text, news_ico, "iconed_answer_item", task_id)
        return true
    end)
end

xr_effects.spawn_stash_and_quest_item = function(actor, npc, p)
    local task_id = p[1]
    local stash_id = rolled_stash[task_id]
    treasure_manager.set_random_stash(nil, nil, {}, stash_id)
    -- Spawn item directly instead of using `set_random_stash` bonus items. This allows for targeting the item itself.
    state[task_id] = {
        target_id = alife_create_item(p[2], alife_object(stash_id)).id
    }
end

function on_game_start()
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end