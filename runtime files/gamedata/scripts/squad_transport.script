--[[
    squad_transport.script
    ----------------------
    Assigns resource cargo to squad members and handles transfers or
    losses. Each stalker carries one unit of the requested resource.
    Last edit: 2025-08-30
    -- Modified by Codex: Implement Squad Loot Recovery
]]

local transport = {}
local hq_module = require 'hq_coordinator'
transport.hq = hq_module

--- Create a transport descriptor from a HQ task.
function transport.create(task)
    local squad = {from=task.from, to=task.to, faction=task.faction, resource=task.resource, cargo=task.amount, members={}}
    for i=1, task.amount do
        -- each member stores carried resource for loot recovery
        local mem = {carrying=task.resource}
        mem.squad = squad
        table.insert(squad.members, mem)
    end
    return squad
end

--- Drop cargo when squad is defeated.
function transport.drop_cargo(squad)
    local dropped = squad.cargo
    squad.cargo = 0
    squad.members = {}
    return dropped
end

--- Choose an alternate base destination for the squad.
local function pick_fallback_base(faction, exclude)
    local hq = transport.hq or hq_module
    if hq.get_fallback_base then
        return hq.get_fallback_base(faction, exclude)
    end
    local bases = hq.bases_by_faction[faction] or {}
    for _, id in ipairs(bases) do
        if id ~= exclude then
            return id
        end
    end
    return nil
end

--- Reroute a transport squad to a safe base.
function transport.reroute(squad)
    if not squad or not squad.faction then return end
    local new_to = pick_fallback_base(squad.faction, squad.to)
    if new_to then
        squad.to = new_to
        return true
    end
    return false
end

--- Mark squad in danger and trigger reroute.
function transport.mark_danger(squad)
    return transport.reroute(squad)
end

return transport
