skills_ini = ini_file_ex("plugins\\skills\\skills_base.ltx")
skills_levels = {}
skills_stats = {}
skills_increments = {}
options = {}

local death_ini = nil
local math_random = math.random
local always_keep_item = {}
local translate_string = game.translate_string
local string_gsub = string.gsub
local parse_keys = utils_data.parse_string_keys
local str_explode = str_explode
local is_empty = is_empty
local random_key = random_key_table
local inv_active = false

function Set(t)
  local s = {}
  for _,v in pairs(t) do s[v] = true end
  return s
end

local important_npcs = Set {

								--[[ CORDON ]]--
	"esc_m_trader",                                             -- Sidorovich
	"m_trader",                                                 -- Sidorovich
	"esc_2_12_stalker_nimble",									-- Nimble
	"esc_2_12_stalker_wolf",									-- Wolf
	"esc_2_12_stalker_fanat",									-- Fanatic
	"esc_2_12_stalker_trader", 									-- Sidorovich
	"esc_smart_terrain_5_7_loner_mechanic_stalker", 			-- Xenotech
	"devushka", 												-- Hip
	"esc_main_base_trader_mlr",									-- Loris
	"esc_3_16_military_trader",									-- Major Zhurov
	"army_south_mechan_mlr",									-- Seryoga

								--[[ GREAT SWAMPS ]]--

	"mar_smart_terrain_doc_doctor",								-- Doctor
	"mar_smart_terrain_base_stalker_leader_marsh",				-- Cold
	"mar_base_stalker_tech",									-- Novikov
	"mar_base_owl_stalker_trader",								-- Spore
	"mar_smart_terrain_base_doctor",							-- Professor Kalancha
	"guid_marsh_mlr",											-- Ivan Trodnik
	"mar_base_stalker_barmen",									-- Librarian
	
								--[[ DARKSCAPE ]]--
	
	"dasc_tech_mlr",											-- Polymer
	"dasc_trade_mlr",											-- Cutter
	"ds_domik_isg_leader",										-- Major Hernandez
	
								--[[ GARBAGE ]]--
	
	"hunter_gar_trader",										-- Butcher
	
								--[[ AGROPROM ]]--
	
	"agr_smart_terrain_1_6_near_2_military_colonel_kovalski",	-- Major Kuznetsov
	"agr_1_6_medic_army_mlr",									-- Rogovets
	"agr_smart_terrain_1_6_army_trader_stalker",				-- Sergeant Spooner
	"agr_1_6_barman_army_mlr",									-- Commander
	"agr_smart_terrain_1_6_army_mechanic_stalker",				-- Lieutenant Kirilov
	
								--[[ AGROPROM UNDERGROUND ]]--
	
	"agr_u_bandit_boss",										-- Reefer

								--[[ DARK VALLEY ]]--
	
	"zat_b7_bandit_boss_sultan",								-- Sultan
	"val_smart_terrain_7_3_bandit_mechanic_stalker",			-- Limpid
	"guid_dv_mal_mlr",											-- Pug
	"val_smart_terrain_7_4_bandit_trader_stalker",				-- Olivius
	
								--[[ ROSTOK ]]--
	
	"bar_visitors_barman_stalker_trader",						-- Barkeep
	"bar_visitors_zhorik_stalker_guard2",						-- Zhorik
	"bar_visitors_garik_stalker_guard",							-- Garik
	"bar_informator_mlr",										-- Snitch
	"guid_bar_stalker_navigator",								-- Navigator
	"bar_arena_manager",										-- Arnie
	"bar_arena_guard",											-- Liolik
	"bar_dolg_leader",											-- General Voronin
	"bar_dolg_general_petrenko_stalker", 						-- Colonel Petrenko
	"bar_dolg_medic", 											-- Aspirin
	"bar_visitors_stalker_mechanic",							-- Mangun
	"bar_zastava_2_commander",									-- Sergeant Kitsenko
	"bar_duty_security_squad_leader",							-- Captain Gavrilenko
	
								--[[ YANTAR ]]--
	
	"yan_stalker_sakharov", 									-- Professor Sakharov
	"mechanic_army_yan_mlr", 									-- Peregrine
	"yan_povar_army_mlr", 										-- Spirit
	"yan_ecolog_kruglov",										-- Professor Kruglov
	
								--[[ ARMY WAREHOUSES ]]--
	
	"mil_smart_terrain_7_7_freedom_leader_stalker", 			-- Lukash
	"mil_freedom_medic", 										-- Solid
	"mil_smart_terrain_7_10_freedom_trader_stalker", 			-- Skinflint
	"mil_smart_terrain_7_7_freedom_mechanic_stalker", 			-- Screw
	"mil_freedom_guid", 										-- Leshiy
	"stalker_gatekeeper", 										-- Gatekeeper
	
								--[[ DEAD CITY ]]--
	
	"cit_killers_merc_mechanic_stalker", 						-- Hog
	"cit_killers_merc_trader_stalker", 							-- Dushman
	"ds_killer_guide_main_base", 								-- Leopard
	"cit_killers_merc_barman_mlr", 								-- Aslan
	"cit_killers_merc_medic_stalker", 							-- Surgeon
	
								--[[ RED FOREST ]]--
	
	"red_forester_tech", 										-- Forester
	"red_greh_trader",											-- Stribog
	"red_greh_tech",											-- Dazhbog
	
								--[[ DESERTED HOSPITAL ]]--
	
	"kat_greh_sabaoth", 										-- Chernobog and variants
	"gen_greh_sabaoth",
	"sar_greh_sabaoth",
	
								--[[ JUPITER ]]--
	
	"jup_b220_trapper", 										-- Trapper
	"jup_a6_stalker_barmen", 									-- Hawaiian
	"guid_jup_stalker_garik", 									-- Garry
	"jup_a6_stalker_medik", 									-- Bonesetter
	"zat_a2_stalker_mechanic", 									-- Cardan
	"jup_b217_stalker_tech", 									-- Nitro
	"jup_a6_freedom_trader_ashot", 								-- Ashot
	"jup_a6_freedom_leader", 									-- Loki
	"jup_b6_scientist_tech", 									-- Tukarev
	"jup_b6_scientist_nuclear_physicist", 						-- Professor Hermann
	"jup_b6_scientist_biochemist", 								-- Professor Ozersky
	"jup_depo_isg_leader",										-- Major Hernandez
	"jup_cont_mech_bandit",										-- Nile
	"jup_cont_trader_bandit",									-- Klenov
	"jup_depo_isg_tech",										-- Lieutenant Maus
	
								--[[ ZATON ]]--
	
	"zat_stancia_mech_merc", 									-- Kolin
	"zat_stancia_trader_merc", 									-- Vector
	"zat_a2_stalker_nimble", 									-- Nimble
	"zat_b30_owl_stalker_trader", 								-- Owl
	"zat_tech_mlr", 											-- Spleen
	"zat_b22_stalker_medic", 									-- Axel
	"zat_a2_stalker_barmen", 									-- Beard
	"zat_b18_noah", 											-- Noah
	"guid_zan_stalker_locman", 									-- Pilot
	"zat_b106_stalker_gonta",									-- Gonta
	"zat_b106_stalker_garmata", 								-- Garmata
	"zat_b106_stalker_crab", 									-- Crab
	"army_degtyarev_jup",                                      	-- Colonel Degtyarev and variants
	"army_degtyarev",
	"stalker_rogue",											-- Rogue and variants
	"stalker_rogue_ms",
	"stalker_rogue_oa",
	"zat_b7_stalker_victim_1",									-- Spartacus
	
								--[[ OUTSKIRTS ]]--
	
	"pri_monolith_monolith_trader_stalker", 					-- Krolik
	"lider_monolith_haron", 									-- Charon
	"pri_monolith_monolith_mechanic_stalker", 					-- Cleric
	"monolith_eidolon", 										-- Eidolon
	"guid_pri_a15_mlr", 										-- Tourist
	"trader_pri_a15_mlr", 										-- Cashier
	"pri_medic_stalker", 										-- Yar
	"merc_pri_a18_mech_mlr", 									-- Trunk
	"pri_special_trader_mlr", 									-- Meeker
	"merc_pri_grifon_mlr", 										-- Griffin
	"mechanic_monolith_kbo", 									-- Bracer
	"trader_monolith_kbo", 										-- Olivar
	"stalker_stitch", 											-- Stitch and variants
	"stalker_stitch_ms",
	"stalker_stitch_oa",
	"lost_stalker_strelok", 									-- Strelok and variants
	"stalker_strelok_hb",
	"stalker_strelok_oa",
	"lazarus_stalker",

}


rare_armors = {
	["army_nosorog_outfit"] = true,	       
	["freedom_nosorog_outfit"] = true,	       
	["isg_nosorog_outfit"] = true,	  
	["merc_nosorog_outfit"] = true,	     
	["monolith_nosorog_outfit"] = true,	 
	["dolg_nosorog_outfit"] = true,		
}

local function print_dbg(msg, ...)
    if options["debug"] then
        printf("<HARU> | %s | " .. msg, time_global(), ...)
    end
end

function get_max_weight_coef()
    local actor = db.actor
    local tot_weight = actor:get_total_weight()
    local max_weight = actor:get_actor_max_weight()
    local outfit = actor:item_in_slot(7)
    local backpack = actor:item_in_slot(13)
    max_weight = max_weight + (outfit and outfit:get_additional_max_weight() or 0)
    max_weight = max_weight + (backpack and backpack:get_additional_max_weight() or 0)

    actor:iterate_belt(function(owner, obj)
        local c_arty = obj:cast_Artefact()
        max_weight = max_weight + (c_arty and c_arty:AdditionalInventoryWeight() or 0)
    end)

    actor:cast_Actor():conditions():BoosterForEach(function(booster_type, booster_time, booster_value)
        --eBoostMaxWeight
        if (booster_type == 4) then
            max_weight = max_weight + booster_value
        end
    end)
    return tot_weight / max_weight
end

function actor_on_jump()
    local coef = get_max_weight_coef()
    increase_skill("endurance",  (1 - coef) * 10)
    increase_skill("strength", coef * 10)
end

function actor_on_footstep()
    local coef = get_max_weight_coef()
    increase_skill("endurance",  1 - coef)
    increase_skill("strength", 0.5 * coef)
end

function creature_on_before_hit(npc, shit, bone_id, flags)
    if not (shit.draftsman and shit.draftsman:id() == AC_ID) then
		return 
	end
    local wpn = db.actor:active_item()
    if not wpn then return end
	if important_npcs[npc:section()] then return end
    if npc:alive() and IsWeapon(wpn) and (IsItem("fake_ammo_wpn",wpn:section())) then
        print_dbg("Hit NPC with melee [%s]", npc:section())
        increase_skill("strength", shit.power * (npc:alive() and 30 or 5))
        shit.power = shit.power * skills_stats["strength"].melee_damage
    end
end

local allowed_hit_types = {
    [5] = true,
    [6] = true,
    [7] = true,
    [8] = true
}

function actor_on_before_hit(shit)
    if shit.power < 0 or not (allowed_hit_types[shit.type]) then return end
    print_dbg("Actor got hit | power = [%s] | type = [%s]", shit.power, shit.type)
    increase_skill("survival", shit.power * 200)
    local survival_resistance = skills_stats["survival"].resistance
	shit.power = shit.power * survival_resistance
end


function update_endurance()
    local pwb = skills_stats["endurance"].power_loss
    exec_console_cmd("power_loss_bias " .. tostring(pwb)) 
    local speed_modifier = skills_stats["endurance"].speed_modifier
    speed.add_speed("haruka_endurance_modifier_walk", speed_modifier, false, true)
end

function update_strength()
    local skill_weight = skills_stats["strength"].weight_modifier
	local skill_weight_base = skills_stats["strength"].base_weight
    weight.add_weight("haruka_strength_modifier_base", skill_weight_base, true)
    weight.multiply_weight("haruka_strength_modifier_mul", skill_weight, true)
end

function update_survival()
    db.actor.bleeding = skills_stats["survival"].bleed_restore
end

function monster_on_loot_init(victim, loot_table)
    if victim then
        print_dbg("Actor is looting [%s]", victim:section())
        local health = ini_sys:r_float_ex(victim:section(), "Health") or 100
        increase_skill("survival", health * 0.1)
    end
    if is_empty(loot_table) then 
        return 
    end
    local hunting_skill = skills_stats["survival"].hunting_skill
    local part = random_key(loot_table)
    if hunting_skill > 0 then
        if hunting_skill > math_random(100) then
            print_dbg("Spawning extra [%s]", part)
            loot_table[part].count = loot_table[part].count + 1
        end
    else
        if -hunting_skill > math_random(100) then
            print_dbg("Removing [%s]", part)
            loot_table[part].count = loot_table[part].count - 1
        end
    end
end

local rank_table = {
	["novice"]       = 25,
    ["trainee"]      = 30,
    ["experienced"]  = 34,
    ["professional"] = 40,
    ["veteran"]      = 45,
    ["expert"]       = 50,
    ["master"]       = 65,
    ["legend"]       = 100
}

CreateReleaseItem = death_manager.create_release_item
function death_manager.create_release_item(npc)
    CreateReleaseItem(npc)
    CreateTimeEvent("haruka_scavenger", "haruka_scavanger", 0.1, function()
        scavanger_effect(npc)
        return true
    end)
end

function scavanger_effect(npc)
    local rank = ranks.get_obj_rank_name(npc)
    local inventory = ui_inventory.GUI
    if inventory and inventory.mode == "loot" and inventory.npc_id == npc:id() then
        print_dbg("Actor is looting [%s]", npc:section())
        increase_skill("scavenging", rank_table[rank] or 25)
    end
    local scavenging_skill = skills_stats["scavenging"].scavenging_skill
    local itr = scavenging_skill > 0 and function(npc, item)
        local sec = item and item:section() or false
        if not sec then return end
        if scavenging_skill > math_random(100) and not always_keep_item[sec] then
            if not (IsWeapon(item) or IsOutfit(item) or IsHeadgear(item)) then
                print_dbg("Spawning extra [%s]", item:section())
                alife_create_item(sec, npc, {["uses"] = 1, ["cond_r"] = {0.05, 0.2}})
            end
        end
    end 
    or function(npc, item)
        local sec = item and item:section() or false
        if not sec then return end
			if -scavenging_skill > math_random(100) and not always_keep_item[sec] then
				print_dbg("Releasing [%s]", item:section())
				--alife_release(item)
			end

		if item:section() == "detector_elite" or item:section() == "detector_scientific" then
			alife_release(item)
		end
		
		if rare_armors[item:section()] then
			armor_spawn_chance = math.random(1,100)
			if armor_spawn_chance > 15 then
				alife_release(item)
			end
		end
		
		if item:section() == "helm_spartan" then
			helm_spawn_chance = math.random(1,100)
			if helm_spawn_chance > 50 then
				alife_release(item)
			end
		end
    end
    npc:iterate_inventory(itr, npc)
end

function increase_skill(skill, amount)
    if amount < 0 then return end
	local key = "exp_multiplier_" .. skill
    print_dbg("[%s] increased: [%s]", skill, amount)
    skills_levels[skill].experience = skills_levels[skill].experience + (amount  * options[key])
end

local colors = {
    ["clr_green"] = "%" .. "%c[255,178,236,93]",
    ["clr_cyan"] = "%" .. "%c[255,119,181,254]",
    ["clr_red"] = "%" .. "%c[255,175,43,30]",
    ["clr_yellow"] = "%" .. "%c[255,250,218,94]",
    ["clr_white"] = "%" .. "%c[255,220,220,220]",
    ["clr_purple"] = "%" .. "%c[255,138,43,226]"
}

function level_up_skill(name)
    print_dbg("Leveled up [%s]", name)
    skills_levels[name].current_level = skills_levels[name].current_level + 1 
    local skill = skills_levels[name]
    local req = skill.requirement
    skills_levels[name].prev_requirement = req
    local base = skill.base_requirement
    local level = skill.current_level
    skills_levels[name].requirement = req + (base + (base * (level * 0.25)))
    for stat, v in pairs(skills_stats[name]) do
        if stat ~= "functor" then
            skills_stats[name][stat] = skills_stats[name][stat] + skills_increments[name][stat]
        end
    end
    local msg = parse_keys(translate_string("st_new_level_" .. name) , colors)
    local header = parse_keys(translate_string("st_new_level_header"), {
        ["name"] = translate_string("st_player_skills_" .. name),
        ["level"] = level
    })
    db.actor:give_game_news(header, msg, "ui_skills_icon_" .. name, 0, 10000)
    xr_sound.set_sound_play(AC_ID, "pda_tips")
end

local updated = 0
local interval = 1182

function update_stats()
    if time_global() < updated then return end
    updated = time_global() + interval
    for skill, stats in pairs(skills_stats) do
        if stats.functor then
            exec(stats.functor)
        end
    end
    for skill, stats in pairs(skills_levels) do
        if (stats.experience > stats.requirement) and (stats.current_level ~= stats.max_level) then
            level_up_skill(skill)
        end
    end
end

function exec(str)
    if str then
		str = str_explode(str,"%.")
		if str[1] and str[2] and _G[ str[1] ] and _G[ str[1] ][ str[2] ] then
			_G[ str[1] ][ str[2] ]()
		else
			printf("Could not exec function %s", str)
		end
	end
end

function save_state(m_data)
    m_data.skills_levels = skills_levels
end

function load_state(m_data)
    skills_levels = m_data.skills_levels or {}
end

local get_config = haru_skills_mcm.get_config

function on_option_change()
    options["exp_multiplier_strength"] = get_config("exp_multiplier_strength")
    options["exp_multiplier_endurance"] = get_config("exp_multiplier_endurance")
    options["exp_multiplier_scavenging"] = get_config("exp_multiplier_scavenging")
    options["exp_multiplier_survival"] = get_config("exp_multiplier_survival")
    options["debug"] = get_config("debug")
end

function on_game_load()
    death_ini = itms_manager.ini_death
    local n = death_ini:line_count("keep_items")
    for i=0,n-1 do
        local result, id, value	= death_ini:r_line_ex("keep_items",i,"","")
        if value == "true" then
            always_keep_item[id] = true
        end
    end

    local skills_sections = skills_ini:get_sections(true)
    for skill, _ in pairs(skills_sections) do
        local str = str_explode(skill, "_")
        if str[#str] == "stats" then
            skills_sections[skill] = nil
        end
    end
    for skill, _ in pairs(skills_sections) do
        local skills_info = skills_ini:collect_section(skill)
        for k, v in pairs(skills_info) do
            skills_info[k] = tonumber(skills_info[k])
        end
        if skills_levels[skill] then
            skills_levels[skill].max_level = skills_info.max_level
            skills_levels[skill].base_requirement = skills_info.base_requirement
        else
            skills_levels[skill] = skills_info
            skills_levels[skill].current_level = 0
            skills_levels[skill].prev_requirement = 0
            skills_levels[skill].experience = 0
            skills_levels[skill].requirement = skills_levels[skill].base_requirement
        end
    end

    for skill, _ in pairs(skills_sections) do
        local skills_info = skills_ini:collect_section(skill .. "_stats")
        for k, v in pairs(skills_info) do
            if k ~= "functor" then
                skills_info[k] = tonumber(skills_info[k])
            end
        end
        skills_increments[skill] = {}
        for k, v in pairs(skills_info) do
            local str = str_explode(k, "_")
            if str[#str] == "increment" then
                skills_info[k] = nil
                skills_increments[skill][string_gsub(k, "_increment", "")] = v
            end
        end
        
        skills_stats[skill] = {}
        for stat, val in pairs(skills_info) do
            if stat ~= "functor" then
                skills_stats[skill][stat] = val + (skills_increments[skill][stat] * skills_levels[skill].current_level) 
            else
                skills_stats[skill][stat] = val
            end
        end
    end
end

function on_game_start()
    RegisterScriptCallback("actor_on_footstep", actor_on_footstep)
    RegisterScriptCallback("actor_on_before_hit", actor_on_before_hit)
    RegisterScriptCallback("npc_on_before_hit", creature_on_before_hit)
    RegisterScriptCallback("monster_on_before_hit", creature_on_before_hit)
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("actor_on_update", update_stats)
    RegisterScriptCallback("monster_on_loot_init", monster_on_loot_init)
    RegisterScriptCallback("on_game_load", on_game_load)
    RegisterScriptCallback("on_option_change", on_option_change)
	on_option_change()
end