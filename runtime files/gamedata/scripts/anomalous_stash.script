hidden_stash = nil
anom_stashes = {}
stash_particles = {}

is_teleporting = false
last_interacted_anom_stash_id = nil

local gc = game.translate_string

function save_state(m_data)
	m_data.anomalous_hidden_stash = hidden_stash
	m_data.anomalous_stashes = anom_stashes
end

function load_state(m_data)
	hidden_stash = m_data.anomalous_hidden_stash or nil
	anom_stashes = m_data.anomalous_stashes or {}
end

local debug_prints = false
function pr(...)
	if debug_prints then
		printf("AnomStash - " .. ...)
	end
end

function on_game_start()
	RegisterScriptCallback("game_object_on_net_spawn", game_object_on_net_spawn)
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("ActorMenu_on_item_before_move", ActorMenu_on_item_before_move)
	RegisterScriptCallback("actor_on_stash_remove", actor_on_stash_remove)
	RegisterScriptCallback("on_before_key_press", on_before_key_press)

	local base_ui_start = ui_inventory.start
	function ui_inventory.start(mode, obj)
		if not obj then
			base_ui_start(mode, obj)
			return
		end

		if obj:section() ~= "anom_inv_stash" then
			pr(obj:section() .. " - not anom stash inventory")
			base_ui_start(mode, obj)
			return
		end

		if is_teleporting then
			pr("can't open, is teleporting")
			return
		end
		last_interacted_anom_stash_id = obj:id()

		-- swap into hidden stash
		local hidden_stash_obj = level.object_by_id(hidden_stash)
		if hidden_stash_obj then
			pr("swapping to hidden stash")
			base_ui_start(mode, hidden_stash_obj)
			return
		end

		local pos = vec_set(obj:position())
		pos.x = pos.x + 25
		pos.z = pos.z + 25
		pos.y = -25
		TeleportObject(hidden_stash, pos, obj:level_vertex_id(), obj:game_vertex_id())
		is_teleporting = true
		CreateTimeEvent("anom_stash", "tele_stash", 0, function()
			hidden_stash_obj = level.object_by_id(hidden_stash)
			if hidden_stash_obj then
				is_teleporting = false
				pr("Teleport success: swapping to hidden stash")
				base_ui_start(mode, hidden_stash_obj)
				return true
			end
		end)
	end
end

function game_object_on_net_spawn(obj)
	if obj:section() ~= "anom_inv_stash" then return end

	local id = obj:id()
	if not stash_particles[id] then
		stash_particles[id] = particles_object("anomaly2\\gravity_damage_01_smoke")
		local pos = vec_set(obj:position())
		pos.y = pos.y + 0.15
		stash_particles[id]:play_at_pos(pos)
	end
end

function on_before_key_press(key, bind, dis, flags)
    if bind == 7 and db.actor:object("pistole") then
        flags.ret_value = false
		actor_menu.set_msg(1, gc("st_anombp_cantsprint"), 2, GetARGB(255, 255, 255, 255))
    end
end

function try_remove_anom_stash(obj)
	if not obj then
		pr("try_remove_anom_stash: no obj")
		return 
	end
	local box_id = obj:id()

	-- prevents crash, cause start runs twice for some reason
	if not anom_stashes[box_id] then
		pr("anom stashes id not found " .. box_id)
		return
	end

	pr("Try remove anom_stash " .. box_id .. " - hidden_stash " .. hidden_stash)

	-- if multiple anom stashes exist, only the backpack is removed
	if size_table(anom_stashes) >= 2 then
		alife_release_id(box_id)
		if stash_particles[box_id] then
			stash_particles[box_id]:stop()
			stash_particles[box_id] = nil
		end
		anom_stashes[box_id] = nil
		alife_create_item("anomalous_backpack", db.actor)
		level.map_remove_object_spot(box_id, "anombp")
		pr("Removed Anomalous Stash")
		return
	end

	hidden_stash_obj = level.object_by_id(hidden_stash)
	if hidden_stash_obj then
		local has_content = false
		hidden_stash_obj:iterate_inventory_box(function(temp, obj)
			has_content = true
			return true
		end, hidden_stash_obj)
		if has_content then
			news_manager.send_tip(db.actor, gc("ui_st_anom_pickup_warning"))
			return
		end

		level.map_remove_object_spot(box_id, "anombp")
		if stash_particles[box_id] then
			stash_particles[box_id]:stop()
			stash_particles[box_id] = nil
		end
		alife_release_id(box_id)
		pr("Removed Anomalous Stash")

		alife_release_id(hidden_stash)
		anom_stashes[box_id] = nil
		hidden_stash = nil
		alife_create_item("anomalous_backpack", db.actor)
		pr("Removed HIDDEN Stash")
	else
		pr("try_remove: hidden stash not found")
	end
end

function actor_on_stash_remove(data)
	obj = level.object_by_id(data.stash_id)
	if not obj then return end
	local sec = obj:section()
	if sec == "anom_inv_stash" or sec == "hidden_anom_stash" then
		data.cancel = true
	end
end

actor_invs = {
	[EDDListType.iActorSlot] = true,
	[EDDListType.iActorBag]  = true,
	[EDDListType.iActorBelt] = true
}

function ActorMenu_on_item_before_move(flags, stash_id, item, mode, bag_from) 
	local stash_obj = level.object_by_id(stash_id)

	if not actor_invs[bag_from] then return end

	-- prevent items being put into the dummy stash, that is not the hidden shared stash
	if stash_obj and stash_obj:section() == "anom_inv_stash" then
		flags.ret_value = false
		return
	end
--[[
	--Prevent having companions carry backpacks
	local companions = axr_companions.list_actor_squad_by_id()
	local inv_is_companion = false
	for k, id in pairs(companions)do
		if stash_id == id then
			inv_is_companion = true
			break
		end
	end
	if inv_is_companion and item and item:section() == "anomalous_backpack" then
		flags.ret_value = false
		return
	end
]]
	-- prevent anom backpack from being put into a shared stash
	if stash_obj and stash_obj:section() == "hidden_anom_stash" and item and item:section() == "anomalous_backpack" then
		flags.ret_value = false
		return
	end
end

base_reset = ui_inventory.UIInventory.Reset
function ui_inventory.UIInventory:Reset(obj)
	base_reset(self, obj)

	if self.anom_pickup then
		self.anom_pickup:Show(false)
	end
	if self.take_all_anom then
		self.take_all_anom:Show(false)
	end

	if not (hidden_stash and self.npc_id == hidden_stash) then
		return
	end

	self.anom_pickup = self.anom_pickup or self.xml:Init3tButton("npc:pickup_anom", self.npc_dialog)
	self:Register(self.anom_pickup, "anom_pickup")
	self:AddCallback("anom_pickup"  , ui_events.BUTTON_CLICKED, self.Anom_Pickup, self)
	self.anom_pickup:Show(true)

	self.take_all_anom = self.take_all_anom or self.xml:Init3tButton("npc:take_all_anom", self.npc_dialog)
	self:Register(self.take_all_anom, "take_all")
	self.take_all_anom:Show(true)

	self.npc_takeall:Show(false)
end

function ui_inventory.UIInventory:Anom_Pickup()
	hide_hud_inventory()
	try_remove_anom_stash(level.object_by_id(last_interacted_anom_stash_id))
end

----------------------------------------------------------------------
-- UI Item Property
----------------------------------------------------------------------
function menu_stash(obj) -- return "use" name
	local p = obj:parent()
	if not (p and p:id() == AC_ID) then return end

	if (obj:clsid() == clsid.equ_backpack) then
		return game.translate_string("ui_st_create_stash")
	end
end

function func_stash(obj)
	start(obj)
end

-------------------------------------------------------------------
GUI = nil -- instance, don't touch
function start(obj)
	if (not obj) then
		return
	end

	hide_hud_inventory()

	if (not GUI) then
		GUI = UICreateStash()
	end

	if (GUI) and (not GUI:IsShown()) then
		GUI:ShowDialog(true)
		GUI:Reset(obj)

		Register_UI("UICreateStash", "anomalous_stash")
	end
end

-------------------------------------------------------------------
-- UI
-------------------------------------------------------------------
class "UICreateStash" (CUIScriptWnd)

function UICreateStash:__init() super()
	self:InitControls()
	self:InitCallBacks()
end

function UICreateStash:__finalize()
end

function UICreateStash:InitControls()
	self:SetWndRect(Frect():set(0, 0, 1024, 768))
	self:SetAutoDelete(true)
	--self:Enable(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_items_backpack.xml")

	self.dialog = xml:InitStatic("backpack", self)
	xml:InitStatic("backpack:background", self.dialog)

	self.input = xml:InitEditBox("backpack:input", self.dialog)
	self:Register(self.input, "fld_input")

	local btn = xml:Init3tButton("backpack:btn_cancel", self.dialog)
	self:Register(btn, "btn_cancel")

	btn = xml:Init3tButton("backpack:btn_ok", self.dialog)
	self:Register(btn, "btn_ok")
end

function UICreateStash:InitCallBacks()
	self:AddCallback("btn_ok", ui_events.BUTTON_CLICKED, self.OnAccept, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.Close, self)
end

function UICreateStash:Reset(obj)
	self.id = obj:id()
	self.section = obj:section()

	self.input:SetText("Anomalous Stash")
end

function UICreateStash:Update()
	CUIScriptWnd.Update(self)
end

function UICreateStash:OnAccept()
	local se_obj = alife_create("anom_inv_stash", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	if (se_obj) then
		local txt = self.input:GetText()
		txt = txt ~= "" and txt or strformat(game.translate_string("st_itm_stash_of_character"), db.actor:character_name())
		level.map_add_object_spot_ser(se_obj.id, "anombp", txt)
		actor_menu.set_msg(1, game.translate_string("st_stash_created"), 4)

		alife_release_id(self.id)

		anom_stashes[se_obj.id] = true
		if not hidden_stash then
			local pos = vec_set(db.actor:position())
			pos.x = pos.x + 25
			pos.z = pos.z + 25
			pos.y = -25
			se_hidden_stash = alife_create("hidden_anom_stash", pos, db.actor:level_vertex_id(), db.actor:game_vertex_id())
			hidden_stash = se_hidden_stash.id
		end
	end
	self:Close()
end

function UICreateStash:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
	if (res == false) then
		local bind = dik_to_bind(dik)
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				self:Close()
			end
		end
	end
	return res
end

function UICreateStash:Close()
	self:HideDialog()

	Unregister_UI("UICreateStash")
end
