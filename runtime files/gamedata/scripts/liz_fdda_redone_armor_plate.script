local mcm_enable_animatoin = true
local item_to_ruck = nil
local item_to_belt = nil
local equipped_plates = {}
local anim_list = {
    ["af_kevlar"] = "ballistic_plate_anm_kevlar_hud",
    ["af_kevlar_up"] = "ballistic_plate_anm_kevlar_hud",
    ["af_plates"] = "ballistic_plate_anm_plate_hud",
    ["af_plates_up"] = "ballistic_plate_anm_plate_hud",
    ["af_ceramic"] = "ballistic_plate_anm_ceramic_hud",
    ["af_ceramic_up"] = "ballistic_plate_anm_ceramic_hud",
    ["af_polymer"] = "ballistic_plate_anm_polymer_hud",
    ["af_polymer_up"] = "ballistic_plate_anm_polymer_hud",
}

function on_game_start()
    RegisterScriptCallback("on_game_load", initialize)
    RegisterScriptCallback("on_option_change", initialize)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

function initialize()
    mcm_enable_animatoin = liz_fdda_redone_mcm.get_config("outfit_anm/enable_plate_equip")
end

function actor_on_first_update()
    RegisterScriptCallback("actor_item_to_ruck", actor_item_to_ruck)
    RegisterScriptCallback("actor_item_to_belt", actor_item_to_belt)
    --iterate belt and get all plates
    db.actor:iterate_belt( function (owner, obj)
        local section = obj and obj:section() or nil
        if section and anim_list[section] then
            equipped_plates[section] = true
        end
    end)
end

function actor_item_to_ruck(obj)
    local section = obj and obj:section() or nil
    if not section then return end
    if not anim_list[section] then return end
    if not equipped_plates[section] then return end
    equipped_plates[section] = nil
    item_to_ruck = section
    play_animation()
end

function actor_item_to_belt(obj)
    local section = obj and obj:section() or nil
    if not section then return end
    if not anim_list[section] then return end
    if equipped_plates[section] then return end
    equipped_plates[section] = true
    item_to_belt = section
    play_animation()
end

function play_animation()
    if
        not mcm_enable_animatoin
        or lam2.get_action_with_tag("outfit_animation")
        or lam2.get_action_with_tag("item_plate_anim")
    then
        item_to_belt = nil
        item_to_ruck = nil
        return
    end

    local a = {
        tag = "item_plate_anim",
        can_skip = false,
        plate_to_remove = item_to_ruck,
        plate_to_equip = item_to_belt,
        enter = function(self)
            if self.plate_to_remove then
                local unequip = lam2.get_template_action_play_animation()
                unequip.sec = anim_list[self.plate_to_remove]
                unequip.anm = self.plate_to_equip and "anm_replace_old" or "anm_plate_remove"
                unequip.cam = self.plate_to_equip and "cam_replace_old" or "cam_plate_remove"
                unequip.snd = self.plate_to_equip and "snd_replace_old" or "snd_plate_remove"
                lam2.add_action(unequip)
            end
            if self.plate_to_equip then
                local equip = lam2.get_template_action_play_animation()
                equip.sec = anim_list[self.plate_to_equip]
                equip.anm = self.plate_to_remove and "anm_replace_new" or "anm_plate_add"
                equip.cam = self.plate_to_remove and "cam_replace_new" or "cam_plate_add"
                equip.snd = self.plate_to_remove and "snd_replace_new" or "snd_plate_add"
                lam2.add_action(equip)
            end
        end,
    }
    item_to_ruck = nil
    item_to_belt = nil
    lam2.add_action(a)
end
