local iron_forest_smart = "zat_b100"
local configs = mirage_configs
-- Keep it as local var instead of state var so it can restart after the save reload
local explosion_loop_started = false

local state = {
    sidor_id = nil,
    table_id = nil,
    enemy_ids = {}
}

function save_state(mdata)
	mdata.mirage_task_data = state
end

function load_state(mdata)
	if mdata.mirage_task_data then
		state = mdata.mirage_task_data
	end
end

task_status_functor.mirage_task_status_functor = function(tsk,task_id)
	if not (db.actor and tsk) then return end
	local stage = tsk.stage

	if stage == 0 then
        if
            nta_utils.actor_on_level(nta_utils.levels.zaton)
            and db.actor:position():distance_to(configs.first_spawn_activator) < configs.first_spawn_activation_distance
        then
            spawn_mirages(configs.first_spawn_spots)
            tsk.stage = 1
        end

        if nta_utils.actor_on_level(nta_utils.levels.zaton) and db.actor:position():distance_to(configs.second_spawn_activator) < configs.second_spawn_activation_distance then
            teleport()
        end
    end

    if stage == 1 then
        if db.actor:position():distance_to(configs.second_spawn_activator) < configs.second_spawn_activation_distance then
            spawn_mirages(configs.second_spawn_spots)
            tsk.stage = 2
        end
    end

    if stage == 2 then
        if db.actor:position():distance_to(configs.third_spawn_activator) < configs.third_spawn_activation_distance then
            spawn_mirages(configs.third_spawn_spots)
            tsk.stage = 3
        end
    end

    if stage == 3 then
        if db.actor:position():distance_to(configs.sidor_spawn_activator) < configs.sidor_spawn_activation_distance then
            spawn_sidor(tsk)
            tsk.stage = 4
        end
    end

    if stage == 5 then
        if #state.enemy_ids == 0 then
            spawn_burer()
            tsk.stage = 6
        end
    end

    if stage == 6 then
        if not explosion_loop_started then
            explosion_loop_started = true
            start_explosions_loop()
        end

        if #state.enemy_ids == 0 then
            tsk.stage = 7
        end
    end

    if stage > 0 and stage < 4 then
        update_mirages_visual()
        give_mirages_weapon()
    end

    if stage > 0 and stage < 7 then
        if db.actor:position():distance_to(configs.teleport_activator_center_point) > configs.teleport_activation_distance then
            teleport()
        end
    end
end

function spawn_mirages(spots)
    for _, spot in ipairs(spots) do
        local se_id = nta_utils.spawn_helper(spot)
        logic_enforcer.assign(se_id,'scripts\\mirage_beh.ltx','logic', 'beh@mirage')

        local mirage_se = alife_object(se_id)
        local actor_se = alife():actor()
        mirage_se:set_rank(actor_se:rank())
        mirage_se:set_character_name(actor_se:character_name())

        table.insert(state.enemy_ids, se_id)
    end
end

function spawn_sidor(tsk)
    state.sidor_id = nta_utils.spawn_helper(configs.sidor_spawn_config)
    state.table_id = nta_utils.spawn_helper(configs.med_table_spawn_config)

    local pos = alife_object(state.sidor_id).position
    nta_utils.spawn_particles_at_position("anomaly2\\teleport_out_00", pos, true)
    nta_utils.spawn_sound_at_position("new_tasks_addon\\teleport_work_old", pos)
    local speech_snd = nta_utils.spawn_sound_at_position("characters_voice\\scenario\\trader\\trader_bye_6", pos)

    -- Despawn sidor and spawn controllers
    nta_utils.set_timeout(function ()
        nta_utils.spawn_particles_at_position("anomaly2\\teleport_tear", pos)
        nta_utils.spawn_sound_at_position("new_tasks_addon\\teleport_work_old", pos)
        safe_release_manager.release({ id = state.sidor_id })
        safe_release_manager.release({ id = state.table_id })

        nta_utils.mass_spawn_helper(configs.sidor_controllers_configs, state.enemy_ids)
        tsk.stage = 5
    end, (speech_snd:length() / 1000) + 1.2)
end

function spawn_burer()
    table.insert(state.enemy_ids, nta_utils.spawn_helper(configs.burer_spawn_config))

    nta_utils.spawn_attached_sound("new_tasks_addon\\earthquake_old")
    nta_utils.spawn_attached_sound("new_tasks_addon\\x16_brain_death_old")
    nta_utils.earthquake_screen_effect_strong(8)
end

task_functor.mirage_task_target_functor = function(task_id,field,p,tsk)
	if not (db.actor and tsk) then return nil end
	local stage = tsk.stage

    if stage == 7 then
        return tsk.task_giver_id
    end
    return SIMBOARD:get_smart_by_name(iron_forest_smart).id
end

xr_effects.mirage_cleanup = function()
    state = {
        sidor_id = nil,
        table_id = nil,
        enemy_ids = {}
    }
end

function teleport ()
    nta_utils.teleport_visual()
    db.actor:set_actor_position(SIMBOARD:get_smart_by_name(iron_forest_smart).position)
end

function give_mirages_weapon()
    local active_item = db.actor:active_item()
    local sec
    if not actor_holds_valid_item() then
        sec = "wpn_pkp" -- Give mirage a Pecheneg if player has no active weapons or a melee weapon :)
    else
        sec = active_item:section()
    end

    for _, id in ipairs(state.enemy_ids) do
        local npc = level.object_by_id(id)
        if is_mirage(npc) then
            local has_weapon = false
            local function iterate(_, item)
                if item:section() == sec then
                    has_weapon = true
                end
            end
            npc:iterate_inventory(iterate)

            -- Don't give copies of the weapon to avoid rotating between copies on selection
            if not has_weapon then
                alife_create_item(sec, npc)
            end
        end
    end
end

function update_mirages_visual()
    for _, id in ipairs(state.enemy_ids) do
        local npc = level.object_by_id(id)
        if is_mirage(npc) then
            npc:set_visual_name(get_actor_visual())
        end
    end
end

function actor_holds_valid_item()
    local item = db.actor:active_item()
    return item and IsWeapon(item) and not nta_utils.is_melee(item)
end

function get_actor_visual()
    return str_explode(db.actor:get_visual_name(), "%.")[1] -- Remove the '.ogf' for visuals armor stat mapping to work properly
end

function is_mirage(npc)
    return npc and npc:section() == 'mirage_stalker'
end

local loop_i = 1
local explosion_position = nil
local explosion_lvid = nil
local explosion_gvid = nil
local anomaly_particles = particles_object("anomaly2\\bold_idle")
local anomaly_sound = xr_sound.get_safe_sound_object("anomaly\\gravi_rumble1")
local explosion_planned = false
function start_explosions_loop()
    explosion_position = db.actor:position()
    explosion_lvid = db.actor:level_vertex_id()
    explosion_gvid = db.actor:game_vertex_id()
    explosion_planned = true
    CreateTimeEvent(0,"mirage_explosion_loop_" .. loop_i,6, function ()
        loop_i = loop_i + 1
        anomaly_particles:stop()
        anomaly_sound:stop()
        nta_utils.spawn_at_position(
            "immediate_anomaly_explosion",
            explosion_position,
            explosion_lvid,
            explosion_gvid,
            false
        )
        explosion_planned = false
        if #state.enemy_ids ~= 0 then
            start_explosions_loop()
        end
        return true
    end)
end

function on_death_callback(npc)
    if not npc then return end
    local id = npc:id()
    state.enemy_ids = a_tab_utils.filter(state.enemy_ids, function (el) return el ~= id end)
end

function npc_on_choose_weapon(npc, curr_wpn, flags)
    if a_tab_utils.has_value(state.enemy_ids, npc:id()) then
        local function iterate(_, item)
            if not actor_holds_valid_item() then
                if item:section() == "wpn_pkp" then
                    flags.gun_id = item:id()
                    return
                end
            end

            if (actor_holds_valid_item() and item:section() == db.actor:active_item():section()) then
                flags.gun_id = item:id()
                return
            end
        end

        if is_mirage(npc) then
            npc:iterate_inventory(iterate)
        end
    end
end

function actor_on_update()
    if explosion_planned then
        if not anomaly_particles:playing() then
            anomaly_particles:play_at_pos(explosion_position)
        end

        if not anomaly_sound:playing() then
            anomaly_sound:play_at_pos(db.actor, explosion_position)
        end
    end
end

function on_game_start()
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
    RegisterScriptCallback("npc_on_death_callback", on_death_callback)
    RegisterScriptCallback("monster_on_death_callback", on_death_callback)
    RegisterScriptCallback("npc_on_choose_weapon", npc_on_choose_weapon)
    RegisterScriptCallback("actor_on_update", actor_on_update)
end