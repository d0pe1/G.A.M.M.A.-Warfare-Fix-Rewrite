local CustomPDAX = pda_inter_gui.CustomPDAX
local pr = pda_inter_gui.pr

function CustomPDAX:RogueGenerateWorld()
	local lvl = self.cur_level
	if lvl >= 1 and lvl <= 10 then
		self:RogueGenerateWildWorld(20)
		self:RogueSetDarkscapeCellTextures()
	elseif lvl >= 11 and lvl <= 20 then
		self:RogueGenerateWildWorld(30)
		self:RogueSetSwampCellTextures()
	elseif lvl >= 21 and lvl <= 30 then
		self:RogueGenerateWildWorld(40)
		self:RogueSetRedForestCellTextures()
	elseif lvl >= 31 then
		self:RogueGenerateLabWorld()
		self:RogueSetLabCellTextures()
	end
end

function CustomPDAX:RogueGenerateWildWorld(wall_percents)
	local walls_map = {}

	-- repeat wilderness world and flood fill check until cell ratio is more than 70%
	repeat
		empty_table(walls_map)
		walls_map, start_cells = self:LevelWildGenerate(self.grid_w, self.grid_h, wall_percents)
		local flood_fill = self:LevelFloodFill(walls_map, start_cells)
	until flood_fill > 0.7

	-- set main grid, flag < 2 are walls
	for row = 1, #walls_map do
		for col = 1, #walls_map[row] do
			local val = walls_map[row][col]
			if val < 2 then
				self.rogue_grid[row][col].terrain = 1
			end
		end
	end
end

function CustomPDAX:RogueGenerateLabWorld()
	for row = 1, #self.rogue_grid do
		for col = 1, #self.rogue_grid[row] do
			self.rogue_grid[row][col].terrain = 1
		end
	end

	self:LevelLabGenerate(self.grid_w, self.grid_h, 1)

	-- edges just in case
	for row = 1, #self.rogue_grid do
		for col = 1, #self.rogue_grid[row] do
			if row == 1 or col == 1 or row == #self.rogue_grid or col == #self.rogue_grid[row] then
				self.rogue_grid[row][col].terrain = 1
			end
		end
	end
end



------------------------------------------------------------------------------------------------------------------------
----------------------------------------------- Level Textures and misc -----------------------------------------------
------------------------------------------------------------------------------------------------------------------------
function CustomPDAX:RogueSetDarkscapeCellTextures()
	local txtr = "rogue_cell_"
	for row = 1, #self.rogue_grid do
		for col = 1, #self.rogue_grid[row] do
			local terrain = self.rogue_grid[row][col].terrain
			-- ground
			if terrain == 0 or terrain == 1 then
				self.rogue_grid[row][col].texture = txtr .. "grass_1"
			end

			-- grass
			if terrain == 0 and math.random() > 0.75 then
				self.rogue_grid[row][col].texture2 = txtr .. "grass_overlay_" .. math.random(4)
			end

			-- obstacles
			if terrain == 1 then
				local pick = math.random() > 0.3 and ("tree_" .. math.random(3)) or ("rock_" .. math.random(6))
				self.rogue_grid[row][col].texture2 = txtr .. pick
			end
		end
	end
end

function CustomPDAX:RogueSetSwampCellTextures()
	local txtr = "rogue_cell_"
	for row = 1, #self.rogue_grid do
		for col = 1, #self.rogue_grid[row] do
			local terrain = self.rogue_grid[row][col].terrain
			-- ground
			if terrain == 0 or terrain == 1 then
				self.rogue_grid[row][col].texture = txtr .. "dirt_" .. math.random(1, 2)
			end

			-- water / obstacles
			if terrain == 1 then
				if math.random() > 0.2 then
					self.rogue_grid[row][col].terrain = 2
					self.rogue_grid[row][col].texture = txtr .. "water_6"
				else
					local pick = math.random() > 0.3 and ("rock_" .. math.random(6)) or ("swamp_tree_" .. math.random(4))
					self.rogue_grid[row][col].texture2 = txtr .. pick
				end
			end
		end
	end

	local function try_to_spawn_grass(cl, pos)
		if cl.terrain == 0 and math.random() > 0.75 then
			local pos_str = pos and "_" .. pos or ""
			cl.texture2 = txtr .. "swamp_grass_overlay" .. pos_str
		end
	end

	-- shores / grass overlay
	for row = 1, #self.rogue_grid do
		for col = 1, #self.rogue_grid[row] do
			local cell = self.rogue_grid[row][col]
			if cell.terrain == 2 then

				local adj_str = ""

				-- check adj
				for i = row - 1, row + 1 do
					for j = col - 1, col + 1 do
						local adj_cel = self.rogue_grid[i] and self.rogue_grid[i][j]
						if adj_cel and string.find(adj_cel.texture, "dirt") then
							-- up
							if i == row-1 and j == col then
								adj_str = adj_str .. "u"
								try_to_spawn_grass(adj_cel, "d")
							-- down
							elseif i == row+1 and j == col then
								adj_str = adj_str .. "d"
								try_to_spawn_grass(adj_cel, "u")
							-- left
							elseif i == row and j == col-1 then
								adj_str = adj_str .. "l"
								try_to_spawn_grass(adj_cel, "r")
							-- right
							elseif i == row and j == col+1 then
								adj_str = adj_str .. "r"
								try_to_spawn_grass(adj_cel, "l")
							end
						end
					end
				end

				if adj_str ~= "" then
					self.rogue_grid[row][col].texture2 = txtr .. "shore_" .. adj_str
				end

			end
		end
	end

end

function CustomPDAX:RogueSetRedForestCellTextures()
	local txtr = "rogue_cell_"
	for row = 1, #self.rogue_grid do
		for col = 1, #self.rogue_grid[row] do
			local terrain = self.rogue_grid[row][col].terrain
			-- ground
			if terrain == 0 or terrain == 1 then
				self.rogue_grid[row][col].texture = txtr .. "red_ground_1"
			end

			-- grass
			if terrain == 0 and math.random() > 0.5 then
				self.rogue_grid[row][col].texture2 = txtr .. "red_grass_overlay_" .. math.random(4)
			end

			-- obstacles
			if terrain == 1 then
				local pick = math.random() > 0.2 and ("red_tree_" .. math.random(4)) or ("rock_" .. math.random(6))
				self.rogue_grid[row][col].texture2 = txtr .. pick
			end
		end
	end
end

function CustomPDAX:RogueSetLabCellTextures()
	local txtr = "rogue_cell_"
	for row = 1, #self.rogue_grid do
		for col = 1, #self.rogue_grid[row] do
			local cell = self.rogue_grid[row][col]
			local terrain = cell.terrain

			-- empty space first
			if terrain == 0 or terrain == 1 then
				self.rogue_grid[row][col].texture = txtr .. "blank"
			end

			-- ground and ground misc
			if terrain == 0 then
				self.rogue_grid[row][col].texture = txtr .. "lab_ground_1"

				if math.random() < 0.03 then
					self.rogue_grid[row][col].texture2 = txtr .. "lab_misc_ground_" .. math.random(3)
				end
			end

			-- walls
			if terrain == 1 then

				local adj_str = ""

				-- check adj
				for i = row - 1, row + 1 do
					for j = col - 1, col + 1 do
						local adj_cel = self.rogue_grid[i] and self.rogue_grid[i][j]
						if adj_cel and adj_cel.terrain == 0 then
							-- up
							if i == row-1 and j == col then
								adj_str = adj_str .. "u"
							-- down
							elseif i == row+1 and j == col then
								adj_str = adj_str .. "d"
							-- left
							elseif i == row and j == col-1 then
								adj_str = adj_str .. "l"
							-- right
							elseif i == row and j == col+1 then
								adj_str = adj_str .. "r"
							end
						end
					end
				end

				-- set texture
				if adj_str ~= "" then
					self.rogue_grid[row][col].texture = txtr .. "lab_wall_" .. adj_str
				end

				-- some lab additions
				if cell.texture and string.find(cell.texture, "blank") then
					for i = row - 1, row + 1 do
						for j = col - 1, col + 1 do
							local adj_cel = self.rogue_grid[i] and self.rogue_grid[i][j]
							if adj_cel and adj_cel.terrain == 0 then
								-- up right
								if i == row+1 and j == col+1 then
									self.rogue_grid[row][col].texture = txtr .. "lab_wall_r"
								-- up left
								elseif i == row+1 and j == col-1 then
									self.rogue_grid[row][col].texture = txtr .. "lab_wall_l"
								-- down right
								elseif i == row-1 and j == col+1 then
									self.rogue_grid[row][col].texture = txtr .. "lab_wall_hzr"
								-- down left
								elseif i == row-1 and j == col-1 then
									self.rogue_grid[row][col].texture = txtr .. "lab_wall_hzl"
								end

							end
						end
					end
				end

			end

		end
	end

	-- walls misc
	for row = 1, #self.rogue_grid do
		for col = 1, #self.rogue_grid[row] do
			local cell = self.rogue_grid[row][col]
			if cell.terrain == 1 and string.find(cell.texture, "lab_wall_d") and math.random() < 0.33 then
				self.rogue_grid[row][col].texture2 = txtr .. "lab_misc_wall_" .. math.random(6)
			end
		end
	end
end



------------------------------------------------------------------------------------------------------------------------
-------------------------------------------- Level Generation (Wilderness) --------------------------------------------
------------------------------------------------------------------------------------------------------------------------
--	https://roguebasin.com/?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels
-- but without Step function that actually make caves, because it doesnt work well on small maps
-- so more of a just random walls placement

function CustomPDAX:LevelWildGenerate(width, height, percentAreWalls)
	percentAreWalls = percentAreWalls or 20

	local map = {}
	for i = 1, width*height do
		map[i] = false
	end

	self:LevelWildRandomFill(map, width, height, percentAreWalls)

	-- return as new table with flags
	local start_cells = height * width

	local map_t = {}
	for y = 1, height do
		map_t[y] = {}
		for x = 1, width do
			map_t[y][x] = 0
			if map[x + y * width] then
				map_t[y][x] = 1
				start_cells = start_cells - 1
			end
		end
	end

	return map_t, start_cells
end

function CustomPDAX:LevelWildRandomFill(map, width, height, percentAreWalls)
	local randomColumn = math.random(4, width - 4)

	for y = 1, height do
		for x = 1, width do
			if x == 1 or y == 1 or x == width or y == height then
				map[x+y*width] = true
			elseif x ~= randomColumn and math.random(100) < percentAreWalls then
				map[x+y*width] = true
			end
		end
	end
end



------------------------------------------------------------------------------------------------------------------------
----------------------------------------------- Level Generation (Lab) ------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
-- i couldnt make it any better
local max_depth = 5
function CustomPDAX:LevelLabGenerate(width, height, add_cor_width)
	local map = {}
	map[1] = {
		r1 = 1,
		c1 = 1,
		r2 = height,
		c2 = width,
		depth = 1,
	}

	-- set rects
	self:LevelGenerateRects(map, 1)

	-- make rooms
	self:LevelMakeRooms(map)

	-- add rooms to grid
	for i = 1, #map do
		local map_t = map[i]
		if map_t.depth == max_depth - 1 then
			for row = map_t.r1, map_t.r2 do
				for col = map_t.c1, map_t.c2 do
					self.rogue_grid[row][col].terrain = 0
				end
			end
		end
	end

	-- get corridors
	local add_corridor_width = add_cor_width or 0
	local corridors = self:LevelMakeCorridors(map, add_corridor_width)

	-- add corridors to grid
	for i = 1, #corridors do
		local cor_t = corridors[i]
		for row = cor_t.r1, cor_t.r2 do
			for col = cor_t.c1, cor_t.c2 do
				if self.rogue_grid[row] and self.rogue_grid[row][col] then
					self.rogue_grid[row][col].terrain = 0
				end
			end
		end
	end
end

function CustomPDAX:LevelGenerateRects(map, idx)
	-- remove and return if max depth reached
	local new_depth = map[idx].depth + 1
	if new_depth > max_depth then
		table.remove(map, idx)
		return
	end

	-- mults for min and max rectangle split
	local row_split_min, row_split_max = 0.4, 0.6
	local col_split_min, col_split_max = 0.4, 0.6

	-- get sizes
	local size_r = map[idx].r2 - map[idx].r1 + 1
	local size_c = map[idx].c2 - map[idx].c1 + 1

	-- choose dir
	local dir = math.random() > 0.5 and 0 or 1

	-- pick random size of rect and split
	local dmin = dir == 0 and math.ceil(size_r*row_split_min) or math.ceil(size_c*col_split_min)
	local dmax = dir == 0 and math.floor(size_r*row_split_max) or math.floor(size_c*col_split_max)
	if dmin > dmax then dmax = dmin end
	local rnd_size = math.random(dmin, dmax)

	-- create child 1
	local new_idx1 = #map+1
	map[new_idx1] = {
		r1 = map[idx].r1,
		c1 = map[idx].c1,
		r2 = dir == 0 and (map[idx].r1 + rnd_size - 1) or map[idx].r2,
		c2 = dir == 0 and map[idx].c2 or (map[idx].c1 + rnd_size - 1),
		depth = new_depth,
		parent = idx,
		split = dir == 0 and "h" or "v",
	}
	self:LevelGenerateRects(map, #map)

	-- create child 2
	local new_idx2 = #map+1
	map[new_idx2] = {
		r1 = dir == 0 and (map[idx].r1 + rnd_size) or map[idx].r1,
		c1 = dir == 0 and map[idx].c1 or map[idx].c1 + rnd_size,
		r2 = map[idx].r2,
		c2 = map[idx].c2,
		depth = new_depth,
		parent = idx,
		split = dir == 0 and "h" or "v",
	}
	self:LevelGenerateRects(map, #map)
end

function CustomPDAX:LevelMakeRooms(map)
	for i = 1, #map do
		local t = map[i]
		if t.depth == max_depth - 1 then
			local half_size_r = (t.r2 - t.r1 + 1) / 2
			local half_size_c = (t.c2 - t.c1 + 1) / 2

			-- DO NOT SET THIS MULT HIGHER THAN 0.49
			-- ELSE self:LevelPickRandomPoint() will go on infinite loop
			local row_reduce = math.ceil(half_size_r*0.45)
			local col_reduce = math.ceil(half_size_c*0.45)

			map[i].r1 = half_size_r > 1 and t.r1 + math.random(1, row_reduce) or t.r1
			map[i].c1 = half_size_c > 1 and t.c1 + math.random(1, col_reduce) or t.c1
			map[i].r2 = half_size_r > 1 and t.r2 - math.random(1, row_reduce) or t.r2
			map[i].c2 = half_size_c > 1 and t.c2 - math.random(1, col_reduce) or t.c2
		end
	end
end

function CustomPDAX:LevelMakeCorridors(map, width)
	local corridors = {}

	-- connect all depths
	for sub_depth = 1, max_depth - 2 do
		for i = 1, #map do
			local t = map[i]
			if t.depth == max_depth - sub_depth and (not t.connected) then
				local pos1 = self:LevelPickRandomPoint(t)

				for j = 1, #map do
					local t2 = map[j]
					if i ~= j and t2.depth == max_depth - sub_depth and t2.parent == t.parent and (not t2.connected) then
						local pos2 = self:LevelPickRandomPoint(t2, j)
						self:LevelGenerateCorridor(map, corridors, pos1, pos2, t.split, width)
						map[i].connected = true
						map[j].connected = true
					end
				end

			end
		end
	end

	return corridors
end

function CustomPDAX:LevelPickRandomPoint(t)
	while true do		-- rip
		local row = math.random(t.r1, t.r2)
		local col = math.random(t.c1, t.c2)
		if self.rogue_grid[row][col].terrain == 0 then
			return {row, col}
		end
	end
end

function CustomPDAX:LevelGenerateCorridor(map, corridors, pos1, pos2, split, width)
	local start_row = pos1[1]
	local start_col = pos1[2]

	local end_row = pos2[1]
	local end_col = pos2[2]

	local dist_row = end_row - start_row
	local dist_col = end_col - start_col

	if split == "v" then
		-- move right
		corridors[#corridors + 1] = { r1=start_row, c1=start_col, r2=start_row+width, c2=end_col }

		-- move up/down
		if dist_row ~= 0 then
			if dist_row > 0 then		-- down
				corridors[#corridors + 1] = { r1=start_row, c1=end_col-width, r2=end_row, c2=end_col }
			else  --up
				corridors[#corridors + 1] = { r1=end_row, c1=end_col-width, r2=start_row, c2=end_col }
			end
		end
	end

	if split == "h" then
		-- move down
		corridors[#corridors + 1] = { r1=start_row, c1=start_col-width, r2=end_row, c2=start_col }

		-- move left/right
		if dist_col ~= 0 then
			if dist_col > 0 then		-- right
				corridors[#corridors + 1] = { r1=end_row, c1=start_col, r2=end_row+width, c2=end_col }
			else        -- left
				corridors[#corridors + 1] = { r1=end_row, c1=end_col, r2=end_row+width, c2=start_col }
			end
		end
	end

end

------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- Flood Fill --------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
function CustomPDAX:LevelFloodFill(map_t, start_cells)
	-- pick cell in the middle
	local cell_pos = self:LevelGetMiddleCell(map_t)
	if not cell_pos then
		return 0
	end

	-- flag all cells that we can reach from picked cell
	self:LevelSetFlagsReachable(map_t, cell_pos)

	-- calc and return ratio of new to old
	local end_cells = 0
	for row = 1, #map_t do
		for col = 1, #map_t[row] do
			if map_t[row][col] == 2 then
				end_cells = end_cells + 1
			end
		end
	end

	return end_cells / start_cells
end

function CustomPDAX:LevelGetMiddleCell(map_t)
	for row = 13, 17 do
		for col = 13, 17 do
			if map_t[row][col] == 0 then
				return {row=row, col=col}
			end
		end
	end
end

function CustomPDAX:LevelSetFlagsReachable(map_t, p)
	if map_t[p.row+1] and map_t[p.row+1][p.col] == 0 then
		map_t[p.row+1][p.col] = 2
		self:LevelSetFlagsReachable(map_t, {row=p.row+1, col=p.col})
	end

	if map_t[p.row-1] and map_t[p.row-1][p.col] == 0 then
		map_t[p.row-1][p.col] = 2
		self:LevelSetFlagsReachable(map_t, {row=p.row-1, col=p.col})
	end

	if map_t[p.row][p.col+1] and map_t[p.row][p.col+1] == 0 then
		map_t[p.row][p.col+1] = 2
		self:LevelSetFlagsReachable(map_t, {row=p.row, col=p.col+1})
	end

	if map_t[p.row][p.col-1] and map_t[p.row][p.col-1] == 0 then
		map_t[p.row][p.col-1] = 2
		self:LevelSetFlagsReachable(map_t, {row=p.row, col=p.col-1})
	end
end
