local ti2ta = utils_data.CTime_to_table
local configs = mystery_of_the_swamps_configs

local state = {
    dependency_task_finished_at = nil,
    mutant_ids = {},
    skeleton_id = nil,
    campfire_id = nil,
}

xr_effects.mystery_of_the_swamps_save_dependency_time = function()
    state.dependency_task_finished_at = ti2ta(level.get_start_time())
end

function start_task()
    nta_utils.spawn_companion_squad(configs.stalker_squad_1_config)
    nta_utils.spawn_companion_squad(configs.eco_squad_1_config)
    task_manager.get_task_manager():give_task('task_mystery_of_the_swamps', get_story_object_id('yan_stalker_sakharov'))
    nta_utils.set_timeout(function ()
        -- AW part fail check needs to be delayed till squads appear
        give_info('nta_mots_allow_aw_checks')
    end, 1)
end



function save_state(mdata)
	mdata.mystery_of_the_swamps_task_data = state
end

function load_state(mdata)
	if mdata.mystery_of_the_swamps_task_data then
		state = mdata.mystery_of_the_swamps_task_data
	end
    state.mutant_ids = {}
    printf(state.dependency_task_finished_at and 'dep set' or 'dep not set')
end

local campfire_spawned = false
task_status_functor.mystery_of_the_swamps_task_status_functor = function(tsk,task_id)
	if not (db.actor and tsk) then return end
	local stage = tsk.stage

    if stage >= 0 and stage <= 3 then
        if not get_aw_task_status() then
            fail_aw_task_section()
            return 'fail';
        end
    end
	if stage == 0 then
        if
            nta_utils.actor_on_level(nta_utils.levels.army_warehouses)
            and nta_utils.actor_in_range(configs.aw_message_point, configs.aw_message_activation_distance)
            and not has_alife_info('mystery_of_the_swamps_actor_msg_1_sent')
        then
            give_info('mystery_of_the_swamps_actor_msg_1_sent')
            nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_1', 2, 'actor')
            nta_utils.mass_spawn_helper(configs.aw_karlik_configs, state.mutant_ids)
            tsk.stage = 1
        end
    end

    if stage == 1 then
        if #state.mutant_ids == 0 then
            nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_2', 3, 'actor', 8)
            nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_ecolog_msg_1', 7, 'nta_mots_ecolog_squad_1')
            tsk.stage = 2
        end
    end

    if stage == 2 then
        if has_alife_info('aw_mots_ecolog_scan_done') then
            nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_ecolog_msg_2', 2, 'nta_mots_ecolog_squad_1')
            xr_logic.restore_scheme_and_logic(nta_utils.get_squad_commander(get_story_object_id('nta_mots_ecolog_squad_1')))
            logic_enforcer.assign(get_story_object_id('nta_mots_ecolog_squad_1'),'scripts\\beh_companion.ltx','logic', 'beh@base')
            nta_utils.enforce_logic('nta_mots_ecolog_squad_1', [[scripts\beh_companion.ltx]], 'beh@base', true)
            tsk.stage = 3
        else
            aw_measurement_logic_setup()
        end
    end

    if stage == 3 then
        if has_alife_info('yan_stalker_sakharov_mystery_of_the_swamps_3_passed') then
            axr_companions.release_special_squad(get_story_se_object('nta_mots_ecolog_squad_1'))
            tsk.stage = 4
        end
    end

    if stage == 4 then
        if nta_utils.actor_on_level(nta_utils.levels.garbage) and not level_changing() then
            nta_utils.spawn_helper(configs.dead_ecolog_spawn_config)
            tsk.stage = 5
        end
    end

    if stage == 5 then
        conditional_send_stalker_1_message()
        if nta_utils.actor_in_range(configs.dead_ecolog_spawn_config.vector, 20) then
            nta_utils.mass_spawn_helper(configs.garbage_karlik_configs, state.mutant_ids)
            tsk.stage = 6
        end
    end

    if stage == 6 then
        conditional_send_stalker_1_message()
        if has_alife_info('nta_mots_dead_ecolog_looted') then
            data_collected_message()
            spawn_garbage_ghost({ bonk_actor = not stalker_1_close_to_actor() })
            tsk.stage = 7
        end
    end

    if stage == 7 then
        if not state.mutant_ids[1] then
            post_garbage_ghost_messages()
            nta_utils.spawn_helper(configs.dead_ecolog_2_spawn_config)
            tsk.stage = 8
        end
    end

    if stage == 8 then
        if has_alife_info('nta_mots_dead_ecolog_2_looted') then
            post_dv_logic(tsk)
        end
    end

    if stage >= 8 and stage <= 11 then
        if not get_ds_task_status() then
            fail_ds_task_section()
            return 'fail';
        end
    end

    if stage == 9 then
        if nta_utils.actor_on_level(nta_utils.levels.darkscape) and nta_utils.actor_in_range(db.zone_by_name['ds_under_the_bridge']:position(), 40) then
            nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_8', 0, 'actor')
            tsk.stage = 10
        end
    end

    if stage == 10 then
        ds_arrive_logic_setup()
        if nta_utils.actor_in_range(configs.ds_swamp_trigger.vector, 10) then
            nta_utils.mass_spawn_helper(configs.ds_ghosts_configs, state.mutant_ids)
            tsk.stage = 11
        end
    end

    if stage == 11 then
        ds_arrive_logic_setup()
        if #state.mutant_ids == 0 then
            nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_9', 2, 'actor')
            tsk.stage = 12
        end
    end

    if stage == 12 then
        ds_wait_logic_setup()
        if nta_utils.actor_in_range(SIMBOARD:get_smart_by_name('ds_kem3').position, 3) then
            post_ds_logic(tsk)
        end
    end

    if stage == 13 then
        if has_alife_info('yan_stalker_sakharov_mystery_of_the_swamps_4_passed') then
            despawn_ds_baba_yaga()
            tsk.stage = 14
        end
    end

    if stage == 14 then
        if has_alife_info('hunter_gar_trader_mystery_of_the_swamps_1_passed') then
            tsk.stage = 15
        end
    end

    if stage == 15 then
        if has_alife_info('red_forester_tech_mystery_of_the_swamps_1_passed') then
            tsk.stage = 16
        end
    end

    if stage == 16 then
        if has_alife_info('jup_b6_scientist_nuclear_physicist_mystery_of_the_swamps_1_passed') then
            state.skeleton_id = nta_utils.spawn_helper(configs.jupiter_skeleton_config)
            tsk.stage = 17
        end
    end

    if stage >= 16 and stage <= 19 then
        -- Respawn campfire after save reloads
        if not campfire_spawned then
            campfire_spawned = true
            state.campfire_id = nta_utils.spawn_helper(configs.jupiter_campfire_config)
        end
    end

    if stage == 17 then
        if
            nta_utils.actor_on_level(nta_utils.levels.jupiter)
            and nta_utils.actor_in_range(configs.jupiter_campfire_config.vector, configs.jupiter_karlik_activation_distance)
        then
            nta_utils.mass_spawn_helper(configs.jupiter_karlik_configs)
            tsk.stage = 18
        end
    end

    if stage == 18 then
        if
            nta_utils.actor_on_level(nta_utils.levels.jupiter)
            and nta_utils.actor_in_range(configs.jupiter_campfire_config.vector, configs.jupiter_ghost_activation_distance)
        then
            nta_utils.mass_spawn_helper(configs.jupiter_ghost_configs, state.mutant_ids)
            nta_utils.mass_spawn_helper({ configs.jupiter_baba_yaga_config }, state.mutant_ids)
            tsk.stage = 19
        end
    end

    if stage == 19 then
        local campfire = level.object_by_id(state.campfire_id)
        if campfire and campfire:get_campfire():is_on() then
            skeleton_explosion(tsk)
        end
    end

    if stage == 20 then
        task_manager.get_task_manager():set_task_completed("task_mystery_of_the_swamps")
    end
end

task_functor.mystery_of_the_swamps_task_target_functor = function(task_id,field,p,tsk)
	if not (db.actor and tsk) then return nil end
	local stage = tsk.stage

    if stage >= 0 and stage <=2 then
        return get_story_object_id('mil_smart_terrain_4_7_anomaly_spot')
    end

    if stage == 3 then
        return tsk.task_giver_id
    end

    if stage == 4 then
        return get_story_object_id('gar_smart_terrain_5_6_anomaly_spot')
    end

    if stage == 5 then
        return get_story_object_id('nta_mots_dead_ecolog')
    end

    if stage == 6 then
        return get_story_object_id('nta_mots_dead_ecolog')
    end

    if stage == 7 then
        return state.mutant_ids[1]
    end

    if stage == 8 then
        return get_story_object_id('nta_mots_dead_ecolog_2')
    end

    if stage == 9 then
        return
            (not level_changing()
            and nta_utils.actor_on_level(nta_utils.levels.darkscape)
            and db.zone_by_name['ds_under_the_bridge']:id())
            or SIMBOARD:get_smart_by_name('ds_kem3').id
    end

    if stage == 11 then
        return SIMBOARD:get_smart_by_name('ds_kem3').id
    end

    if stage == 12 then
        return SIMBOARD:get_smart_by_name('ds_kem3').id
    end

    if stage == 13 then
        return tsk.task_giver_id
    end

    if stage == 14 then
        return get_story_object_id('hunter_gar_trader')
    end

    if stage == 16 then
        return get_story_object_id('jup_b6_scientist_nuclear_physicist')
    end

    if stage >= 17 and stage <= 19  then
        return state.skeleton_id
    end
end

function get_aw_task_status()
    if not has_alife_info('nta_mots_allow_aw_checks') then return true end

    return get_story_se_object('nta_mots_stalker_squad_1') and nta_utils.entity_in_range(get_story_object_id('nta_mots_ecolog_squad_1'), 120)
end

function fail_aw_task_section()
    nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_sakharov_msg_fail_1', 3, 'yan_stalker_sakharov', 8)
    axr_companions.release_special_squad(get_story_se_object('nta_mots_ecolog_squad_1'))
    axr_companions.release_special_squad(get_story_se_object('nta_mots_stalker_squad_1'))
end

local aw_measurement_logic_set = false
function aw_measurement_logic_setup()
    -- Logic needs to be reapplied constantly because player might reload the game and squad logic will kick in instead
    nta_utils.enforce_logic('nta_mots_ecolog_squad_1', [[scripts\aw_mots_ecolog_beh.ltx]], 'beh@measure', not aw_measurement_logic_set)
    aw_measurement_logic_set = true
end

function stalker_1_close_to_actor()
    return nta_utils.entity_in_range(get_story_object_id('nta_mots_stalker_squad_1'), 50)
end

function conditional_send_stalker_1_message()
    if
        get_story_se_object('nta_mots_stalker_squad_1')
        and not has_alife_info('nta_mots_conditional_stalker_1_msg_sent')
        and not level_changing()
        and not stalker_1_close_to_actor()
    then
        give_info('nta_mots_conditional_stalker_1_msg_sent')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_stalker_msg_1', 2, 'nta_mots_stalker_squad_1', 8)
    end
end

function data_collected_message()
    news_manager.send_tip(db.actor, game.translate_string("mystery_of_the_swamps_data_collected_1"), nil, "common", 6000)
end

function spawn_garbage_ghost(args)
    nta_utils.set_timeout(function ()
        nta_utils.mass_spawn_helper(configs.garbage_ghost_configs, state.mutant_ids)
        if args.bonk_actor then
            local zombie_hit_sound = xr_sound.get_safe_sound_object([[monsters\zombie\zombie_attack_hit_0]])
            zombie_hit_sound:play(db.actor, 0, sound_object.s2d)

            local h = hit()
            h.power = 1.3
            h.direction = db.actor:direction()
            h.draftsman = db.actor
            h.impulse = 1
            h.type = hit.wound
            db.actor:hit(h)
        else
            nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_stalker_msg_2', 0, 'nta_mots_stalker_squad_1', 5)
        end
        return true
    end, 1)
end

function post_garbage_ghost_messages()
    if stalker_1_close_to_actor() then
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_stalker_msg_3', 4, 'nta_mots_stalker_squad_1')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_3', 8, 'actor')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_sakharov_msg_1', 16, 'yan_stalker_sakharov', 15)
    else
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_4', 4, 'actor')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_sakharov_msg_1', 10, 'yan_stalker_sakharov', 15)
    end
end

local post_dv_logic_started = false
function post_dv_logic(tsk)
    if
        not post_dv_logic_started
    then
        post_dv_logic_started = true
        alife_release(get_story_se_object('nta_mots_dead_ecolog'))

        data_collected_message()
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_5', 2, 'actor')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_sakharov_msg_2', 7, 'yan_stalker_sakharov', 18)
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_6', 23, 'actor')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_sakharov_msg_3', 30, 'yan_stalker_sakharov')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_7', 37, 'actor')

        if get_story_se_object('nta_mots_stalker_squad_1') then 
            nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_stalker_msg_4', 44, 'nta_mots_stalker_squad_1', 6)
            nta_utils.set_timeout(function () 
                axr_companions.release_special_squad(get_story_se_object('nta_mots_stalker_squad_1'))
            end, 46)
            nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_sakharov_msg_4_1', 51, 'yan_stalker_sakharov', 8)
            nta_utils.set_timeout(function () 
                nta_utils.spawn_companion_squad(configs.stalker_squad_2_configs)
                nta_utils.spawn_companion_squad(configs.stalker_squad_3_configs)
                tsk.stage = 9
                nta_utils.set_timeout(function ()
                    give_info('nta_mots_allow_ds_checks')
                end, 1)
            end, 51)
        else 
            nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_sakharov_msg_4_2', 46, 'yan_stalker_sakharov', 8)
            nta_utils.set_timeout(function () 
                nta_utils.spawn_companion_squad(configs.stalker_squad_2_configs)
                nta_utils.spawn_companion_squad(configs.stalker_squad_3_configs)
                tsk.stage = 9
                nta_utils.set_timeout(function ()
                    give_info('nta_mots_allow_ds_checks')
                end, 1)
            end, 46)
        end
    end
end

local ds_arrive_logic_set = false
function ds_arrive_logic_setup()
    -- Logic needs to be reapplied constantly because player might reload the game and squad logic will kick in instead
    nta_utils.enforce_logic('nta_mots_stalker_squad_2', [[scripts\darkscape_mots_beh.ltx]], 'beh@stalker_2_guard', not ds_arrive_logic_set)
    nta_utils.enforce_logic('nta_mots_stalker_squad_3', [[scripts\darkscape_mots_beh.ltx]], 'beh@stalker_3_guard', not ds_arrive_logic_set)
    ds_arrive_logic_set = true
end

local ds_wait_logic_set = false
function ds_wait_logic_setup()
    -- Logic needs to be reapplied constantly because player might reload the game and squad logic will kick in instead
    nta_utils.enforce_logic('nta_mots_stalker_squad_2', [[scripts\darkscape_mots_beh.ltx]], 'beh@stalker_2_wait', not ds_wait_logic_set)
    nta_utils.enforce_logic('nta_mots_stalker_squad_3', [[scripts\darkscape_mots_beh.ltx]], 'beh@stalker_3_wait', not ds_wait_logic_set)
    ds_wait_logic_set = true
end

function get_ds_task_status()
    if not has_alife_info('nta_mots_allow_ds_checks') then return true end

    return get_story_se_object('nta_mots_stalker_squad_2') and nta_utils.entity_in_range(get_story_object_id('nta_mots_stalker_squad_2'), 120)
        and get_story_se_object('nta_mots_stalker_squad_3') and nta_utils.entity_in_range(get_story_object_id('nta_mots_stalker_squad_3'), 120)
end

function fail_ds_task_section()
    nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_sakharov_msg_fail_2', 3, 'yan_stalker_sakharov', 8)
    axr_companions.release_special_squad(get_story_se_object('nta_mots_stalker_squad_2'))
    axr_companions.release_special_squad(get_story_se_object('nta_mots_stalker_squad_3'))
end

local post_ds_logic_started = false
function post_ds_logic(tsk)
    if not post_ds_logic_started then
        post_ds_logic_started = true
        local squad_commander_2 = nta_utils.get_squad_commander(get_story_object_id('nta_mots_stalker_squad_2'))
        local squad_commander_3 = nta_utils.get_squad_commander(get_story_object_id('nta_mots_stalker_squad_3'))

        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_10', 0, 'actor')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_stalker_msg_5', 4, 'nta_mots_stalker_squad_2')
        nta_utils.set_timeout(function () give_info('nta_mots_squad_2_radio_out') end, 4)
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_sakharov_msg_5', 9, 'yan_stalker_sakharov')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_stalker_msg_6', 13, 'nta_mots_stalker_squad_2')
        nta_utils.set_timeout(function ()
            nta_utils.spawn_sound_at_position([[new_tasks_addon\invisible_old]], squad_commander_2:position())
        end, 15)
        nta_utils.set_timeout(function ()
            local pos = squad_commander_2:position()
            pos.y = pos.y + 1.5
            nta_utils.spawn_particles_at_position([[anomaly2\body_tear_00]], squad_commander_2:position())
            nta_utils.spawn_sound_at_position([[anomaly\anomaly_body_tear_1]], squad_commander_2:position())
            alife_release(alife_object(squad_commander_2:id()))
            give_info('nta_mots_squad_2_exploded')
        end, 16)
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_stalker_msg_7', 19, 'nta_mots_stalker_squad_3')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_actor_msg_11', 22, 'actor')
        nta_utils.set_timeout(function ()
            local pos = squad_commander_3:position()
            pos.y = pos.y + 1.5
            nta_utils.spawn_particles_at_position([[anomaly2\body_tear_00]], squad_commander_3:position())
            nta_utils.spawn_sound_at_position([[anomaly\anomaly_body_tear_1]], squad_commander_3:position())
            alife_release(alife_object(squad_commander_3:id()))
        end, 23)
        nta_utils.set_timeout(function () 
            nta_utils.mass_spawn_helper({ configs.ds_baba_yaga_config }, state.mutant_ids)
            tsk.stage = 13 
        end, 25)
    end
end

function despawn_ds_baba_yaga()
    local se_obj = alife_object(state.mutant_ids[1])
    if se_obj and se_obj:section_name() == 'baba_yaga_controller' then
        alife_release(se_obj)
    end
    state.mutant_ids = {}
end

local skeleton_explosion_started = false
function skeleton_explosion(tsk)
    if not skeleton_explosion_started then
        skeleton_explosion_started = true
        nta_utils.spawn_pulse(configs.jupiter_skeleton_config.vector)
        nta_utils.set_timeout(function () 
            alife_release(alife_object(state.skeleton_id))
            safe_release_manager.release(alife_object(state.campfire_id))
            bind_campfire.campfires_all[state.campfire_id] = nil

            for _, v in ipairs(state.mutant_ids) do
                local mutant = level.object_by_id(v)
                if (mutant) then
                    mutant:set_health_ex(0)
                end
            end

            local lost_soul_id = nta_utils.spawn_helper(configs.jupiter_lost_soul_config)
            gamma_art_condition_fix(lost_soul_id)
            tsk.stage = 20
        end, 11.6)
    end
end

function gamma_art_condition_fix(id)
    -- TODO: Remove when Grok exposes a table in his script
    if grok_artefacts_random_condition then
        nta_utils.set_timeout(function ()
            local item = level.object_by_id(id)
            if item then
                item:set_condition(0.98)
            end
        end, 0.5)
    end
end

function on_game_start()
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    RegisterScriptCallback("monster_on_death_callback", monster_on_death_callback)
    RegisterScriptCallback("monster_on_before_hit", monster_on_before_hit)
    RegisterScriptCallback("npc_on_use",npc_on_use)
end

function actor_on_first_update()
    if
        has_alife_info('mar_smart_terrain_base_stalker_leader_marsh_task_house_of_horrors_completed')
        and has_alife_info('bar_visitors_barman_stalker_trader_task_baba_yaga_completed')
        and not has_alife_info('task_mystery_of_the_swamps_available')
        and state.dependency_task_finished_at
    then
        if (nta_utils.days_passed_from_date(state.dependency_task_finished_at) >= 2) then
            give_info('task_mystery_of_the_swamps_available')
        end
    end

    if
        has_alife_info('task_mystery_of_the_swamps_available')
        and not has_alife_info('task_mystery_of_the_swamps_barman_hint_sent')
        and not has_alife_info('yan_stalker_sakharov_mystery_of_the_swamps_1_passed')
    then
        RegisterScriptCallback("actor_on_update", actor_on_update)
    end
end

function actor_on_update()
    if db.actor_inside_zones['bar_visitors_sr_light'] then
        give_info('task_mystery_of_the_swamps_barman_hint_sent')
        nta_utils.delayed_message_by_story_id('mystery_of_the_swamps_barman_msg_1', 2, 'bar_visitors_barman_stalker_trader')
        UnregisterScriptCallback("actor_on_update", actor_on_update)
    end
end

function monster_on_death_callback(monster)
    if not monster then return end
    local id = monster:id()
    state.mutant_ids = a_tab_utils.filter(state.mutant_ids, function (el) return el ~= id end)
end

function npc_on_use(looted_npc, who)
    if looted_npc:id() == get_story_object_id('nta_mots_dead_ecolog') and who:id() == AC_ID then
        give_info('nta_mots_dead_ecolog_looted')
    end

    if looted_npc:id() == get_story_object_id('nta_mots_dead_ecolog_2') and who:id() == AC_ID then
        give_info('nta_mots_dead_ecolog_2_looted')
    end
end

function monster_on_before_hit(obj, shit, bi, flags)
    if not obj then return end
    if obj:section() == 'baba_yaga_controller' then
        nta_utils.play_burer_particles_on_hit_position(obj, bi)
    end
end