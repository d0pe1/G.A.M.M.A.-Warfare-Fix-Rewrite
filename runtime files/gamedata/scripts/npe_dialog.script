local printlog = npe_logging.Printlog_npe
local printdebug = npe_logging.Printdebug_npe
local printtrace = npe_logging.Printtrace_npe
local print_table = npe_logging.Print_table_npe
local debug_table = npe_logging.Debug_table_npe
local print_functor = npe_logging.Print_functor_npe
local LOG = npe_logging

GUI = nil -- instance, don't touch

GAMETIME_STATE = {
	STOPPED = 1,
	INMOTION = 0 
}

--This function finds the filename when given a complete path 
function GetFilename(path)   
    local start, finish = path:find('[%w%s!-={-|]+[_%.].+')   
    return path:sub(start,#path) 
end

-- ssfx motion blur stored params
local mblur1, mblur2, mblur3, mblur4

function read_ssfx_setting(command)
    local output = get_console_cmd(0,command)
	if output then 
		output = output:gsub("%(", "")
		output = output:gsub("%)", "")
		return output:match("([^,]+),([^,]+),([^,]+),([^,]+)")
	else
		return 1,0,0,0
	end
end

function execute_ssfx_setting(cmd, p1,p2,p3,p4)
		local cmd_exe = cmd .. " " .. p1 .. "," .. p2 .. "," .. p3 .. "," .. p4
		printtrace(LOG.RUN, LOG.UI," Console Execute: %s", cmd_exe)
		exec_console_cmd(cmd_exe)
end

function Change_gametime_to(state)
    printtrace(LOG.RUN, LOG.UI," Change game time to: " .. state)

	-- controls mblur
	if state == GAMETIME_STATE.STOPPED then
		mblur1, mblur2, mblur3, mblur4 = read_ssfx_setting("ssfx_motionblur")
		printtrace(LOG.RUN, LOG.UI," Storing ssfx_motionblur: %s, %s, %s, %s", mblur1, mblur2, mblur3, mblur4)
		exec_console_cmd("ssfx_motionblur 1,0,0,0")		
	else
		if not mblur1 then
			mblur1, mblur2, mblur3, mblur4 = read_ssfx_setting("ssfx_motionblur")
		end
		execute_ssfx_setting("ssfx_motionblur", mblur1, mblur2, mblur3, mblur4)
	end

	-- toggle
	exec_console_cmd("freeze_time " .. state)
end

function Get_game_time()
	local state = tonumber(get_console_cmd(0,"time_factor"))
	if state == 0 then
		return GAMETIME_STATE.STOPPED
	else
		return GAMETIME_STATE.INMOTION
	end
end

function Pause_game(pause)
	if pause then
		mblur1, mblur2, mblur3, mblur4 = read_ssfx_setting("ssfx_motionblur")
		printtrace(LOG.RUN, LOG.UI," Storing ssfx_motionblur: %s, %s, %s, %s", mblur1, mblur2, mblur3, mblur4)
		exec_console_cmd("ssfx_motionblur 1,0,0,0")
		exec_console_cmd("freeze_time on")
	else
		if not mblur1 then
			mblur1, mblur2, mblur3, mblur4 = read_ssfx_setting("ssfx_motionblur")
		end
		exec_console_cmd("freeze_time off")
		
	end
	
end

function Flip_time()
	local state = Get_game_time()
	if state == GAMETIME_STATE.STOPPED then
		Change_gametime_to(GAMETIME_STATE.INMOTION)
	else
		Change_gametime_to(GAMETIME_STATE.STOPPED)
	end
end

PDA = "PDA"
NPE_HIGH = "NPE_HIGH"
NPE_LOW = "NPE_LOW"
NPE_MEDIUM = "NPE_MEDIUM"
RADIO = "RADIO"
FROM_HIGH = "FROM_HIGH"
FROM_LOW = "FROM_LOW"
FROM_MEDIUM = "FROM_MEDIUM"
MGS_CODEC = "MGS_CODEC"

Sounds = {
	[PDA] = {
		open =  "device\\pda\\pda_guide",
		next =  "radio\\interact\\click",
		prev =  "radio\\interact\\click",
		close = "device\\pda\\pda_note"
	},
	[NPE_HIGH] = {
		open =  "interface\\npe\\open_panel-bb-alt_high",
		next =  "interface\\npe\\next_page-bb_high",
		prev =  "interface\\npe\\prev_page_high",
		close = "interface\\npe\\close_panel_high"
	},
	[NPE_MEDIUM] = {
		open =  "interface\\npe\\open_panel-bb-alt_med",
		next =  "interface\\npe\\next_page-bb_med",
		prev =  "interface\\npe\\prev_page_med",
		close = "interface\\npe\\close_panel_med"
	},	
	[NPE_LOW] = {
		open =  "interface\\npe\\open_panel-bb-alt",
		next =  "interface\\npe\\next_page-bb",
		prev =  "interface\\npe\\prev_page",
		close = "interface\\npe\\close_panel"
	},
    [RADIO] = {
        open = "detectors\\rf\\on",
        next = "detectors\\rf\\beep",
        prev = "detectors\\rf\\beep",
        close = "detectors\\rf\\off"
    },
    [FROM_HIGH] = {
        open = "interface\\npe\\open_panel-bb_high",
        next = "interface\\npe\\next_page-er_high",
        prev = "interface\\npe\\prev_page_high",
        close = "interface\\npe\\close_panel_high"
    },
    [FROM_MEDIUM] = {
        open = "interface\\npe\\open_panel-bb_med",
        next = "interface\\npe\\next_page-er_med",
        prev = "interface\\npe\\prev_page_med",
        close = "interface\\npe\\close_panel_med"
    },
    [FROM_LOW] = {
        open = "interface\\npe\\open_panel-bb",
        next = "interface\\npe\\next_page-er",
        prev = "interface\\npe\\prev_page",
        close = "interface\\npe\\close_panel"
    },
	[MGS_CODEC] = {
		call =  "interface\\npe\\mgs-codec-call",
		open =  "interface\\npe\\mgs-codec-on",
		next =  "interface\\npe\\mgs_item_picku",
		prev =  "interface\\npe\\mgs_item_picku",
		close = "interface\\npe\\mgs-codec-close"
	},    			
}

local delayed_sounds_events = {}
local played_sounds = {}

function Stop_sound()
	printtrace(LOG.RUN, LOG.UI," Stop sound")
	for k, snd in pairs(played_sounds) do
		snd:stop()
		snd = nil
	end
end
function Play_sound(sound, mute_current_play)
	if mute_current_play then
		Stop_sound()
	end
    if sound == nil then
       printtrace(LOG.ERROR, LOG.UI," Play sound: sound is nil")
    end
	printtrace(LOG.RUN, LOG.UI," Play sound: %s", sound)
	local snd = sound_object(sound)
	table.insert(played_sounds, snd)
	snd:play(db.actor,0,sound_object.s2d)
	return true
end

function Play_delayed_sound(sound)
	Stop_sound()
	printtrace(LOG.RUN, LOG.UI," Play delayed sound: %s", sound)
	return Play_sound(sound)
end

function Play_sound_with_delay(sound, delay)
	printtrace(LOG.RUN, LOG.UI," Play sound with delay: " .. sound .. " delay: " .. delay)
	local sound_name = GetFilename(sound .. ".ogg")
	delayed_sounds_events[sound_name] = "play_sound_with_delay" .. sound_name
	CreateTimeEvent("play_sound_with_delay", "play_sound_with_delay" .. sound_name, delay, Play_delayed_sound, sound)
end

function Purge_all_sounds_events()
	Stop_sound()
	for k,v in pairs(delayed_sounds_events) do
		printtrace(LOG.RUN, LOG.UI," Purge sound event: " .. k)
		RemoveTimeEvent("play_sound_with_delay",v)
	end
end

function Play_sounds_sequence(sounds)
	-- play set sounds
	local sequence_delay = nil
	if sounds then
		Purge_all_sounds_events()
	
		for i = 1, #sounds do
			if not sequence_delay then
				sequence_delay = sounds[i].delay or 0
			end
			Play_sound_with_delay(sounds[i].sound, sequence_delay)
			sequence_delay = sequence_delay + (sounds[i].duration or 0) + (sounds[i+1] and sounds[i+1].delay or 0)
		end		
	end
	return sequence_delay or 0
end

function Enable_dof(pause)
	if npe_director.Settings.disable_dof or pause then
		return
	end
	printtrace(LOG.RUN, LOG.UI," Enable DOF")
	if ssfx_weapons_dof then
		actor_menu.last_mode = 1
	end	
end

function Disable_dof()
	if npe_director.Settings.disable_dof then
		return
	end	
	printtrace(LOG.RUN, LOG.UI," Disable DOF")
	if ssfx_weapons_dof then
		actor_menu.last_mode = 0
	end	
end


function on_game_start()
end