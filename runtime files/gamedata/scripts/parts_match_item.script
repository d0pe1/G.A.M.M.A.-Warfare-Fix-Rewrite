local parts_list = {}
local ini_parts = itms_manager.ini_parts

function check_exclusion_list(obj) --function to filter out weapons that need to be excluded i.e. melee, explosives, and magazines (for mags)
	
	if IsWeapon(obj) then
		local sec = obj:section()
		sec = ini_sys:r_string_ex(sec,"parent_section") or sec --prevents crash from weapons with scopes
		local id = obj:id()
		local kind = SYS_GetParam(0, sec, "kind") --pulls kind from parent weapon to avoid crash
		local exclusion_list = {} --list of excluded kinds to add a new exclusion open the .ltx and add new lince below line 12 format of exclusion_list["(KIND"] = X where KIND is the kind and X is the next number in sequence
		
		exclusion_list["w_melee"] = 1
		exclusion_list["w_explosive"] = 2
		exclusion_list["w_magazine"] = 3
		
		if sec:match('gauss') then --specific exclusion for gauss, if individual weapons have the wrong kind type or need a specific exclusion follow this format
			--printe('excluded')
			return
		end
		
		for k, v in pairs(exclusion_list) do --checks weapon kind against excluded types
			--printe(k, v)
			if exclusion_list[kind] then
				--printe('excluded')
				return
			else
				--printe('not excluded')
				check_parts(obj) --calls function to evaluate parts and determine if they need to be rerolle
				return
			end
		end   
	end
end

function check_parts(obj) --check if wpn contains non wpn parts
	local destroy = false
	
	if IsWeapon(obj) then
		local id = obj:id()
		local name = obj:name()
		local sec = obj:section()
		sec = ini_sys:r_string_ex(sec,"parent_section") or sec
		local parts = item_parts.get_parts_con(obj, id, true)	
		local data = se_load_var(id, name, "parts")
		if parts and data then
			for k, v in pairs(parts) do
				--printe(k)
				if string.match(tostring(k),"prt_w") or string.match(tostring(k),"wpn_") then
					destroy = false
					--printf("Parts are weapon parts")
				else 
					destroy = true
					printe("Destroy triggered")
				end
			end
				
			if destroy then --Deletes current parts from alife_storage
				local se_obj = alife_object(id)
				item_parts.clear_parts_con(se_obj.id)
				local m_data = alife_storage_manager.get_state()

				if m_data.se_object[se_obj.id] then
					m_data.se_object[se_obj.id].parts = nil
					printe("Parts Destroyed")
				end  
			end
		end
	end
end

function on_game_start()
    RegisterScriptCallback("actor_on_item_take",check_exclusion_list)
    RegisterScriptCallback("ActorMenu_on_item_drag_drop",check_exclusion_list)
    RegisterScriptCallback("ActorMenu_on_item_focus_receive",check_exclusion_list)
end