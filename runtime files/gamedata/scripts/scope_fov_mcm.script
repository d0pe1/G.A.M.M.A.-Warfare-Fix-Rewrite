--keybinds
local KEY_INCR = DIK_keys.DIK_ADD
local KEY_DECR = DIK_keys.DIK_SUBTRACT
local KEY_RESET = DIK_keys.DIK_BACK
local mode = 1
local modifier = 1

--default values
local zoom_in_iron = 0.4
local zoom_in_scope = 0.35
local zoom_bad_scope = 0.2
local zoom_in_pistol = 0.6
local gl_fov = 0.45
local default_hud_fov = ui_options.get("video/basic/hud_fov") or 0.6
local zoomed = false

ini_fov = ini_file_ex("items\\weapon_fov_values.ltx")
local mcm_keybinds = ui_mcm and ui_mcm.key_hold

local temp_fov
local saved_custom = {}
local saved_gls = {}

function fetch_values()
	zoom_in_iron = ui_mcm.get("scop/iron_fov") or zoom_in_iron
	zoom_in_scope = ui_mcm.get("scop/scope_fov") or zoom_in_scope
	zoom_bad_scope = ui_mcm.get("scop/bad_scope_fov") or zoom_bad_scope
	zoom_in_pistol = ui_mcm.get("scop/pistol_fov") or zoom_in_pistol
	gl_fov = ui_mcm.get("scop/grenade_fov") or gl_fov
	KEY_INCR = ui_mcm.get("scop/keybind_add") or KEY_INCR
	KEY_DECR = ui_mcm.get("scop/keybind_subtract") or KEY_DECR
	KEY_RESET = ui_mcm.get("scop/keybind_reset") or KEY_RESET
	mode = ui_mcm.get("scop/mode") or mode
	modifier = ui_mcm.get("scop/modifier") or modifier
end

local function actor_on_first_update()
	default_hud_fov = ui_options.get("video/basic/hud_fov") or 0.6
	if mcm_keybinds then
		fetch_values()
	end
end

local function on_option_change(mcm)
	default_hud_fov = ui_options.get("video/basic/hud_fov")
	if mcm then
		fetch_values()
		if zoomed then
			zoom_in()
		end
	end
end

function execute_hud_fov(fov_value)
	exec_console_cmd("hud_fov " .. fov_value)
	temp_fov = fov_value
end

function zoom_in()
zoomed = true
local weapon = db.actor:active_item()
local scope = utils_item.get_attached_scope(weapon)
local parent = ini_sys:r_string_ex(weapon:section(),"parent_section") or weapon:section()
local is_pistol = ini_sys:r_string_ex(weapon:section(),"kind") == "w_pistol"

local two_dim = weapon and ini_sys:r_float_ex(weapon:section(),"scope_status") == 1
local sec_exist = ini_fov:section_exist(parent)

if (db.actor:active_detector()) then return end

	if weapon and weapon:weapon_in_grenade_mode() then
		if saved_gls[parent] then
			execute_hud_fov(saved_gls[parent])
		else
			execute_hud_fov(gl_fov)
		end
		return
	end
	if saved_custom[weapon:section()] then
		execute_hud_fov(saved_custom[weapon:section()])
		return
	end
local iron_fov = ini_fov:r_float_ex(parent, "iron")
	if sec_exist and scope then
	local custom_fov = ini_fov:r_float_ex(parent, scope)
		if scope and custom_fov then
			execute_hud_fov(custom_fov)
			return
		end
	end
	if sec_exist and (not scope) and iron_fov then
		execute_hud_fov(iron_fov)
		return
	end
	if is_pistol then
		execute_hud_fov(zoom_in_pistol)
		return
	end
	if scope then
		local scope_bad = ini_fov:r_bool_ex("bad_scopes", scope)
		if scope_bad and (not two_dim) then
			execute_hud_fov(zoom_bad_scope)
		else execute_hud_fov(zoom_in_scope)
		end
	else
		execute_hud_fov(zoom_in_iron)
	end
end

local function zoom_out()
	execute_hud_fov(default_hud_fov)
	zoomed = false
end

local function on_key_release(key)
	local weapon = db.actor:active_item()
	if not weapon then return end
	local parent = ini_sys:r_string_ex(weapon:section(),"parent_section") or weapon:section()

	if key == bind_to_dik(key_bindings.kWPN_FUNC) and zoomed then
		if weapon:weapon_in_grenade_mode() then
			if saved_gls[parent] then
				execute_hud_fov(saved_gls[parent])
			else
				execute_hud_fov(gl_fov)
			end
			return
		else zoom_in()
		end
	end
end

function increase_hud_fov()
	local weapon = db.actor:active_item()
	if (not weapon) or (temp_fov >= 1)  then return end
	local parent = ini_sys:r_string_ex(weapon:section(),"parent_section") or weapon:section()
	local saved_fov = saved_custom[weapon:section()] or temp_fov
	local saved_gl_fov = saved_gls[parent] or temp_fov
	if weapon:weapon_in_grenade_mode() then
		execute_hud_fov((saved_gl_fov + 0.01))
		saved_gls[parent] = saved_gl_fov + 0.01
	else
		execute_hud_fov((saved_fov + 0.01))
		saved_custom[weapon:section()] = saved_fov + 0.01
	end
end

function decrease_hud_fov()
	local weapon = db.actor:active_item()
	if (not weapon) or (temp_fov <= 0.1) then return end
	local parent = ini_sys:r_string_ex(weapon:section(),"parent_section") or weapon:section()
	local saved_fov = saved_custom[weapon:section()] or temp_fov
	local saved_gl_fov = saved_gls[parent] or temp_fov
	if weapon:weapon_in_grenade_mode() then
		execute_hud_fov((saved_fov - 0.01))
		saved_gls[parent] = saved_gl_fov - 0.01
	else
		execute_hud_fov((saved_fov - 0.01))
		saved_custom[weapon:section()] = saved_fov - 0.01
	end
end

function reset_current_weapon()
	local weapon = db.actor:active_item()
	if not weapon then return end
	local parent = ini_sys:r_string_ex(weapon:section(),"parent_section") or weapon:section()
	saved_custom[weapon:section()] = nil
	saved_gls[parent] = nil
	if zoomed then
		zoom_in()
	end
end

local function on_key_press(key)
	if zoomed and mcm_keybinds and (mode == 0) and ui_mcm.get_mod_key(modifier) then
		if (key == KEY_INCR) then
			increase_hud_fov()
			return
		end
		if (key == KEY_DECR) then
			decrease_hud_fov()
			return
		end
	end
	if  mcm_keybinds and (mode == 0) and ui_mcm.get_mod_key(modifier) and (key == KEY_RESET) then
		reset_current_weapon()
		return
	end
end

local count = 0
local function on_key_hold(key)
	if zoomed and mcm_keybinds and (mode == 1) and ui_mcm.get_mod_key(modifier) then
		if (count >= 4) then
			if (key == KEY_INCR) then
				increase_hud_fov()
				count = 0
			end
			if (key == KEY_DECR) then
				decrease_hud_fov()
				count = 0
			end
			if (key == KEY_RESET) then
				reset_current_weapon()
				count = 0
			end
		end
		count = count + 1
	end
end

local function save_state(mdata)
	mdata.snk_saved_hud_fov = saved_custom
	mdata.snk_saved_gl_fov = saved_gls
end

local function load_state(mdata)
	saved_custom = mdata.snk_saved_hud_fov or {}
	saved_gls = mdata.snk_saved_gl_fov or {}
end

function on_mcm_load()
	op = { id = "scop",sh = true ,gr = {
			{ id = "title", type = "slide", link = "ui_options_slider_player", text = "ui_mcm_scop_title", size = { 512,50 }, spacing = 20 },
			{ id = "keybind_add", type = "key_bind", val = 2, def = DIK_keys.DIK_ADD},
			{ id = "keybind_subtract", type = "key_bind", val = 2, def = DIK_keys.DIK_SUBTRACT},
			{ id = "keybind_reset", type = "key_bind", val = 2, def = DIK_keys.DIK_BACK},
			{ id = "modifier", type = ui_mcm.kb_mod_radio, val = 2, def = 1, hint = "mcm_kb_modifier",
				content = {
					{0,"mcm_kb_mod_none"},
					{1,"mcm_kb_mod_shift"},
					{2,"mcm_kb_mod_ctrl"},
					{3,"mcm_kb_mod_alt"}
				}},
			{id = "mode", type = ui_mcm.kb_mod_radio, val = 2, def = 1, hint = "mcm_kb_mode",
				content = {
					{0,"mcm_kb_mode_press"},
					{1,"mcm_kb_mode_hold"},
				}},
			{ id = "desc_mcm", type = "desc", text = "ui_mcm_scop_snk_update_mcm", clr = {255, 175 ,0 ,0}, precondition = {function() return not mcm_keybinds end}},
			{ id = "line", type = "line" },
			{ id = "iron_fov", type = "track", val = 2, min = 0.1, max = 1, step = 0.01, def = 0.45},
			{ id = "scope_fov", type = "track", val = 2, min = 0.1, max = 1, step = 0.01, def = 0.4},
			{ id = "bad_scope_fov", type = "track", val = 2, min = 0.1, max = 1, step = 0.01, def = 0.2},
			{ id = "pistol_fov", type = "track", val = 2, min = 0.1, max = 1, step = 0.01, def = 0.6},
			{ id = "grenade_fov", type = "track", val = 2, min = 0.1, max = 1, step = 0.01, def = 0.45},
		}
	}
	return op
end

function on_game_start()
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("actor_on_weapon_zoom_in", zoom_in)
	RegisterScriptCallback("actor_on_weapon_zoom_out", zoom_out)
	RegisterScriptCallback("on_option_change", on_option_change)
	RegisterScriptCallback("on_key_release", on_key_release)
	RegisterScriptCallback("actor_on_net_destroy", zoom_out)
	RegisterScriptCallback("actor_on_before_death", zoom_out)
	RegisterScriptCallback("on_key_press", on_key_press)
	RegisterScriptCallback("on_key_hold", on_key_hold)
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end