local translate_string = game.translate_string
local string_format = string.format
local menu_key = DIK_keys.DIK_K
local math_floor = math.floor
local get_config = haru_skills_mcm.get_config
local mcm_keybinds = ui_mcm and ui_mcm.key_hold
local parse_keys = utils_data.parse_string_keys
local modifier = 0
local ini_descr = ini_file_ex("plugins\\skills\\ui_settings\\base.ltx")

local K_Timer   = false
function keybind_pass()
	if (K_Timer and (time_global() > K_Timer + 200)) or (not K_Timer) then
		K_Timer = time_global()
		return true
	end
	return false
end

GUI = nil
function on_key_release(key)
    if key ~= menu_key then return end
    if not mcm_keybinds then
        start()
        return
    end
    if ui_mcm.get_mod_key(modifier) then
        start()
    end
end

function start()
    hide_hud_inventory()

    if (not GUI) then
        GUI = UIHarukaSkills()
    end

    if (GUI) and (not GUI:IsShown()) and keybind_pass() then
        GUI:ShowDialog(true)
		GUI:Reset()
		_GUIs_keyfree["UIHarukaSkills"] = true
        Register_UI("UIHarukaSkills", "ui_haru_skills", GUI)
    end
end

class "UIHarukaSkills" (CUIScriptWnd)

function UIHarukaSkills:__init() super()
    self:InitControls()
end

function UIHarukaSkills:__finalize()
end

local languages = {
	["eng"] = true,
	["rus"] = true
}

function sort_by_skill_name(_, a, b)
	return translate_string("st_player_skills_" .. a) < translate_string("st_player_skills_" .. b)
end

function UIHarukaSkills:InitControls()
    self:SetAutoDelete(true)
	self:SetWndRect(Frect():set(0,0,1024,768)) -- Credits: Utjan
    self.xml = CScriptXmlInit()
    local xml = self.xml
    xml:ParseFile("ui_haruka_skills.xml")
    self.dialog = xml:InitStatic("skills", self)
    local background = xml:InitStatic("skills:background", self.dialog)
	local lang = ui_options.curr_localization()
	lang = languages[lang] and lang or "eng"
    local cap_main = xml:InitStatic("skills:cap_main_" .. lang, self.dialog)
	scale_ui(cap_main, true, background, "center")
	self.hint_wnd = utils_ui.UIHint(self)
    self.scroll = xml:InitScrollView("skills:scroll", self.dialog)
    self.scroll:Clear()
	self.skills = {}
    local skills_levels = haru_skills.skills_levels
    for skill, stats in spairs(skills_levels, sort_by_skill_name) do
        local _st = xml:InitStatic("skills:st", nil)
		self.skills[skill] = {}
		self.skills[skill].window = _st
		self.skills[skill].icon = xml:InitStatic("skills:icon_skill", _st)
		self.skills[skill].icon:InitTexture("ui_skills_icon_"..skill)
		scale_ui(self.skills[skill].icon, true)
		self.skills[skill].exp_bar = xml:InitProgressBar("skills:exp_bar", _st)
		self.skills[skill].name = xml:InitStatic("skills:name", _st)
		self.skills[skill].level_percent = xml:InitStatic("skills:percent", _st)
        self.scroll:AddWindow(_st, true)
        _st:SetAutoDelete(true)
    end
	self:Reset()
	self:AllowMovement(true)
end

function UIHarukaSkills:Update()
	CUIScriptWnd.Update(self)
	
	-- Show hint on hover
	for skill, v in pairs(self.skills) do
		if self.skills[skill].window:IsCursorOverWindow() then
			self.hint_wnd:Update(self.skills[skill].description)
			return
		end
	end
	
	self.hint_wnd:Update()
end

local val_conditions = {
	[">"]  = function(a, b) return a > b end,
	["<"]  = function(a, b) return a < b end,
	[">="] = function(a, b) return a >= b end,
	["<="] = function(a, b) return a <= b end
}

function get_val_string(stat, val, t, def)
	if is_empty(t) then return def end
	for _, str in pairs(t) do
		str = str_explode(str, ",")
		if (val_conditions[str[2]](val, tonumber(str[3]))) then
			return str[1]
		end
	end
	return def
end

function get_stats_func_value(file, func, ...)
    if file and func and _G[file] and _G[file][func] then
        return _G[file][func](...)
    end
end

function UIHarukaSkills:BuildDescription(skill)
	local hint = translate_string("st_player_skills_hint_" .. skill)
	local _stats = haru_skills.skills_stats[skill]

	if not self.skills[skill].stat_descriptions then
		self.skills[skill].stat_descriptions = {}
	end
	
	if (ini_descr:section_exist(skill)) then
		for stat, stat_sec in pairs(ini_descr:collect_section(skill)) do
			repeat
				if (not ini_descr:section_exist(stat_sec)) then
					self.skills[skill].stat_descriptions[stat_sec] = parse_keys(translate_string("st_skills_stats_" .. stat), {["stat"] = _stats[stat]})
					do break end
				end

				local functor = ini_descr:r_string_ex(stat_sec, "functor")
				if functor then
					functor = str_explode(functor, ",")
					functor[#functor + 1] = _stats[stat]
					self.skills[skill].stat_descriptions[stat_sec] = get_stats_func_value(unpack(functor))
					do break end
				end

				local magnitude = ini_descr:r_float_ex(stat_sec, "magnitude") or 1
				local val = _stats[stat] * magnitude

				local str = get_val_string(stat, val, {
					positive = ini_descr:r_string_ex(stat_sec, "positive_str"),
					negative = ini_descr:r_string_ex(stat_sec,"negative_str")
				}, ini_descr:r_string_ex(stat_sec, "str") or "st_skills_stats_" .. stat)

				val = ini_descr:r_bool_ex(stat_sec, "abs", false) and math.abs(val) or val

				self.skills[skill].stat_descriptions[stat_sec] = parse_keys(translate_string(str), {["stat"] = val})
			until true
		end
	end

	self.skills[skill].description = hint
	if is_empty(self.skills[skill].stat_descriptions) then return end

	self.skills[skill].description = self.skills[skill].description .. translate_string("st_player_skill_stats")

	for k, v in spairs(self.skills[skill].stat_descriptions) do
		self.skills[skill].description = self.skills[skill].description .. v
	end
end

function UIHarukaSkills:Reset()
	local skills_levels = haru_skills.skills_levels
	for skill, _ in pairs(self.skills) do
		local stats = skills_levels[skill]
		local prev_requirement = stats.prev_requirement
        local progress = (stats.experience - prev_requirement)/(stats.requirement - prev_requirement)
		self.skills[skill].exp_bar:SetProgressPos(progress)
		self.skills[skill].name:TextControl():SetText(string_format("%s - lvl. %s", translate_string("st_player_skills_" .. skill), stats.current_level))
		self.skills[skill].level_percent:TextControl():SetText(string_format("%s%%", clamp((math_floor(progress * 100)),0,100)))
		self:BuildDescription(skill)
	end
end

function UIHarukaSkills:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (res == false) then
		local bind = dik_to_bind(dik)
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == menu_key then
				if keybind_pass() then
					self:Close()
				end
			elseif bind == key_bindings.kQUIT then
				self:Close()
			end
		end
	end
	return res
end

function scale_ui(ele, adjust_x, anchor, anchor_point, parent_width)
	p_width = parent_width or 1024
	p_center = p_width/2
	width = ele:GetWidth()
	pos = ele:GetWndPos()
	anchorpos = {}
	anchorpos.left = pos.x
	anchorpos.right = anchorpos.left + width
	anchorpos.center = anchorpos.left + width/2
	ratio = (device().height / device().width) / (768 / 1024)
	xadjust = anchorpos.left
	if adjust_x then
		if anchor_point == "right" then
			xadjust = p_width - (p_width - (anchor and anchorpos[anchor] or anchorpos.left))*ratio
		elseif anchor_point == "center" then
			xadjust = p_center - (p_center - (anchor and anchorpos[anchor] or anchorpos.left))*ratio
		else
			xadjust = ratio * (anchor and anchorpos[anchor] or anchorpos.left)
		end
	end
	ele:SetWndSize(vector2():set(ele:GetWidth() * ratio, ele:GetHeight()))
	ele:SetWndPos( vector2():set(xadjust , pos.y ) )
end

function UIHarukaSkills:Close()
	self:HideDialog()
	self:Show(false)
	Unregister_UI("UIHarukaSkills")
end

function on_option_change(mcm)
    if mcm then
        menu_key = get_config("ui_keybind")
        modifier = get_config("modifier")
    end
end

function on_game_start()
	RegisterScriptCallback("on_key_release",on_key_release)
    RegisterScriptCallback("on_option_change", on_option_change)
    on_option_change(mcm_keybinds)
end

function get_resistance_string(val)
	return val > 1 and parse_keys(translate_string("st_skills_stats_resistance_negative"), {["stat"] = val}) or
		parse_keys(translate_string("st_skills_stats_resistance_positive"), {["stat"] = 1 + (1 - val)})
end