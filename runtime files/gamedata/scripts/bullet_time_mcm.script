drain_rate_base = -0.0012 -- stamina drain rate
drain_rate_coef = 1;

slowmo_flag = 0
time_factor = 1;
time_speed = 0.4;

run_coef = 0;
coef_on = 0;
focus_coef = 0;

screenfx = true;
dodge = true;

-- [[ ИЗМЕНЕНИЕ 1: Переменная для хранения звука ]]
local slowmo_snd_on = nil

function end_slowmo() 
	-- [[ ИЗМЕНЕНИЕ 2: Остановка звука входа ]]
	if slowmo_snd_on and slowmo_snd_on:playing() then
		slowmo_snd_on:stop()
		slowmo_snd_on = nil -- Очищаем переменную для порядка
	end
	
	local slowmo_snd_off = sound_object("slow-mo\\slowmo_off")
	slowmo_snd_off:play_at_pos(actor, vector():set(0,0,0), 0, sound_object.s2d)
	if screenfx then
        level.add_pp_effector("blink.ppe", 2004, false)
        level.set_pp_effector_factor(2004, 0.08)
    end
    -- ensure effects are removed in case user disabled them while slowmo was active
    level.remove_pp_effector(1996)
	level.remove_pp_effector(1995)
	level.remove_pp_effector(1994)
	level.remove_pp_effector(1993)

	get_console():execute("time_factor 1")
	time_factor = 1
	slowmo_flag = 0
	coef_on = 0
	focus_coef = 0
	
	UnregisterScriptCallback("actor_on_update",slowmo_on_update)
	RegisterScriptCallback("actor_on_update",slowmo_on_end)
	
	if dodge and run_coef > 0 then
		db.actor:set_actor_run_coef(run_coef)
	end
	
	printf("slowmo end")
end

function slowmo_on_end()
	if(time_factor >= 1) then
		time_factor = 1
		UnregisterScriptCallback("actor_on_update",slowmo_on_end)
	else
		time_factor = time_factor + 0.01
		get_console():execute("time_factor " .. tostring(time_factor))
	end
end


function on_key_press(key)
	if not db.actor:alive() then
		if(slowmo_flag == 1) then
			end_slowmo()
		end
		return 
	end
	
	local bind = dik_to_bind(key)
	
	if(bind == key_bindings.kCUSTOM25 ) then -- allow custom binding 
	-- if(key == DIK_keys["DIK_C"] ) then -- original binding in case custom binding is not available
		if (slowmo_flag == 0 and (db.actor.bleeding < 0.21 or dodge == false)) then
			
			-- [[ НОВОЕ ИЗМЕНЕНИЕ 3: Убираем "local", чтобы сохранить звук в переменную ]]
			slowmo_snd_on = sound_object("slow-mo\\slowmo_on")
			slowmo_snd_on:play_at_pos(actor, vector():set(0,0,0), 0, sound_object.s2d)
			
            if screenfx then
                level.add_pp_effector("blink.ppe", 2004, false)
                level.set_pp_effector_factor(2004, 0.1)
                level.add_pp_effector("gravi.ppe",1996,true)
                level.add_pp_effector("brighten.ppe",1995,true)
                level.add_pp_effector("contrast.ppe",1994,true)
                level.add_pp_effector("bullettimefxnew.ppe",1993,true)
            end
			
			-- dodge start effect
            if dodge then
                run_coef = db.actor:get_actor_run_coef()
                db.actor:set_actor_run_coef(run_coef * 3.5)
			end

			RegisterScriptCallback("actor_on_update",slowmo_on_update)
			UnregisterScriptCallback("actor_on_update",slowmo_on_end)
			printf("slowmo activate")
			
			slowmo_flag = 1
			
		elseif slowmo_flag == 1 then
			end_slowmo()
		end
	end
end

function slowmo_on_update() 
	if ( not db.actor:alive() or ( db.actor.bleeding > 0.2 and dodge) ) then
		end_slowmo()
	end
    
    if dodge then
        if ( time_factor <= 0.85) then
            db.actor:set_actor_run_coef(run_coef * 1.5)
        elseif ( time_factor <= 0.7 and coef_on == 0 ) then
            db.actor:set_actor_run_coef(run_coef * 1.3)
            coef_on = 1
        end
    end

	if time_factor > time_speed then
		time_factor = time_factor - 0.008
		get_console():execute("time_factor " .. tostring(time_factor))
		focus_coef = focus_coef + 0.005;
        if screenfx then
            level.set_pp_effector_factor(1993,focus_coef)
            level.set_pp_effector_factor(1995,1 + focus_coef * 2)
            level.set_pp_effector_factor(1994,6 + (focus_coef * 10))
            level.set_pp_effector_factor(1996,100 + (focus_coef * 6))
        end
	end
	
	local curr_power = db.actor.power
	if curr_power > 0.21 then
		db.actor:change_power(drain_rate_base * drain_rate_coef)
	else
		end_slowmo()
	end 
	
end

-- MCM setup
function on_game_start()
	RegisterScriptCallback("on_option_change", loadsettings)
    RegisterScriptCallback("on_key_press",on_key_press) 
	loadsettings()
end


function loadsettings()
    if ui_mcm then
		drain_rate_coef = ui_mcm.get("bullettime/drainrate")
		screenfx = ui_mcm.get("bullettime/screenfx")
        time_speed = ui_mcm.get("bullettime/mintime")
        dodge = ui_mcm.get("bullettime/dodge")
	end
end

function on_mcm_load()
    op = { id= "bullettime", sh=true, gr={
            { id= "bullettimedesc",type="slide", link= "ui_options_slider_player", text="ui_mcm_title_bullettime", size= {512,50}, spacing=20 },
            { id = "screenfx", type = "check", val = 1, def = true },
            { id = "dodge", type = "check", val = 1, def = true },
            { id = "drainrate", type = "track", val = 2, def = 1, step = 0.1 , max = 2, min=0.5 },
            { id = "mintime", type = "track", val = 2, def = 0.4, step = 0.1 , max = 0.8, min=0.2 }
        }
    }  
    return op
end