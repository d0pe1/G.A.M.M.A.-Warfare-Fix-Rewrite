surge_window = 1200000
arti_min_eff = 5
arti_max_eff = 25
arti_surge_min_eff = 25
arti_surge_max_eff = 35
arti_psystorm_min_eff = 25
arti_psystorm_max_eff = 35

delay = 500
tg = time_global()

surge_happened = 0
psystorm_happened = 0

function grok_surge_checker()



-- Function delayer
	grok_delay = tg + delay
	if (time_global() < grok_delay) then
		return
	else
		tg = time_global()
	end

	g_time = game.get_game_time()

-- Surge timer

	if xr_conditions.surge_complete() then
		printf("surge detected")
		surge_init_time = time_global()
		surge_init_time_window = surge_init_time + surge_window
		printf(surge_init_time)
		printf(surge_init_time_window)
	end

	if (time_global() <= surge_init_time_window) then
		surge_happened = 1
		printf("surge_happened")
	else
		surge_happened = 0
		printf("surge_happened not")
	end

-- Psy Storm timer

	if psi_storm_manager.is_finished() then
		printf("psystorm detected")
		psistorm_init_time = game.get_game_time()
		psistorm_init_time_window = psistorm_init_time + surge_window
		printf(psistorm_init_time)
		printf(psistorm_init_time_window)
	end

	if (time_global() <= psistorm_init_time_window) then
		psystorm_happened = 1
		printf("psystorm_happened")
	else
		psystorm_happened = 0
		printf("psystorm_happened not")
	end
end


function grok_arti_random_efficiency(obj)

	if (IsArtefact(obj) and obj:condition() == 1) then

		if (surge_happened == 0 or psystorm_happened == 0) then
			cond = (math.random(arti_min_eff, arti_max_eff) / 100)
		end

		if psystorm_happened == 1 then
			cond = (math.random(arti_psystorm_min_eff, arti_psystorm_max_eff) / 100)
		end

		if surge_happened == 1 then
			cond = (math.random(arti_surge_min_eff, arti_surge_max_eff) / 100)
		end

		obj:set_condition(cond)
	end
end

function load_state(m_data)
	if (m_data.PsiStormManager) then 
		psistorm_init_time = m_data.PsiStormManager.inited_time and utils_data.CTime_from_table(m_data.PsiStormManager.inited_time)
	end

	if (m_data.SurgeManager) then
		surge_init_time = m_data.SurgeManager.inited_time and utils_data.CTime_from_table(m_data.SurgeManager.inited_time)
	end
end

function on_game_start()
	RegisterScriptCallback("actor_item_to_ruck", grok_arti_random_efficiency)
	RegisterScriptCallback("actor_on_item_take", grok_arti_random_efficiency)
	RegisterScriptCallback("actor_on_update", grok_surge_checker)
	RegisterScriptCallback("load_state", load_state)
end