local dte = demonized_time_events
-- FDDA Check by Demonized
local isFDDARedone = lam2 and liz_fdda_redone_mcm
local FDDAAnimPlaying = false
local item_sec = nil
local dropper_id = {}
local last_tick = 0
local FDDARedoneDroppable = {}

if not isFDDARedone and enhanced_animations then
	if enhanced_animations.anim_prepare then
		local eap = enhanced_animations.anim_prepare
		enhanced_animations.anim_prepare = function(...)
			FDDAAnimPlaying = true
			return eap(...)
		end
	end
	if enhanced_animations.stop_my_item_anim then
		local eap = enhanced_animations.stop_my_item_anim
		enhanced_animations.stop_my_item_anim = function(...)
			FDDAAnimPlaying = false
			return eap(...)
		end
	end
	if enhanced_animations.stop_my_monster_anim then
		local eap = enhanced_animations.stop_my_monster_anim
		enhanced_animations.stop_my_monster_anim = function(...)
			FDDAAnimPlaying = false
			return eap(...)
		end
	end
	if ea_callbacks and ea_callbacks.EA_SendScriptCallback and ea_callbacks.EA_RegisterScriptCallback then
		ea_callbacks.EA_RegisterScriptCallback("ea_on_item_use", function()
			FDDAAnimPlaying = true
		end)
		ea_callbacks.EA_RegisterScriptCallback("ea_on_item_anim_stop", function()
			FDDAAnimPlaying = false
		end)
	end
	end
	if zzz_skin and zzz_skin.stop_my_monster_anim then
	local eap = zzz_skin.stop_my_monster_anim
	zzz_skin.stop_my_monster_anim = function(...)
		FDDAAnimPlaying = false
		return eap(...)
	end
end

-----------------------------------------------------------

function print(a,...)
	-- if mcm_settings.dbug[1] then
		if type(a)=="table" then
			printf("Model Dropper Print: \n%s", utils_data.print_table(a, false, true))
		else
			printf("Model Dropper Print: "..tostring(a))
		end
	-- end
end

function getActorPos()
	local direction = vector():setHP(device().cam_dir:getH(),0):mul(-0.75)
	local pos = db.actor:position()
	if IsMoveState("mcCrouch") and IsMoveState("mcAccel") then -- Prone
		pos.y = pos.y + 0.4
	elseif IsMoveState("mcCrouch") then
		pos.y = pos.y + 1.2
	else
		pos.y = pos.y + 1.6
	end
	return pos:add(direction)
end

function randomf(m,n)
	local max = math.max(m,n)
	local min = math.min(m,n)
	return math.random()*(max-min) + min
end

function table_find(t,f)
	for i,v in pairs(t) do
		if v == f then
			return i
		end
	end
end

function get_current_action(action)
	if action  then
		local str = action.name
		return (str and string.find(str,"fdda_anim_") and string.gsub(str,"fdda_anim_","")) or (action.tag == "vanilla_item_use" and action.item_sec) or nil
	end
end

function apply_force(target)
	if target and target:get_physics_shell() then
		local forceMagnitude = target:mass() * 19.52 * randomf(5,8)
		local direction = vector():set(math.random()*2-1,math.random()*2-1,math.random()*2-1):mul(forceMagnitude)

		target:get_physics_shell():apply_force(direction.x, 0, direction.z)
		target:get_physics_shell():apply_torque(forceMagnitude*20,forceMagnitude*20,forceMagnitude*20)
	end
end

function spawn_object(item_sec)
	if haruka_fill and item_sec == "flask" then return end -- Fillable Canteen patch
	if SYS_GetParam(0, "dropper_"..item_sec, "visual") then
		local se_obj = alife_create("dropper_"..item_sec, getActorPos(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		if not se_obj then return end
		local id = se_obj.id
		se_obj.angle  = vector():set(randomf(-1,1),randomf(-1,1),randomf(-1,1)):mul(math.pi)
		local data = utils_stpk.get_physic_data(se_obj)
		data.custom_data = [[
[collide]
ignore_small_objects
]]
		utils_stpk.set_physic_data(data, se_obj)
		local time_start = time_global()
		dte.CreateTimeEvent(0,"apply_starting_force",0, function ()
			local obj = level.object_by_id(id)
			if obj then
				obj:force_set_position(getActorPos(),true)
				apply_force(obj)
				table.insert(dropper_id,{id,getActorPos()})
				return true
			end
			local func_time = time_global() - time_start
   			if func_time > 1000 then
        		print("obj search timeout")
        		return true
    		end
    	end)
	end
end

function actor_on_update()
	if isFDDARedone then -- FDDA Redone check
		FDDAAnimPlaying = lam2.is_running()
		if FDDAAnimPlaying and item_sec and item_sec~=get_current_action(lam2.get_current_action()) and table_find(FDDARedoneDroppable,item_sec) then
			FDDAAnimPlaying = false
			table.remove(FDDARedoneDroppable,table_find(FDDARedoneDroppable,item_sec))
		end
	end
	if not FDDAAnimPlaying and item_sec then
		spawn_object(item_sec)
		item_sec = nil
	end
	if isFDDARedone then
		item_sec = get_current_action(lam2.get_current_action())
	end
	if time_global()-last_tick>5000 and dropper_id and dropper_id[1] then
		local pos_removed = {}
		for i = 1,#dropper_id do
			if dropper_id[i] and dropper_id[i][2]:distance_to_sqr(getActorPos())>50*50 then
				local se_obj = alife_object(dropper_id[i][1])
				if se_obj and string.find(se_obj:section_name(), "dropper_") then
					alife_release(se_obj)
				end
				dropper_id[i] = nil
			end
		end
		last_tick = time_global()
	end
end

function actor_on_first_update()			
    for i = 1, 65534 do
        local se_obj = alife_object(i)
        if se_obj and string.find(se_obj:section_name(), "dropper_") then
			alife_release(se_obj)
		end
	end
	last_tick = time_global()
end

if not isFDDARedone then
	originalAOIBU = itms_manager.actor_on_item_before_use
	modifiedAOIBU = function (obj, flags)
		if obj:get_remaining_uses()-1 <=0 then
			item_sec = obj:section()
		end
	end
	itms_manager.actor_on_item_before_use = function (obj, flags)
		modifiedAOIBU(obj,flags)
    	originalAOIBU(obj,flags)
	end
else
	originalAddAction = lam2.add_action
	modifiedAddAction = function (action)
		if action and ((action.name and string.find(action.name,"fdda_anim_")) or action.tag == "vanilla_item_use")  and action.item and action.item:is_inventory_item() and action.item:get_remaining_uses()-1<=0 then
			table.insert(FDDARedoneDroppable,action.item:section())
		end
	end
	lam2.add_action = function (action)
		modifiedAddAction(action)
    	originalAddAction(action)
	end

	ogStopCur = lam2.stop_current_action
	moddedStopCur = function()
		local running = lam2.is_running()
		local action = lam2.get_current_action()
		if running and action and ((action.name and string.find(action.name,"fdda_anim_")) or action.tag == "vanilla_item_use")  and action.item and action.item:is_inventory_item() and table_find(FDDARedoneDroppable,action.item:section()) then
			table.remove(FDDARedoneDroppable,table_find(FDDARedoneDroppable,action.item:section()))
		end
	end
	lam2.stop_current_action = function ()
		moddedStopCur()
		ogStopCur()
	end
end

function on_game_start()
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end
