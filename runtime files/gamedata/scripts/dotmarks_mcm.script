-- ======================================================================
--[[	Interaction Dot Marks ("DotMarks")
-- ======================================================================
 	MCM initialization script
 	Author: Catspaw (CatspawMods @ ModDB)
 	https://www.moddb.com/mods/stalker-anomaly/addons/interaction-dot-marks/
 	https://github.com/CatspawMods/Anomaly-Addon-Archive/
-- ====================================================================]]
assert(utils_catspaw_common, "\n\n"..
    "! dotmarks_mcm requires utils_catspaw_common, which does not exist or failed to load!\n\n"
)
assert(utils_catspaw_text, "\n\n"..
    "! dotmarks_mcm requires utils_catspaw_text, which does not exist or failed to load!\n\n"
)
assert(dotmarks_main, "\n\n"..
    "! dotmarks_mcm requires dotmarks_main, which does not exist or failed to load!\n\n"
)
assert(ui_hud_dotmarks, "\n\n"..
    "! dotmarks_mcm requires ui_hud_dotmarks, which does not exist or failed to load!\n\n"
)
script_name 		= "dotmarks_mcm"
debuglogs 			= false
local exes_version 	= MODDED_EXES_VERSION or (get_modded_exes_version and get_modded_exes_version())
local header_desc 	= "ui_mcm_dotmarks_header_main"
local xml 			= CScriptXmlInit()
local headers 		= {}
local valid_mcm 	= false
local load_failed 	= false
local get_main_config 	= utils_catspaw_common.get_main_config
local gts 				= game.translate_string
local psk 				= utils_data.parse_string_keys
local sfind 			= string.find
local ssub 				= string.sub
local lang 				= "eng"
local nocolor_desc 		= "ui_mcm_dotmarks_header_main_nocolor"
local play_snd_path 	= dotmarks_main.play_snd_path
script_version 			= dotmarks_main.script_version or "ersion not found!"
local csv_argb_to_tbl 	= utils_catspaw_text.csv_argb_to_tbl
release_date			= tostring(dotmarks_main.release_date) or "date not found! Was ui_hud_dotmarks.script overwritten or disabled?"
local rel_version 		= string.format("$clr_tgrv%s (rel %s)", script_version, release_date)
local cfg 				= utils_catspaw_common.load_file_data("scripts\\dotmarks_defaults.ltx", cfg, {logging = debuglogs, called_by = script_name})
if not utils_catspaw_text.valid_bind(cfg.bind_sec_interact) then
	cfg.bind_sec_interact = nil
end
local MCM_VERSION
local UI_FUNCTORS
color_tokens = {
    ["clr_lbl"] = "%" .. "%c[255,0,200,220]",
    ["clr_gld"] = "%" .. "%c[255,255,215,0]",
    ["clr_wht"] = "%" .. "%c[255,255,255,255]",
    ["clr_red"] = "%" .. "%c[255,255,0,0]",
    ["clr_tgr"] = "%" .. "%c[128,90,90,90]",
    ["clr_cmg"] = "%" .. "%c[255,150,150,150]",
    ["clr_uab"] = "%" .. "%c[255,0,87,183]",
}

-- ======================================================================

local pre 	= {}
local wnds 	= {}
local cache = {}
local icons = {}

function valid_mcm_version(silent)
    if not (ui_mcm and ui_mcm.VERSION) then return end
    local log 	= DEV_DEBUG and not silent
    MCM_VERSION = ui_mcm and ui_mcm.VERSION
    local ver 	= MCM_VERSION and str_explode(MCM_VERSION, "%.")
    local maj 	= tonumber(ver and ver[1]) or 0
    local min 	= tonumber(ver and ver[2]) or 0
    local pat 	= tonumber(ver and ver[3]) or 0
    UI_FUNCTORS	= not not (ui_mcm and ui_mcm.UI_MCM and ui_mcm.UI_MCM.Init_Wrapper_Box)
    local _ 	= log and printf("[DotMarks] MCM version string: %s | major %s | minor %s | patch %s | functors exist: %s", MCM_VERSION, maj, min, pat, UI_FUNCTORS)
    local inv 	= (not UI_FUNCTORS) or (maj < 1) or ((maj == 1) and (min < 7))
    local pre 	= inv and "!" or "+"
    _ = log and printf(pre.." MCM version check: %s", inv and "FAILED" or "Passed")
    if inv then return false, ver, UI_FUNCTORS end
    return true, ver, UI_FUNCTORS
end

function unsquish(width)
    return (width or 0) * (cfg.unsquish_ratio or 1)
end

local _opt_ = "/"

function slash_to_under(st)
	return st and st:gsub(_opt_, "_")
end

function under_to_slash(st)
	return st and st:gsub("_",  _opt_)
end

function load_success()
	return not load_failed
end

function init_preview(anchor, handlers, opts, flags)
	if not load_success() then return end
	pre.main = xml:InitStatic("box", anchor)
	pre.main:SetWndSize(vector2():set(unsquish(300), 190))
	pre.main:SetWndPos(vector2():set(unsquish(430), (lang == "rus") and 210 or 180))

	pre.bg 	= xml:InitStatic("box", pre.main)
	pre.bg:InitTexture("ui_mcm_dmarks_preview_static")
	pre.bg:SetWndSize(vector2():set(unsquish(300), 190))

	pre.fr 	= xml:InitStatic("box", pre.bg)
	pre.fr:InitTexture("ui_mcm_dmarks_preview_frame")
	pre.fr:SetWndSize(vector2():set(unsquish(300), 190))

	local rvbox	= xml:InitTextWnd("box", anchor)
	rvbox:SetWndSize(vector2():set(480 * cfg.unsquish_ratio, 20))
	rvbox:SetText(psk(rel_version, color_tokens))
	rvbox:SetWndPos(vector2():set(10 * cfg.unsquish_ratio, 52))
	rvbox:SetTextComplexMode(true)	
end

function init_simple_icon(anchor, handlers, opts, flags)
	flags.icon_w 	= flags.icon_w or opts.icon_w
	flags.icon_h 	= flags.icon_h or opts.icon_h or flags.icon_w
	flags.icon_x 	= flags.icon_x or opts.icon_x
	flags.icon_y 	= flags.icon_y or opts.icon_y
	local icon 		= flags.icon or opts.icon
	local opt_id 	= slash_to_under(ui_mcm.cc(flags.path, opts.id))
	icons[opt_id] 	= xml:InitStatic("box", anchor)
	icons[opt_id]:InitTexture(opts.icon)
	icons[opt_id]:SetWndSize(vector2():set((flags.icon_w or 0) * cfg.unsquish_ratio, flags.icon_h or 0))
	icons[opt_id]:SetWndPos(vector2():set((flags.icon_x or 0) * cfg.unsquish_ratio, flags.icon_y or 0))
	return icons[opt_id]
end

function init_icon_list(anchor, handlers, opts, flags)
	local icos = opts and opts.icon_list or cfg.service_icons
	local used = {}
	local ctrls = {}
	local i = 0
	for k,v in spairs(icos) do
		if not used[v] then
			local x = opts.icon_x + ((opts.icon_w + 2) * i)
			local ctrl = xml:InitStatic("box", anchor)
			ctrl:InitTexture(v)
			ctrl:SetWndSize(vector2():set((opts.icon_w or 0) * cfg.unsquish_ratio, opts.icon_h or opts.icon_w or 0))
			ctrl:SetWndPos(vector2():set((x or 0) * cfg.unsquish_ratio, opts.icon_y or 0))
			i = i + 1
			used[v] = ctrl
		end
	end
	wnds[opts.id] 		= used
	wnds[opts.id].opts 	= opts
	return wnds[opts.id]
end

-- ======================================================================

local argb_ctrl

function init_header_element(anchor, handlers, opts, flags)
	handlers.desc:SetText("")
	local localized_text

	local bg	= xml:InitStatic("box", anchor)
	local text	= xml:InitTextWnd("box", bg)

	if opts.dmark_apos then
		anchor:SetWndPos(vector2():set(0, opts.dmark_apos))
	end

	if (opts.id == "header_main") then
		if load_failed then
			if (not valid_mcm) then
				localized_text = string.format(gts("st_dotmarks_fail_reason_oldmcm"), MCM_VERSION, UI_FUNCTORS) .. gts("st_catsy_get_mcm")
			elseif exes_version then
				local text = gts("ui_mcm_dotmarks_header_oldexes")
				localized_text = string.format(text, exes_version)
			else
				localized_text = gts("ui_mcm_dotmarks_header_notmodded")
			end
		end
	end

	if opts.dmark_tex then
		bg:SetWndSize(vector2():set(650 * cfg.unsquish_ratio, 0))
		bg:SetWndPos(vector2():set(10, opts.dmark_bpos or 0))
		bg:InitTexture(opts.dmark_tex)
	end		

	text:SetWndSize(vector2():set(620 * cfg.unsquish_ratio, 0))
	text:SetText(psk(localized_text or gts(opts.dmark_text or opts.text), color_tokens))
	text:SetWndPos(vector2():set(10, opts.dmark_text_v or 12))
	text:SetTextComplexMode(true)
	text:AdjustHeightToText()

	bg:SetWndSize(vector2():set(bg:GetWidth(), text:GetHeight() + 25))
end


function sync_widget_color(ctrl, colors)
	if not (ctrl and colors) then return end
	ctrl:SetTextureColor(GetARGB(colors.a, colors.r, colors.g, colors.b))
end

function sync_widget_size(ctrl, w, h)
	if not (ctrl and w) then return end
	ctrl:SetWndSize(vector2():set(w, h or w))
	ctrl:EnableHeading(true)
    ctrl:SetConstHeading(true)
end

function init_dotmark_preview(anchor, handlers, opts, flags)
	local opts2 	= dup_table(opts)
	local flags2 	= dup_table(flags)
	opts2.icon 		= "ui_catsy_marker_dotactive"
	opts2.icon_x 	= (opts.icon_x - 35)

	wnds[opts.id] = {
		reg = init_simple_icon(anchor, handlers, opts, flags2),
		act = init_simple_icon(anchor, handlers, opts2, flags2)
	}
	local ctrl = wnds[opts.id]
	local size 	= get_main_config("dotmarks/doticons/dot_marker_size", 2) or 1
	ctrl.reg.opts = opts
	ctrl.act.opts = opts2
	on_dotmark_size_select(flags2.path, opts.id, size)
	return ctrl
end

function on_dotmark_size_select(path, opt, value, attrs)
	local ctrl 	= wnds[opt]
	if not ctrl then return end
	cache[opt] 	= value
	local opts 	= ctrl.reg.opts
	local szw 	= opts.icon_w or 5
	local szh 	= opts.icon_h
	local w 	= value * szh
	local h 	= value * szh
	local diff 	= (szw  - w) / 2
	local diff2 = (szw  - (w * 2)) / 2
	local x 	= (opts.icon_x + diff ) * cfg.unsquish_ratio
	local x2 	= (opts.icon_x + diff2 - 35 ) * cfg.unsquish_ratio
	local y 	= opts.icon_y
	sync_widget_size(ctrl.reg, w, h)
	sync_widget_size(ctrl.act, w * 2, h * 2)
	ctrl.reg:SetWndPos(vector2():set(x, y + diff))
	ctrl.act:SetWndPos(vector2():set(x2, y + diff2))
end

function get_preview_static(path, opt, opts, flags)
	if not (opts and flags) then return end
	path 	= path or flags.path or ""
	opt 	= opt or opts.id or ""
	if (opt == "argb_dot_normal") then
		return wnds and wnds.dot_marker_size and wnds.dot_marker_size.reg
	elseif (opt == "argb_dot_focus") then
		return wnds and wnds.dot_marker_size and wnds.dot_marker_size.act
	elseif opt:find("^argb_service_") then
		local service = opt:sub(opt:find("^argb_service_") + 13)
		local srvopt = "ui_catsy_marker_" .. service
		return wnds.enable_icon_services[srvopt]
	else
		local disopt = opt:gsub("argb", "enable")
		local opt_id = slash_to_under(ui_mcm.cc(path, disopt))
		return icons[opt_id]
	end
end

local argb_control_preset = {
	preview_func 	= this.get_preview_static,
	preview_x 		= 258,
	preview_y 		= 3
}

function get_argb_input_element(opt_id, def, preset)
	return {
		id 		= opt_id,
		type 	= "input",
		val 	= 0,
		def 	= def or cfg.colors.clr_dmark_def or "255,255,255,255",
		ui_hook_functor = { ui_mcm_argb_input.init_mcm_argb_control },
		ui_snd_path 	= "catspaw\\paw_blip",
		preset_args 	= preset or argb_control_preset,
	}
end

function hidden() return false end

-- ======================================================================

function get_main_menu()
	return {
		{ id = "menuslide_main", type = "slide", link = "ui_mcm_dotmarks_banner_main", size = {512,50}, spacing = 0,
			ui_hook_functor = { dotmarks_mcm.init_preview },
			-- a proper PAW-style live preview is going to take a lot more work
		},
		{ id = "header_main", 		type = "desc", text = "ui_mcm_dotmarks_header_fail_nocolor",
			ui_hook_functor = { dotmarks_mcm.init_header_element },
			dmark_text 		= header_desc,
			dmark_text_v 	= 12,
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head" .. ((lang == "rus") and "140" or "90"),
			dmark_apos 		= -20,
			dmark_bpos 		= 8,
		},

		{ id = "show_item_charge", 		type = "check", 	val = 1, def = cfg.show_item_charge, precondition = { dotmarks_mcm.load_success } },
		{ id = "show_gun_condition", 	type = "check", 	val = 1, def = cfg.show_gun_condition and not utils_catspaw_common.using_gamma_modpack, precondition = { dotmarks_mcm.load_success } },
		{ id = "show_item_condition", 	type = "check", 	val = 1, def = cfg.show_item_condition, precondition = { dotmarks_mcm.load_success } },
		{ id = "show_condition_color", 	type = "check", 	val = 1, def = cfg.show_condition_color, precondition = { dotmarks_mcm.load_success } },
		{ id = "show_stash_weight", 	type = "check", 	val = 1, def = cfg.show_stash_weight, precondition = { dotmarks_mcm.load_success } },
		{ id = "show_item_card", 		type = "check", 	val = 1, def = cfg.show_item_card, precondition = { dotmarks_mcm.load_success } },
		{ id = "show_multi_uses", 		type = "check", 	val = 1, def = cfg.show_multi_uses, precondition = { dotmarks_mcm.load_success } },
		{ id = "sp_flag_favejunk", 		type = "check", 	val = 1, def = cfg.sp_flag_favejunk, precondition = { dotmarks_mcm.load_success } },
		{ id = "wheel_cycles_pickups", 	type = "check", 	val = 1, def = cfg.wheel_cycles_pickups, precondition = { dotmarks_mcm.load_success } },

		{ id = "interact_drop_alpha", 	type = "track", 	val = 2, min = 0, step = 0.01, max = 1, def = cfg.interact_drop_alpha, precondition = { dotmarks_mcm.load_success } },

		-- Hidden options:
		{ id = "welcome_message_shown", type = "check", 	val = 1, def = false, precondition = { dotmarks_mcm.hidden} },
		{ id = "last_version", 			type = "input", 	val = 0, precondition = { dotmarks_mcm.hidden} },
		{ id = "last_release", 			type = "input", 	val = 2, precondition = { dotmarks_mcm.hidden} },
		-- These are necessary because MCM ignores ui_mcm.get requests for values that aren't part of a menu
	}
end

-- ======================================================================

function get_sec_menu()
	return {
		{ id = "menuslide_sec", type = "slide", link = "ui_mcm_dotmarks_banner_sec", size = {512,50}, spacing = 0},

		{ id = "header_sec", 	type = "desc", clr = {255,255,215,0}, text = "ui_mcm_dotmarks_alti_desc",
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_apos 		= -5,
		},
		{ id = "bind_sec_interact", 	type = "key_bind", 			val = 2, def = cfg.bind_sec_interact or bind_to_dik(key_bindings.kUSE)},
		{ id = "modk_sec_interact", 	type = ui_mcm.kb_mod_radio, val = 2, def = cfg.modk_sec_interact, hint = "mcm_kb_modifier", 
			content = {
				{0,"mcm_kb_mod_none"},
				{1,"mcm_kb_mod_shift"},
				{2,"mcm_kb_mod_ctrl"},
				{3,"mcm_kb_mod_alt"}
			}
		},
		{ id = "imod_sec_interact", 	type = ui_mcm.kb_mod_radio, val = 2, def = cfg.imod_sec_interact, hint = "mcm_kb_mode",
			content = {
				{0,"mcm_kb_mode_press"},
				{1,"mcm_kb_mode_dtap"},
				{2,"mcm_kb_mode_hold"}
			}
		},

		{ id = "long_press_delay", 		type = "input", 	val = 2, min = 50, max = 2000, def = cfg.long_press_delay },

		{ id = "sec_enable_use_act", 	type = "check", 	val = 1, def = cfg.sec_enable_use_act },
		{ id = "sec_enable_unload_act", type = "check", 	val = 1, def = cfg.sec_enable_unload_act },
		{ id = "sec_enable_takeall_act",type = "check", 	val = 1, def = cfg.sec_enable_takeall_act },
		{ id = "sec_enable_heal_act",	type = "check", 	val = 1, def = cfg.sec_enable_heal_act },
		{ id = "sec_mode_setupthebomb", type= "list", 		val = 2, def = cfg.sec_mode_setupthebomb, 
			content = {
			   {0,"dmarks_iedmode_0"},
			   {1,"dmarks_ied_timer"},
			   {2,"dmarks_iedmode_2"},
			   {-1,"dmarks_action_disabled"}
			}
		},

		{ id = "divider", type= "line" },

		{ id = "simple_press_ignore_shift", type = "check", val = 1, def = cfg.simple_press_ignore_shift },
		{ id = "simple_press_ignore_ctrl", 	type = "check", val = 1, def = cfg.simple_press_ignore_ctrl },
		{ id = "simple_press_ignore_alt", 	type = "check", val = 1, def = cfg.simple_press_ignore_alt },

		{ id = "divider", type= "line" },
	}
end

-- ======================================================================

function generate_icons_menu()
	local task_icons =  {
		pri = cfg.swap_task_pri and cfg.swap_task_pri.texture,
		sec = cfg.swap_task_sec and cfg.swap_task_sec.texture
	}
	local gr = {
	-- ======================================================================
	-- 	Main header and marker settings
		{ id = "menuslide_icons", 		type = "slide", link = "ui_mcm_dotmarks_banner_icons", size = {512,50}, spacing = 0 },

		{ id = "iconheader", type = "desc", text = "ui_mcm_dotmarks_header_icons",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
			dmark_bpos 		= -10
		},


		{ id = "dot_marker_size", 		type = "track",		val = 2, min = 0, step = 0.1, max = 2, def = cfg.dot_marker_size,
			on_selection_functor= {dotmarks_mcm.on_dotmark_size_select},
			ui_hook_functor 	= {dotmarks_mcm.init_dotmark_preview},
			icon 	= cfg.marker_dotmark or "",
			icon_w 	= (cfg.dotmark_preset.width or 5),
			icon_h 	= (cfg.dotmark_preset.height or 5),
			icon_x 	= 370,
			icon_y 	= 12,
		},

		get_argb_input_element("argb_dot_normal", cfg.colors.clr_dmark_norm),

		get_argb_input_element("argb_dot_focus", cfg.colors.clr_dmark_focus),

	-- ======================================================================
	-- 	Iterate focus icons for service NPCs
		{ id = "enable_icon_tasks", type = "check", val = 1, def = cfg.enable_icon_tasks,
			ui_hook_functor = {dotmarks_mcm.init_icon_list},
			icon_list 	= task_icons,
			icon_w 		= 32, 	icon_h 		= 32,
			icon_x 		= 450, 	icon_y 		= 8,
		},

		{ id = "divider", type= "line" },

		{ id = "enable_icon_services", type = "check", val = 1, def = cfg.enable_icon_services,
			ui_hook_functor = {dotmarks_mcm.init_icon_list},
			icon_list 	= cfg.service_icons,
			icon_w 		= 32, 	icon_h 		= 32,
			icon_x 		= 450, 	icon_y 		= 8,
		}
	}
	local used = {}
	for k,v in spairs(cfg.service_icons) do
		if not used[v] then
			local service = v:sub(v:find("^ui_catsy_marker_") + 16)
			local opt_id = "argb_service_" .. service
			table.insert(gr, get_argb_input_element(opt_id))
			used[v] =  true
		end
	end

	table.insert(gr, { id = "divider", type= "line" })

	-- ======================================================================
	-- 	Iterate the rest of the focus icons
	local tbl = {}
	local icons = {}

	for k,v in pairs(cfg.setting_icons) do
		local iclass = cfg.setting_icons[k]
		local icon 	= iclass and cfg.tex[iclass]
		icons[k] = icon
	end
	icons["enable_icon_butcher"] = cfg.swap_butcher and cfg.swap_butcher.texture

	for k,v in pairs(icons) do
		tbl[#tbl + 1] = k
	end

	table.sort(tbl, function(a, b) return a > b end)
	for _, opt_id in spairs(tbl) do
		local argb_id = opt_id:gsub("enable", "argb")
		local enabled = cfg[opt_id]
		local icon 	= icons[opt_id]
		
		table.insert(gr, 
			{ id = opt_id, type = "check", val = 1, def = cfg[opt_id],
				ui_hook_functor = {dotmarks_mcm.init_simple_icon},
				icon = icon or "",
				icon_w = 24, 	icon_h = 24,
				icon_x = 450, 	icon_y = 11
			}
		)
		if (opt_id == "enable_icon_stash") then
			table.insert(gr, 
				{ id = "must_discover_stashes", type = "check", val = 1, def = cfg.must_discover_stashes }
			)	
		end
		table.insert(gr, get_argb_input_element(argb_id))
	end

	table.insert(gr, { id = "divider", type= "line" })

	return gr
end

-- ======================================================================

function generate_objs_menu()
	local gr = {
	-- ======================================================================
	-- 	Main header
		{ id = "menuslide_objs", type = "slide", link = "ui_mcm_dotmarks_banner_objs", size = {512,50}, spacing = 0 },

		{ id = "scanheader", type = "desc", text = "ui_mcm_dotmarks_scanmenu",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head140",
			dmark_bpos 		= -10
		},
	}
	
	-- ======================================================================
	-- 	Iterate scannable objects
	tbl = {}
	for k,v in pairs(cfg.scan) do
		tbl[#tbl + 1] = k
	end
	table.sort(tbl)
	for _, item_class in spairs(tbl) do
		local enabled 	= cfg.scan[item_class]
		local opt_id 	= "scan_" .. string.lower(item_class)
		
		table.insert(gr, { id = opt_id, type= "check", val = 1, def = enabled })
	end
	table.insert(gr, { id = "divider", type= "line" })

	return gr
end

-- ======================================================================

function get_mods_menu()
	return {
		{ id = "menuslide_sec", type = "slide", link = "ui_mcm_dotmarks_banner_mods", size = {512,50}, spacing = 0},

		{ id = "header_addons", 			type = "desc", text = "ui_mcm_dotmarks_addons_desc",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
			dmark_apos 		= -10,
		},

		{ id = "divider", type= "line" },

		{ id = "header_mymods", 			type = "desc", clr = {255,255,215,0}, text = "ui_mcm_dotmarks_addons_catspawmods",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
		},
		{ id = "bodies_use_paw_patches",  	type = "check", 	val = 1, def = cfg.bodies_use_paw_patches },
		{ id = "bodies_use_mpda_rules",	  	type = "check", 	val = 1, def = cfg.bodies_use_mpda_rules },

		{ id = "header_fddaanims", 			type = "desc", clr = {255,255,215,0}, text = "ui_mcm_dotmarks_addons_anims",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
		},

		{ id = "show_prompt_during_anim", 	type = "check", 	val = 1, def = cfg.show_prompt_during_anim },
		{ id = "prompt_busy_during_anim",	type = "check", 	val = 1, def = cfg.prompt_busy_during_anim },
		{ id = "item_use_delay", 			type = "track", 	val = 2, min = 0, step = 0.01, max = 1, def = cfg.item_use_delay },

		{ id = "sec_enable_heal_anim", 		type = "check", 	val = 1, def = cfg.sec_enable_heal_anim },

		{ id = "sec_enable_arty_anim", 		type = "check", 	val = 1, def = cfg.sec_enable_arty_anim },

		{ id = "header_autoloot",			type = "desc", clr = {255,255,215,0}, text = "ui_mcm_dotmarks_addons_autoloot",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
		},

		{ id = "takeall_does_autoloot", 	type = "check", 	val = 1, min = -384, max = 768, def = cfg.takeall_does_autoloot },
		{ id = "hijack_autoloot_keybind", 	type = "check", 	val = 1, min = -384, max = 768, def = cfg.hijack_autoloot_keybind },

		{ id = "header_sortplus",			type = "desc", clr = {255,255,215,0}, text = "ui_mcm_dotmarks_addons_sortplus",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
		},

		{ id = "sp_hide_junk_items", 		type = "check", 	val = 1, def = cfg.sp_hide_junk_items },
		{ id = "sp_icon_pos_x", 			type = "input", 	val = 2, min = -512, max = 1024, def = cfg.sp_icon_pos_x},
		{ id = "sp_icon_pos_y", 			type = "input", 	val = 2, min = -384, max = 768, def = cfg.sp_icon_pos_y },

		{ id = "header_utjanui",			type = "desc", clr = {255,255,215,0}, text = "ui_mcm_dotmarks_addons_utjanui",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
		},
		{ id = "show_parts_weapons", 		type = "check", 	val = 1, def = cfg.show_parts_weapons },
		{ id = "show_parts_armor", 			type = "check", 	val = 1, def = cfg.show_parts_armor },

		{ id = "parts_dot_orientation", 	type= "list", 		val = 2, def = cfg.parts_dot_orientation, 
			content = {
			   {0,"dmarks_pdot_style_h"},
			   {1,"dmarks_pdot_style_v"},
			   {2,"dmarks_pdot_style_r"},
			}
		},

		{ id = "parts_dot_pos_x", 			type = "input", 	val = 2, min = -512, max = 1024, def = cfg.parts_dot_pos_x },
		{ id = "parts_dot_pos_y", 			type = "input", 	val = 2, min = -384, max = 768, def = cfg.parts_dot_pos_y },
		{ id = "parts_dot_scale", 			type = "track", 	val = 2, min = 0, step = 0.1, max = 2, def = cfg.parts_dot_scale },
		{ id = "parts_dot_shadow_alpha", 	type = "track", 	val = 2, min = 0, step = 0.01, max = 1, def = cfg.parts_dot_shadow_alpha },

		{ id = "header_skillsys",			type = "desc", clr = {255,255,215,0}, text = "ui_mcm_dotmarks_addons_skillsys",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
		},

		{ id = "use_skill_system", 			type = "check", 	val = 1, def = cfg.use_skill_system },
		{ id = "haru_skill_coef", 			type = "input", 	val = 2, min = 0, max = 5, step = 0.01, def = cfg.haru_skill_coef },
		{ id = "haru_skill_name", 			type = "input", 	val = 0, def = cfg.haru_skill_name },

		{ id = "header_othermods",			type = "desc", clr = {255,255,215,0}, text = "ui_mcm_dotmarks_addons_othermods",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
		},

		{ id = "all_squad_members_talk",	type = "check",		val = 1, def = cfg.all_squad_members_talk or utils_catspaw_common.using_gamma_modpack },
	}
end

-- ======================================================================

function get_adv_menu()
	return {
		{ id = "menuslide_adv", type = "slide", link = "ui_mcm_dotmarks_banner_adv", size = {512,50}, spacing = 0 },
		{ id = "header_debug", 	type = "desc", text = "ui_mcm_dotmarks_header_debug_nocolor",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_text 		= "ui_mcm_dotmarks_header_debug",
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head140",
			dmark_apos 		= -20,
		},
		{ id = "debuglogs", 			type = "check", 	val = 1, def = ui_hud_dotmarks.debuglogs },
		{ id = "verbose", 				type = "check", 	val = 1, def = ui_hud_dotmarks.verbose },

		{ id = "divider", type= "line" },

		{ id = "header_adv", 		type = "desc", text = "ui_mcm_dotmarks_adv_desc",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
		},

		{ id = "write_to_save", 		type = "check", 	val = 1, def = ui_hud_dotmarks.write_to_save },

		{ id = "divider", type= "line" },

		{ id = "hide_interaction_dots", type = "check", 	val = 1, def = cfg.hide_interaction_dots },
		{ id = "hide_mute_stalkers", 	type = "check",		val = 1, def = cfg.hide_mute_stalkers },
		{ id = "hidden_show_prompts", 	type = "check", 	val = 1, def = cfg.hidden_show_prompts },
		{ id = "hide_connecting_line", 	type = "check", 	val = 1, def = cfg.hide_connecting_line },
		{ id = "hide_keybind_element", 	type = "check", 	val = 1, def = cfg.hide_keybind_element },
		{ id = "hide_pri_interact_ui", 	type = "check", 	val = 1, def = cfg.hide_pri_interact_ui },
		{ id = "hide_sec_interact_ui", 	type = "check", 	val = 1, def = cfg.hide_sec_interact_ui },
		{ id = "hide_van_interact_ui", 	type = "check", 	val = 1, def = cfg.hide_van_interact_ui },
		{ id = "hide_pickup_item_names",type = "check", 	val = 1, def = cfg.hide_pickup_item_names },

		{ id = "disable_all_sounds", 	type = "check", 	val = 1, def = cfg.disable_all_sounds },

		{ id = "divider", type= "line" },

		{ id = "ui_scale", 				type = "track", 	val = 2, min = 0, step = 0.01, max = 2, def = cfg.ui_scale },
		{ id = "font_scale_w", 			type = "track", 	val = 2, min = 0, step = 0.01, max = 2, def = cfg.font_scale_w },
		{ id = "font_scale_h", 			type = "track", 	val = 2, min = 0, step = 0.01, max = 2, def = cfg.font_scale_h },

		{id = "keybind_bg_style", type= "list", val = 2, def = cfg.keybind_bg_style, 
			content = {
			   {4,"dmarks_kbstyle_s2"},
			   {3,"dmarks_kbstyle_worn"},
			   {2,"dmarks_kbstyle_full"},
			   {1,"dmarks_kbstyle_wire"},
			   {0,"dmarks_kbstyle_none"},
			}
		},

		{ id = "font_main_prompt", 		type= "list", 		val = 2, def = cfg.font_main_prompt, 
			content = {
			   {7,"dmarks_font_graf32"},
			   {6,"dmarks_font_graf22"},
			   {5,"dmarks_font_graf19"},
			   {4,"dmarks_font_let25"},
			   {3,"dmarks_font_let18"},
			   {2,"dmarks_font_let16"},
			   {1,"dmarks_font_medium"},
			}
		},

		{ id = "font_item_card", 		type= "list", 		val = 2, def = cfg.font_item_card, 
			content = {
			   {6,"dmarks_font_graf22"},
			   {5,"dmarks_font_graf19"},
			   {4,"dmarks_font_let25"},
			   {3,"dmarks_font_let18"},
			   {2,"dmarks_font_let16"},
			   {1,"dmarks_font_medium"},
			   {0,"dmarks_font_small"},
			}
		},

		{ id = "prompt_fade_in_time", 	type = "track",		val = 2, min = 0, step = 1, max = 1000, def = cfg.prompt_fade_in_time },
		{ id = "prompt_fade_out_time", 	type = "track",		val = 2, min = 0, step = 1, max = 1000, def = cfg.prompt_fade_out_time },
		{ id = "popin_anim_dur", 		type = "track",		val = 2, min = 0, step = 1, max = 2000, def = cfg.popin_anim_dur },

		{ id = "action_text_pos_x", 	type = "input", 	val = 2, min = -384, max = 768, def = cfg.action_text_pos_x },
		{ id = "action_text_pos_y", 	type = "input", 	val = 2, min = -512, max = 1024, def = cfg.action_text_pos_y },
		{ id = "bind_text_pos_x", 		type = "input", 	val = 2, min = -512, max = 1024, def = cfg.bind_text_pos_x },
		{ id = "bind_text_pos_y", 		type = "input", 	val = 2, min = -384, max = 768, def = cfg.bind_text_pos_y },

		{ id = "divider", type= "line" },

		{ id = "header_icard", 		type = "desc", clr = {255,255,215,0}, text = "ui_mcm_dotmarks_itemcard_desc",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
			dmark_apos 		= -10,
		},
		{ id = "item_card_pos_x", 		type = "input", 	val = 2, min = -512, max = 1024, def = cfg.item_card_pos_x },
		{ id = "item_card_pos_y", 		type = "input", 	val = 2, min = -384, max = 768, def = cfg.item_card_pos_y },
		{ id = "item_card_elem_x", 		type = "input", 	val = 2, min = -512, max = 1024, def = cfg.item_card_elem_x },
		{ id = "item_card_elem_y", 		type = "input", 	val = 2, min = -512, max = 1024, def = cfg.item_card_elem_y },

		{ id = "item_card_elem_h", 		type = "input", 	val = 2, min = 0,    max = 100, def = cfg.item_card_elem_h },
		{ id = "item_card_icon_x", 		type = "input", 	val = 2, min = -512, max = 1024, def = cfg.item_card_icon_x },
		{ id = "item_card_icon_y", 		type = "input", 	val = 2, min = -512, max = 1024, def = cfg.item_card_icon_y },
		{ id = "item_card_icon_sz", 	type = "input",		val = 2, min = 0, 	 max = 64, def = cfg.item_card_icon_sz },
		{ id = "item_card_text_y", 		type = "input", 	val = 2, min = -512, max = 1024, def = cfg.item_card_text_y },

		{ id = "divider", type= "line" },

		{ id = "header_offset",	type = "desc", text = "ui_mcm_dotmarks_offsets_desc",
			ui_hook_functor = {dotmarks_mcm.init_header_element},
			dmark_tex 		= "ui_mcm_dmarks_messagebox_transbg_head90",
			dmark_apos 		= -10,
		},
		{ id = "pri_use_x_offset", 		type = "input", 	val = 2, min = -512, max = 1024, def = cfg.pri_use_x_offset },
		{ id = "pri_use_y_offset", 		type = "input", 	val = 2, min = -384, max = 768, def = cfg.pri_use_y_offset },
		{ id = "sec_use_x_offset", 		type = "input", 	val = 2, min = -512, max = 1024, def = cfg.sec_use_x_offset },
		{ id = "sec_use_y_offset", 		type = "input", 	val = 2, min = -384, max = 768, def = cfg.sec_use_y_offset },
		{ id = "fixed_screen_pos", 		type = "check", 	val = 1, def = cfg.fixed_screen_pos },

		{ id = "divider", type= "line" },
		{ id = "near_scan_interval", 	type = "input", 	val = 2, min = 0, max = 10000, step = 1, def = cfg.near_scan_interval },
		{ id = "early_scan_interval", 	type = "input", 	val = 2, min = 0, max = 30000, step = 1, def = cfg.early_scan_interval },
		{ id = "near_scan_radius", 		type = "input", 	val = 2, min = 2, max = 25, step = 0.5, def = cfg.near_scan_radius },
		{ id = "early_scan_radius", 	type = "input", 	val = 2, min = 2, max = 25, step = 0.5, def = cfg.early_scan_radius },

		{ id = "divider", type= "line" },
	}
end

-- ======================================================================

function on_mcm_load()
	if not cfg then return end
	cache = {}
	cfg.unsquish_ratio = utils_catspaw_hudmarks.update_unsquish_ratio() or 1
	color_tokens = utils_catspaw_text.get_color_tokens() or color_tokens
	lang = ui_options.curr_localization()
	xml:ParseFile("ui_dotmarks.xml")
	valid_mcm = valid_mcm_version()
	if (not valid_mcm) or (not exes_version) or (exes_version < 20250306) then
		load_failed = true
	end

	op = { id = "dotmarks", gr = {
			{ id = "dmarkmain", sh = true, gr = get_main_menu() },
			{ id = "dmarksec", 	sh = true, precondition = { dotmarks_mcm.load_success }, gr = get_sec_menu() },
			{ id = "dmarkicons", sh = true, precondition = { dotmarks_mcm.load_success }, gr = generate_icons_menu() },
			{ id = "dmarkobjs", sh = true, precondition = { dotmarks_mcm.load_success }, gr = generate_objs_menu() },
			{ id = "dmarkmods", sh = true, precondition = { dotmarks_mcm.load_success }, gr = get_mods_menu() },
			{ id = "dmarkadv", 	sh = true, precondition = { dotmarks_mcm.load_success }, gr = get_adv_menu() },
		}
	}
	return op
end
